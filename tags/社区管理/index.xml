<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>社区管理 on 开源之道</title>
    <link>http://www.ocselected.org/tags/%E7%A4%BE%E5%8C%BA%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 社区管理 on 开源之道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016, 适兕; all rights reserved.</copyright>
    <lastBuildDate>Thu, 24 Oct 2019 18:06:47 +0800</lastBuildDate>
    
	<atom:link href="http://www.ocselected.org/tags/%E7%A4%BE%E5%8C%BA%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开源软件项目的定性和定量分析指标 ———— CHAOSS 指标解析</title>
      <link>http://www.ocselected.org/posts/community_management/chaoss_metrics_201908_learning/</link>
      <pubDate>Thu, 24 Oct 2019 18:06:47 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/chaoss_metrics_201908_learning/</guid>
      <description>“科学管理在实质上要求任何一个具体机构或机构中的工人及管理人员进行一场全面的心理革命，没有这样的心理革命，科学管理就不存在。” ———— 泰勒 《科学管理原理》
 引言 笔者最近阅读了CHAOSS 在8月份发布的开源软件项目的量化指标，颇受启发，于是索性将所想所得和大家分享一番，开源之道走过了这几年，抽丝剥茧，一直试图找到和大家探讨的话题，一同解决令人困惑的难题，但是缺少必要的积累，一直倾向于定性的探索和研究，鉴于知识背景和视野的不同，于是很难找到让大家感兴趣的话题，甚至某位朋友善意的提醒：“多讲点实在的”，多年过去了，我也终于对关于定性的问题有了一些理解和认识，那么这也意味着是该集中起来做些定量的指标衡量的事情了。
当然，伴随着科技的进步，很多人开始迷信数据，比如流行GitHub star数量、fork数量等等，这尤其体现在某些公司做考核之用，非常的实惠。但是这并不是开源之道所看重的，尽管量化指标很重要，正如红帽开源项目办公室的高级首席社区架构师Brian Proffitt（同时也是CHAOSS的治理委员会成员）所言，你有了指标和衡量，就一定保证Community是健康的吗？对此开源之道是颇为赞同的，一直以来坚持在没有搞清楚性质之前，不要去迷信数据的缘由。
如果搞清楚了定性的问题，那么量化指标是自然而然的事情，毕竟这是一个科学管理为王的世界。所以开源之道接下来会有意的写一些关于指标量化方面的文章和知识输出。
什么是CHAOSS？ 开源的重要是不言而喻的，大家默认都是承认开源对于我们所生活的世界的重要性的，也是可以看得到的，唯一的问题就是所有权下的经济形式限制了很多人的思考模式，如何从中获利？需不需要承担其中的道德责任？更有甚者便是随着开源生态的形成，问题反而更多，大家对其的关注度越来越高。例如：
 开源的贡献者想知道那些开源项目具有影响力，自己该往哪个方向努力？ 开源Community则希望能够吸收到更多的成员、确保始终如一的质量、以及奖励那些做出重大贡献的成员。 拥抱开源的公司则希望知道那些Community和软件项目是值得合作的？通过交流能够产生一定的影响，以及想评估自己的员工在开源当中的工作。 开源非盈利组织，如基金会则希望能够识别出Community的需求，最好能做到积极的响应，进一步评估自身的工作，以促进community的良性发展  所有的这些问题，都是需要一些数据和指标来进行衡量的。当然也是所有开源Community所必需的内容。
为了解决这些问题，CHAOSS 应运而生，开发开源的指标、方法论、以及相应的软件项目，旨在让开源项目能够良性的发展且具有可持续性，通过衡量开源项目的健康度和可持续性，进一步，CHAOSS 会寻求提高开源项目健康度和可持续性的可操作性，进而让所有的利益相关者能够做出更加明智的决策，而不是在盲人摸象般的行进。
CHAOSS 的目标 目前来说，有三类目标：
 建立与实施无关的度量标准，以衡量Community活跃度、贡献以及健康度 开发和集成相应的开源软件，来分析Community的开发 构建可复制的项目健康报告  CHAOSS 是Linux基金会下的项目。区分了两个委员会和五大工作组。委员会主要区分为指标委员会和软件委员会。顾名思义，指标委员会即是实现上述目标一的决策机构。
五大工作组的任务和方向 工作组的目标即完善开源Community相关的指标，并确保其可以使用相应的软件可以实现。使用 GitHub 的项目进行组织和管理，具体的有：
 多样性和包容性：目的是在开放源代码项目中引入经验以衡量一致性和包容性，并在可能的情况下获得软件的支撑。 Evolution指标（用于软件开发项目）：专注于开源项目的生命周期， 通用指标：所有的用于Community和开源相关的指标均在这个工作组进行，除非需要特别的对待进而分离出更多的工作组。 经济价值：围绕开源项目和Community的相关经济活动。 风险评估：重点关注与开源风险有关的指标。  解析指标 让我们回到CHAOSS在2019年8月份发布的指标本身上，总结起来可以使用下面这个表格来涵盖所有的内容：
   指标项 （尝试回答的）问题 开源之道注解     组织多样性 何谓贡献者的组织多样性？    不同的参会票 在会议中，如何设置不同的票来体现多样性和包容性？ 例如女性贡献者   在会议上的行为准则 在会议中，行为准则体现出多样性和包容性。    家庭友好程度 使家庭能够一起参加会议，进而阐释会议的多样性和包容性    项目行为准则 项目行为准则如何支持多样性和包容性？    导师制度 我们的导师制度在支持项目的多样性和包容性方面的效果如何？    代码变更 在指定时间段内对源代码进行了哪些更改？    代码变更行数 在特定时间段内对源代码进行的所有更改中的代码行数（添加、删除的都算）的总和是多少？    Review 在一个时间段内，有哪些对项目进行更改的review请求    已接受的 Review 在代码的变更中有多少已经接受的review    新建issue 在一个时间段内，有多少新建的issue？    issue活跃度 在一个时间段内，有多少issue是保持活跃的？    关闭的issue 在一个时间段内，有多少是已经处理完毕的issue    Elephant Factor Community的工作分布均匀程度如何?</description>
    </item>
    
    <item>
      <title>如何管理开源项目中的即兴贡献者</title>
      <link>http://www.ocselected.org/posts/community_management/managing-casual-contributors/</link>
      <pubDate>Mon, 20 May 2019 18:07:49 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/managing-casual-contributors/</guid>
      <description>名词解释 casual contributors，也被称为是 &amp;ldquo;episodic volunteering&amp;rdquo; ，意指那些开源社区中，没有担任特别的职责，偶尔零星的会对社区和项目做出贡献的志愿者们。和像演员的非正式训练，将生活中的某个有趣的片段当做艺术来演绎。故开源之道翻译为即兴。
引言 开源是如此的重要，以至于美国政府禁止美国公司和华为进行贸易的事件，让国内的软件界的人倍感压力，甚至就美国政府是否会干涉开源基金会这事，开源社、CSDN等还专门撰文澄清，也是洋洋软件大国的一大奇观了。
但是毋庸置疑的是，虽然开源软件使用了不少，但是开源社区在国内的发展确实是差了非常多，至今没有一个像样的社区，更加不用提基金会的事情了。开源之道还是坚持一贯的主张，努力的去提高认知，掌握开源背后的思想、知识和价值，或许能够在较可预见的期限内能够找到一条成功的路径来。否则，只有倒退。
这次给大家推荐的是 Ann Barcomb 的研究文章，开源之道日后会慢慢介绍给大家她的开源研究成果。
正文 越来越多的人希望是很随意的为项目做出贡献，而不是非得正儿八经的像传统朝九晚五上班的样子。这一现象其实不仅是软件界，在很多志愿者组织以及政府都意识到了这一“情景化的志愿”大的趋势，其中的缘由，不能简单的归之于劳动力所发生的变化，这里指的是人们做志愿者的时间在变少，而且人们对待志愿者的态度也在发生着变化。因为它不再被视为是一项社区义务，而是成为了一项有条件的活动，志愿者是可以从中获得一些利益的。此外，伴随着分布式版本控制系统的成熟，以及GitHub所带来的将贡献标准化的网络效应，使得人们很随意的对自由/开源软件（FLOSS）做出贡献。
尽管有充足的理由让社区经理们去重点关注那些可以为社区/项目长期做出贡献的人，以及可能成为长期贡献者的人，但是我这里可能要说点不一样的，那些过客般的志愿者是同样重要的，
 首先，事实研究表明，过客贡献者的活跃程度对于自由/开源软件项目是有益的，他们可以创新，提高软件质量，并通过社交网络传播项目知识。即使是非代码的贡献者，也可以将项目的内容传播的更为久远。
 第二，尽管很多的社区管理者们都希望将即兴的贡献者转化为长期的贡献者，但是往往遇到的困难重重。很多即兴贡献者都对社区贡献非常的大，但是就是无法为社区贡献过多时间。是不是如果好好的规划的话，他们的工作可能会更为出色。虽然甄别这些贡献值非常的难，除非是改名成员自己做了其它的提交的，但是聊胜于无，拥有一个管理的战略计划是非常必要的。本文中推荐的刴实践是蛮适合营收和习惯性贡献者的，因此，想获得他们，并是一件困难的事情。
 第三、这些即兴的贡献者，可能已经成为社区的一部分了，但是却对他们却视而不见，没有做到有效管理。能够意识到即兴贡献者并非是一次性的参与者是非常重要的。和那些长期的持续贡献者一样，他们的留存就可能在未来会返回继续承接新的任务。我们知道对于社区的新晋人员来说，需要更多的帮助以及时间培养，方能提高转换为贡献者，再退一不讲，即使是他们不能做到持久的贡献，但是他们已经对社区现有的工作方式非常的熟悉了，这本身就难能可贵。
  吸引并留存即兴贡献者的五大因素 经过多年的研究，我们以为吸引并留存即兴贡献者有五块重大的因素，下图所展示的是基于论文：Hyde, Dunn, Bax, and Chambers (2016)，该示意图描述了这些因素，以及因素之间的关系的简化模型，以及从个人出发的路径图。
（图片说明：图片来自Ann Barcomb）
这些因素整体上可以区分为两个大类：前提和体验。前提是在该人开始参与之前存在的因素，并且更倾向于影响新的贡献者。经验是参与的结果，对长期临时参与者来说是一个更加明显的因素。所有五个因素 —— 动机、社会规范、心理社区意识、满意度、组织承诺 —— 都会影响到最后的留存率。志愿者的留存率是其未来参与的唯一最佳预测因素，因此这里作为最终的衡量。
 动机：预测即兴贡献者的留存，个人利益、享受、以及社交等项是最为重要的动机，那些想要给自己简历添上一笔精彩，或者是寻找更具挑战性的程序漏洞，一旦满足了他们的需求，他们就有可能对项目兴趣索然了，相比之下，那些想要在其中找到乐趣或者是社交互动的人，如果口味对了，那么他们更有可能继续；但是这些人也会出现问题，那就是他们很可能会被项目中高深的技术所吓倒，尤其是那些确定在何处更改代码以修复错误的挑战。 社会规范：在这里，社会规范指的是参与者是否认为其他人赞成或反对该活动。由于普通公众不太可能对提供FLOSS项目有强烈的意见，与其他类型的志愿者活动相比，这不是FLOSS的一个因素。然而，与任何类型的志愿者一样，FLOSS参与者（尤其是非代码贡献者）很可能会响应个人邀请，让他们认识的人做出贡献。 心理社区意识：这指的是一个人在 FLOSS 社区中获得的支持和被接受时的感受程度。很多情况下，在社区受到欢迎的人更有可能留下来。在我们的研究中，许多人将包容性描述为热情氛围的重要组成部分，因为包容性有助于人们对社区产生更为积极的情感。 满意度：该因素描述了人们的期望与实际贡献经验之间的匹配程度。满意度来自于是否受到欣赏、拥有充实的关系、能在工作中找到乐趣、以及知道自己的劳动成果是有实际用处的。当人们谈论他们留下的理由时，他们多数是在谈论着满意度。 组织承诺：在长期贡献者中最常见的是对 FLOSS 社区的忠诚度和认同度。即兴贡献者可以像长期持续的贡献者一样投入到社区中来的，这就是为什么使用“偶发性（episodic）”一词，因为他们并不会不负责任。就我对FLOSS社区的调查当中，发现喜欢谈论参与的人更有可能想留下来。当然，这未必一定会发生，即强烈的因果关系，但是这有助于寻找潜在的目标。  创建管理即兴贡献者的战略 有了上述的五个因素的梳理，我们就明确了参与和留存的重要衡量指标，那么社区就可以基于这些来制定管理即兴贡献者的具体策略了。志愿者的策略应该包括如下内容：
 预期的输出结果 适合于即兴贡献者的任务 确定并推广支持这些目标的做法， 对结果的衡量  同时还要计算，对于这些即兴贡献者的投入费用，不得超过他们能够带来的益处。(赔本的买卖似乎没有人干:-))
在刚开始的时候，对于社区的即兴贡献者来说似乎是没有那么难以理解的，但是过上一阵子之后，你就需要特别的对待他们了，因为想充分的利用起来他们，当然也想让他们留下来，长久、持续的为社区做出贡献。
为了找到合适的任务，我们可以将即兴贡献者区分为两种类型：多面手和专家。能充分发挥他们的能力是难以做到的，虽然有些人拥有特定的技能，我们称之为“专家”。应该为他们寻找、归类适合他们自身的任务。
最适合多面手的任务有：
 需要较少的努力，能够快速完成。 是较小的聚焦细节 需要很少的前期投资 可以分成更小的部分 不要求熟练劳动力 让那些长期的持续贡献者去做更大型、更重要的任务。  对于专家来说，只有一个建议：</description>
    </item>
    
    <item>
      <title>6条让社区繁荣的实用方法，进而取得项目成功</title>
      <link>http://www.ocselected.org/posts/community_management/6_ways_a_community_help_project_succeed/</link>
      <pubDate>Mon, 25 Mar 2019 22:04:06 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/6_ways_a_community_help_project_succeed/</guid>
      <description>所谓的创新、研究、市场营销、技术支持等等，所有这些企业的因素，社区均可以提供，当然，前提是你足够的重视社区。
 开源之道注： 这是一篇常见的基于开源项目的商业公司的市场软文，本文算不上任何的高明之处，在大讲各种人类美好愿景的同时，添加进自己商业公司，肮脏到没有任何的底线。之所以翻译它，是因为它颇具代表性，国内特殊的文化环境，是无法吐槽任何公司的，所以不妨以这篇文章来告诉大家真相。
 NethServer 是一家叫做来自意大利的公司 Nethesis 所开发的开源产品，大约维持了很多年，产品之所以有今天的样子，离不开社区的支持。
作者在过去也写过一些关于社区发展需要公司做些什么之类的文章，在本文中，作者将会从企业投资的角度来看待，如果能够构建出充满活力的社区的情况下，公司能够收获什么？
以下是公司能够获得的6个益处。
创新 “开放式创新” 通常是发生哪些公司对外部分享信息而获得反馈和建议的时候，作为一家公司来讲，不仅要关注自己员工的想法，也要通过社区来获得创新。
你或许听过这么一句格言：&amp;rdquo;想要一个好的想法的话，就先要有很多想法。&amp;rdquo; 你不能指望所有好的想法都是自己悟到的。所以对于一款产品来说有不同的观点是非常重要的，一家小公司到底可以创造多少真正具有颠覆性的想法？通常这些小公司都创立没有几年，身处远离美国的其它地方，但是我们拥有社区，我们就可以从来自不同的阶级、背景知识、技能集合、甚至是各自的喜好的人们当中获得灵感。
因此，邀请整个世界不断改进产品的能力现在不再是梦想;它发生在我们眼前。社区是可以成为创新的理念工厂的，通过社区，方能感受到集体的强大力量。
无论你是谁，大多数最聪明的人都为别人工作。社区是接触聪明人并与他们合作的不错的方式之一。
研究 一个社区是可以成功对产品最为有益的价值来源。
首先，它可以帮助我们避免“蒙头做事”——自己认为产品最满意。正如 StackExchange 的联合创始人 Jeff Atwood 所说： 开发人员所开发的产品而不知道用户是谁，这是非常危险的事情。那些与世隔绝的开发者，他们在自己的孤岛里工作了很久，但是往往没有好的结果，这恰是因为他们对于用户如何使用他们的软件一无所知所导致。待在孤岛里的开发者，远离用户，似乎看起来没有什么烦恼，但是只会导致糟糕的结局。而社区就是让开发者回到现实的不错方法，让他们和用户进行沟通。开发人员利用有限的资源孤立地工作的日子已经一去不复返了。在我们这个时代，开源社区让研究可以向全世界敞开大门！
第二，社区是一个非常不错收集产品反馈的方式 —— 这对产品经理在进行下一步动作之前有很大的帮助。如果有人提出了反馈，它意味着有人关注到了你的产品。这是非常大的馈赠，社区是获取这些宝贵反馈的好地方。接收早期反馈非常重要，因为它可以有效降低那些根本不会在市场上产生任何效应的浪费。这样就可以安全地提前失败，快速失败，并经常失败。
第三，社区可以帮助我们和其它的项目进行比较。关于竞争对手的所有特性、优劣势对比，社区或许就有人真正客观的做了。有问题，可以问社区。
洞见 社区是一个公司可以从侧面了解外部是如何看待公司以及产品的，社区成员会捕捉到产品的优点和劣势，并且大多数人都意识到他们的产品的受众是谁。
来看一个失败的案例，NethServer 当初创建的时候，选择了一个看起来蛮吸引人的口号，几乎所有人都认为下面的描述完美无缺：
 NethServer 是一款专为Linux爱好者开发的操作系统，为中小型企业而打造。
 就这么喊了两年之后，不得不承认这是一个多么可怕的错误。
其实，当初公司对于自己的目标用户有任何的概念，以两年的时间终于意识到了：NethServer不仅适用于Linux爱好者;实际上，Windows用户也在使用。它不仅适用于小型办公室和中型企业;实际上，一些家庭用户安装NethServer供个人使用。社区帮助公司充分了解了自己的产品，最重要的还是从用户的角度来看待的。
开发 关于开发这点，毋庸置疑的是，开源的社区就是开源产品的真正来由。没有社区，就没有开源。
首先，社区可以提供测试和bug报告，事实上，如果去问开发者有关社区最大的优点的话，他们很可能就直接回答：“测试和bug报告。” 正是因为代码是向全世界开放的，所以对于世界上任何人都是机会均等的，稍具相关背景的人（甚至是爱好者或其它公司的人）都可以去试用、调试、持续的改进（包括开发额外的模块等）。社区成员也不仅仅是可以报告bug，他们还可以修复它，如果他们拥有充足的时间以及相应的知识的话。
当然，社区也不仅仅限于生产代码。社区还可以生产诸如 HowTo 指南、FAQ、支持文档、已经用户案例。你知道将产品翻译为7国语言需要花费多少钱吗？而在NethServer完全免费，这完全要感谢社区成员。
市场营销 社区可以帮助公司打开全球市场，举例来讲，作为一家小型的意大利的公司，从未考虑过全球化的事情，但是社区却帮助公司实现了这点，社区强制我们学习并改进英语的使用，因为这样不至于让我们在公众场合、读写方面无脸应对我们的观众。社区也逼迫公司去举办重要的研讨会——全程英语。
一个强大的社区还可以帮助公司获得营销的最高境界：良好的口碑。（也就是 Seth Godin 所称的部落营销
社区不仅能够确保贵司的信息可以顺利的从公司传递到部落，而且还能遍及周围，从部落成员到潜在的部落成员。社区成为了公司的传播者，会将公司的组织文化、项目产品讲给任何一个愿意倾听的人。
另外，社区还可以帮助公司建立最为重要的基础需要：归属感，参与到比自我更为强大的集体中，一起来改变世界。
用户忠诚度 吸引新的用户所花费的代价通常是留住现有客户的5倍之多，所以用户忠诚度对于任何一家公司都是非常重要的，至少是经营的底线。毫无疑问，社区可以帮助公司构建品牌忠诚，对于大众来说，想要记住一个没有任何标识的产品或公司是非常困难的，在社区，公司可以和人们建立连接，这比产品本身特性甚至是花钱都重要的多。（相信我！）
总结 永远不要忘记与社区合作始终是一个给予和获得回报的问题 —— 在公司和社区之间达成微妙的平衡。
讲真，如果说社区真的是解决企业的最佳途径的话，那我真的是在撒弥天大谎。在高度透明的环境下做事，也就意味着所有的事情都会被审核、评估、乃至被处理。为社区成员成员做支持工作，以及为他们之间的讨论进行导向，都是需要花时间和精力的，当然，上面6条所有的都实现的话，这些付出都是值得的。
开源布道师David Spink 经常不断重复的说：“当公司将社区视为一种​​策略而不是将其作为其业务理念的核心部分时，公司就会失败。” 而作者在另外一篇文章中讲到：“社区不仅仅是营销团队的扩展;“社区”不是一种有效的短期战略。”当社区是一家公司经营的核心理念时，它的回报可不止于短期的。
在Nethesis，我们每天都会体验到这一点。作为一家小公司，如果没有我们的社区，我们就永远无法取得任何的成果。
社区可以完全将公司的业务与同处相同领域的其他公司区别开来。其甚至可以重新定义市场营销，它可以做到激励数百万人，让他们有一种归属感，深刻感受到与公司存在的紧密的联系。最重要的是它可以帮助公司赚到钱。</description>
    </item>
    
    <item>
      <title>Kubernetes 社区是如何运作的系列之三——治理细则</title>
      <link>http://www.ocselected.org/posts/community_management/how_kubernetes_community_works_3/</link>
      <pubDate>Sun, 18 Mar 2018 22:09:17 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/how_kubernetes_community_works_3/</guid>
      <description>关于治理 忘记在哪里看到的了，说是搞开源，第一文化，第二流程，第三是工具。我们今天就 Kubernetes 的 SIG 治理细则，来看下具体的工具使用。至于原因吗，开源之道也不免唠叨几句：
文化的学习和习得绝非一日之功，可能需要数十年，数百年，甚至有些文化根本就无法移植。既然文化是一个很漫长的过程，还要比拼耐心，那么我们就退而求其次，学习下流程，然后，流程没有文化的支撑，仿佛鱼离开了水般的难以适应，需要大概经历好多年，才能慢慢习惯。举例来讲，开源社区讲究透明和影响力，那么很多事情就需要公开，这在某种文化背景下是非常难以实施的。然后，再退而求其次，只使用工具：邮件列表、可以存档的即时在线多人聊天、GitHub等，这是所有人都可以稍微花些时间就可以掌握的，因为是实实在在的规划好的路，而这点是非常符合所谓的落地的、可见的。
这就是开源之道愿意花时间和精力来讲治理细则的根本来由。废话颇多，不如见见实际的内容，以下为 Kubernetes SIG 的治理细则，细到如何上传YouTube视频。那么问题来了，对 Kubernetes 的技术本身有多深的理解和沟通能力才能有计划创建一个SIG？
总则说明 为了规范特别兴趣小组（SIG）的工作，也为了创建最具透明性的社区，以及为了能够让贡献者能够找到最合适的SIG，SIG应遵循以下指导原则：
 要有定期的会议，每三周至少要有半小时，尤其是在11月、12月。 会议记录要保持更新，且要在社区仓库页面链接到 SIG 的页面。 在 SIG 相应的邮件列表中，要提前说明会议的议程，而且要在会后发布会议记录。 记录SIG会议并公开发布 要确保 SIG 的邮件列表和 Slack 频道均已归档 每周社区会议至少每6周报告一次活动 根据需要参与发布计划会议和回顾，并结束会议 确保项目中发生的相关工作，如 GitHub组织的所有者、仓库的权限、代码、测试的负责人，SIG的支持的内容：包括issue、PR review、测试失败的响应、bug修复等 使用上述的形式作为工作、沟通和协作的主要手段，而不是私人间邮件来往和会面 要为 SIG 选一名代表出来。—— 目前的SIG代表名单和职责  SIG 角色 SIG 中的角色区分为如下两类：
 SIG 参与者 ：一个或多个项目的积极参与者；可代表较宽泛的角色 SIG lead：SIG 的组织者  SIG 创建和管理流程 前提准备  公开的发起创建 SIG的声明，包括一份简短的任务说明，然后发送邮件给kubernetes-dev@googlegroups.com和kubernetes-users@googlegroups.com，发送完毕后，耐心的等个两三天。 找到仓库的维护者，申请创建GitHub的标签，这里假设叫做foo的sig组，应该是：sig/foo 到http://kubernetes.slack.com/上申请一个新的频道:#sig-foo，slack的管理员是@parispittman和@castrojo。新用户可加入slack.kubernetes.io/。 Slack 的相关内容都会记录到kubernetes.slackarchive.io/，要创建一个新的归档频道的话，请通过/ invite @slackarchive来邀请slackarchive bot加入到该频道。 根据需要组织视频会议。毋需等待每周社区视频会议来进行讨论，还有就是在视频会议上要总结一下近期的活跃度。 向Paris Pittman(parispittman@google.com) 和 Jorge Castro(jorge@heptio.</description>
    </item>
    
    <item>
      <title>Kubernetes 社区是如何运作的系列之二——康威定律和SIG</title>
      <link>http://www.ocselected.org/posts/community_management/how_kubernetes_community_works_2/</link>
      <pubDate>Tue, 06 Feb 2018 22:18:44 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/how_kubernetes_community_works_2/</guid>
      <description>康威定律（Conway&amp;rsquo;s law） 随着信息技术的发展，以及现实的IT公司的成功，如Amazon、Netflix，以及云计算的普及，微服务的实践正在走向很多传统用户，然而，实施微服务的过程中，和DevOps的理念一样，人们发现并非仅仅是技术所能够解决的。还要涉及到组织架构。于是，伴随着微服务的发展，一位很少被人提及的科学家被推到了前端，也是被人忽视而尘封的科学家。
时间要拨回到1967年，Melvin Conway 以独特的视角观察到一个组织的组织结构会对其开发的系统有很大的影响。并撰写了&amp;ldquo;How Do Committees Invent&amp;rdquo; 这样一篇影响深远的论文，其中被人们广为知道的结论：
 设计系统【这里也不仅仅是指信息系统】的组织，其产生的设计和架构等价于组织间的沟通结构。
 该定律基于这样一个推理：为了能够让软件之间的模块相互作用，软件的撰写者们必须相互频繁的进行沟通，因此，系统的软件界面结构将会反映出打造此系统的组织的社会边界，要知道跨边界的沟通是比较困难的。Conway 定律的目的是试图说明这是蛮常见的社会学现象，尽管不够十分的严谨。
但是，Conway 的论文当年还是被HBR拒绝了，理由是没有证据可以证明他的推理的正确性。但是，这并没有淹埋这位才华横溢的结论。就在2015年，来自哈佛商学院和 MIT 的研究团队，用实际的研究和调查，证明了 Conway 定律的普适性，在其发表的论文：“探索产品和组织结构之间的二元性：对”镜像“假说的检验” 中得到的结论是：软件产品的模块化特征，往往是由分布式的团队所开发，而后者也更加的倾向于开发出模块化的产品。 该团队分析对比了十几款开源和闭源软件，其中包括大名鼎鼎的Linux Kernel、MySQL、GNUCash等，以及Solaris、XNU、BerkeleyDB等，进而得出的上面结论。
不过值得庆幸的是，近几年，人们已经开始渐渐的理解组织结构和他们要开发的软件之间的这种微妙的关系，并且为了成功的开发出软件，开始对组织进行相应的调整。业界以亚马逊和Netflix为其中翘楚，如前者以“二块披萨”团队文化而享誉业界。
Kubernetes SIG 如何组织社区的开发从来一直都是一门大学问，君不见开源项目五花八门、各有千秋，但是模块化是不变的宗旨。特别兴趣小组也是如此考虑的，设置特别兴趣小组是避免分层架构的限制，之所以如此设计是为了能够让开发者和社区的其他成员定期的进行聚会，也能够让人们在社区内部找到各自感兴趣和发力的地方。
我们来看下Kubernetes 目前已有的SIG：
   SIG 简单描述 备注     API Machinery 涵盖了所有和API服务、API注册和发现、通用API CRUD语义、管理控制、编解码、转换、默认、持久层（etcd）、OpenAPI、CustomResourceDefinition、垃圾回收、和客户端程序库的一切。    APPs 涵盖在Kubernetes中部署和运行应用程序。    Architecture 维护和开发 Kubernetes 的设计原则，以提供必要的一致专业知识，以确保随时间推移，架构仍能保持一致性。    Auth 涵盖对Kubernetes授权，身份验证和群集安全策略的改进。    AutoScaling 涵盖集群的自动调节，集群的水平和垂直自动调节，为集群设置初始资源，与监控集群相关的主题以及收集其度量    AWS 维护，支持和使用AWS Cloud上托管的Kubernetes。    Azure 在Azure上构建，部署，维护，支持和使用Kubernetes。    Big Data 涵盖在Kubernetes上部署和运行大数据应用程序（Spark，Kafka，Hadoop，Flink，Storm等）。    CLI 涵盖kubectl和相关工具。    Clustr Lifecycle 考察了我们应该如何改变Kubernetes，使其更容易管理和操作，重点放在集群部署和升级上。    Cluster Ops 提升Kubernetes集群的可操作性和互操作性。    Contributor Experience 发展和维持一个健康的贡献者社区对于扩大项目规模和发展生态系统至关重要。我们需要确保我们的贡献者高兴且高效。    Docs 涵盖Kubernetes的文档，doc过程和doc发布。    GCP 在Google云平台上构建，部署，维护，支持和使用Kubernetes。    Instrumentation 通过所有Kubernetes组件的指标，日志记录和事件以及相关组件（如Heapster和kube-state-metrics）的开发，涵盖了集群可观察性的最佳实践。    Multicluster 专注于解决与管理多个Kubernetes集群有关的常见挑战以及其中存在的应用程序。    Network 涵盖Kubernetes的网络。    Node 节点相关    On Premise 汇集Kubernetes社区的对Kubernetes运行的前提条件感兴趣成员。    OpenStack 协调OpenStack和Kubernetes社区的跨社区工作。    Product Management 侧重于产品管理的各个方面。    Release 版本发布    Scalability 负责回答与可伸缩性相关的问题    Scheduling Kubernetes的调度    Service Catalog CNCF服务的broker以及Kubernetes broker的实现。    Storage 涵盖存储和卷的plugin。    Testing 测试Kubernetes在各种环境下运行的可靠与稳定。    UI 涵盖与UI有关的所有内容。    Windows 重点是让Kubernetes 支持 windows 服务器容器。     通过上面表格，我们可以看出，SIG真的是SIG，很随意，丝毫没有规律可循：</description>
    </item>
    
    <item>
      <title>Kubernetes 社区是如何运作的系列之一——哲学及治理</title>
      <link>http://www.ocselected.org/posts/community_management/how_kubernetes_community_works_1/</link>
      <pubDate>Mon, 05 Feb 2018 21:54:47 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/how_kubernetes_community_works_1/</guid>
      <description>引子 在2017年，关于容器的管理和调度平台，战火的硝烟渐渐的平息，Kubernetes 以压倒性的优势占据了这个细分领域的霸主，如下图来自 thenewstack 的调查：
如果仅仅从纯技术的角度而言，Kubernetes 和其它平台是半斤八两，处于伯仲之间，那么在社区的运营和赢得人们信任的方面，Kubernetes绝对是No.1，没有哪家能够相提并论。即使是Docker本身拥有无数拥泵的情况下，是容器的默认事实标准，也无法抵挡透明、开放、协作的Kubernetes社区的魅力。开源之道在Kubernetes 之所以成功的背后神秘力量 进行过专门的表述。
在上个月的中旬，Software Engineering Daily 的Jeff 撰写了一篇非常棒的文章：Kubernetes 的“下沉”，意指Kubernetes已经像Linux在单机操作系统的地位一样，成为分布式系统平台的默认选择。成为了分布式系统事实上的标准。抛开技术的因素，我们不得不承认Kubernetes在社区的运作成功之处。这次我们就利用整个2月来论道一下Kubernetes的社区运作。
简单的历史回顾 2014年6月10日，Kubernetes 正式对外开源，代码托管在GitHub上，2015年7月21日，Kubernetes 1.0 正式发布，伴随着这个版本的发布，有一个重量级的全新的社区运营模式出现——和Linux基金会共同组成云原生应用基金会，Kubernetes 成为该基金会下第一个种子技术。并且联合了业内的很多公司如CoreOS、RedHat、Intel、Docker等。
CNCF 是一种全新的模式，由Linux基金会来运营，旨在解决云原生应用的可移植性，避免厂商锁定。
2年多过去了，Kubernetes 社区已经成长为一颗”参天大树”，不仅线下会议火爆兴旺，而且线上的活动也是非常的活跃。具体详情可以看Google开源策略主管：Sarah Novotny 在KubeCon北美2017上的主题演讲Kubernets社区。
Kubernetes 社区的总则 Kubernetes社区坚持以下原则：
 开放： Kubernetes 矢志不移的、始终如一的都是一款开源项目。可以参考仓库准则，所有的贡献者都须签署贡献者许可协议。 相信文明的力量：欢迎任何人，也尊重任何人。具体请参考CNCF 的行为准则 保持透明和所有人都可访问：所有的工作和协作都公开进行。 择优原则：想法和贡献根据技术优点来采纳，且要满足项目的目标、属于Kubernetes的技术范畴、也要与设计原则保持一致。  Kubernetes 治理方式 Kubernetes 社区的治理安排有三类主要的工作组：
 特别兴趣小组，SIG 工作组，WG 委员会  SIG Kubernetes 的分布式架构，决定了其工作可以模块化的同时进行，按照不同的功能或设计进行了一定的划分，如架构、自动伸缩、集群生命周期等。
（开源之道将会在系列之二，专门解释SIG对于Kubernetes的重要性，特别从软件工程的角度来阐释。敬请期待。）
工作组 这类似于一个SIG的临时缓存区，或者说孵化区，在社区活动中，难免会有一些人是突发奇想，或者是比较小众的不起眼的观点，等等，先成立这么一个工作组，比如目前中国移动、华为等参与的一个叫做“政策规则”的工作组，它是临时的，可以说是随时解散的，创建时容易，解散时也不会影响到谁。
委员会 有一些重大的主题，比如安全或行为守则这类事情，就需要严肃、谨慎的去对待，我们知道SIG是开放式的，是任何人都可以加入的自愿组织。但是委员会就不是对所有人开放的，需要有一定的资格，或者是考核，对Kubernetes有积极的贡献方有资格加入。
谈到委员会，我们还必须说一下Kubernetes的指导委员会，这是在项目成立之初由业内权威人士所组成，后来逐渐的退出，然后交由社区来进行选举。此指导委员会的使命就是为Kubernetes的治理制定流程，具体可参考其章程。
那么委员会是指导委员会根据实际需要来进行组件，持续时间没有任何的硬性规定，委员会的成员由指导委员会决定。委员会也有自己的章程并会选出一名领导，定期会向指导委员会进行书面报告，也会按照章程的规定向社区公开报告。
总结 Kubernetes 有着非常成熟的治理方式，也很恰当的处理和基金会的关系，比如我们知道Kubernetes是CNCF下的种子项目，CNCF提供一些必要的标准，然后Kubernetes项目旨在满足CNCF毕业标准，然而Kubernetes自身的社区是完全自治的。这样的话，Kubernetes 就是一个纯粹的技术社区，秉着公开、开放、文明、进化论的哲学思想或总则，以解决程序健康、稳定运行为目标，努力成为分布式软件平台。</description>
    </item>
    
    <item>
      <title>赞助开源社区开发是一件双赢的事情</title>
      <link>http://www.ocselected.org/posts/contribute_to_community/sponsored_development_is_a_win-win/</link>
      <pubDate>Wed, 10 Jan 2018 09:11:27 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/contribute_to_community/sponsored_development_is_a_win-win/</guid>
      <description>在常人的想法中，以为开源是有魔力的，认为自己只要开源了，就会有人蜂拥而至，那些个大牛们就会放弃自己的周末和下班休闲时间，来纷纷的、争先恐后的为项目做贡献。嗯，我现在告诉你，你错了，错的非常离谱，属于典型的幻想症患者。要不GitHub上有那么多无人问津的项目是怎么回事了呢？是的，大家都很忙，忙到无暇顾及这些。所以，除极个别的情形之外，指望程序员利用业余时间来为开源项目作贡献，是不合常识的。从头打造一个贡献者是需要花时间和精力的，而复杂的应用程序往往有着陡峭的学习曲线，经过那之后开发人员才能熟练的掌控代码。
开源软件公司往往就是那些大量的开源软件开发背后的支撑力量，构建社区以及为他们提供金钱上的支持，而且，要知道，开源软件公司和其它类型的商业公司一样————需要盈利来维持。
那么作为用户，为开源软件提供赞助，是颇为不错的一个选择。我们知道，现在开源软件是主流，具黑鸭子的调查，企业有超过60%的在使用开源软件，那么在使用的过程中，难免会出现现有的无法满足需求的时候，那么这个时候为那些开发公司提供付费，这样不仅能够让用户得到满足需求的功能，而且也让开源软件公司利用其在应用程序方面的专业知识来开发和销售能够满足最终用户需求的服务或产品。这就是双赢的局面：让软件更趋完善，也能够持久的发展。
举例来说，想象一个企业正在使用一种专有软件，只是因为它具有开源平台所缺乏的功能。如果他们为此应用程序付一年的维护合同费用，就会大大的节省成本，而且更进一步，如果他们和软件开发公司所签约，使得新开发的功能添加到已有的开源平台，将会大大减少自己使用各种工具的数量。
为什么说赞助开源开发是有意义的 我们都有使用非开源软件的经验，他们的开发治理是叫做主服务协议（MSA）的，通常会使用诸如下面这样的语言：
 &amp;ldquo;Consultant hereby assigns to Company all right, title, and interest in and to any work product created by Consultant, to which Consultant contributes, or which relates in any way to Company Property pursuant to this MSA (&amp;lsquo;Work Product&amp;rsquo;), including all Intellectual Property Rights therein and thereto. Consultant retains no rights in the Work Product and agrees not to challenge the validity of Company&amp;rsquo;s ownership in the Work Product.</description>
    </item>
    
    <item>
      <title>扩张社区贡献者的几种办法</title>
      <link>http://www.ocselected.org/posts/community_management/expand_project_contributor/</link>
      <pubDate>Mon, 18 Dec 2017 21:55:30 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/expand_project_contributor/</guid>
      <description>引子 很多的自由和开源软件项目起初是为了解决某一问题，随后，人们开始了陆陆续续的贡献，但多数原因是因为他们只是解决了所遇到的问题，最终用户发现此开源项目对于他们来说是有用处的，那么这时项目就会成长，有了解决实际的问题这一共同的目标和焦点，吸引着人们参与到项目的社区中来。
任何事物都有其本来的生命周期，社区的增长不仅预示着项目的可行性，也是标志。那么问题来了，作为项目的领导者和维护者给如何鼓励贡献者基数的增长了呢？以下是常见5个方法。
一、提供绝佳的文档 项目文档是人们最容易低估，但是却又是最为重要的部分。要知道，文档对于项目的潜在贡献者是最为主要的信息来源，也是鼓励贡献者们的思想领地。
请确保文档的信息是准确的，而且也是及时跟进的。一般应包括但不限于：构建项目的详细步骤、如何提交补丁、编码风格等等。
请参考文章：打造世界级文档的7条规则，出自资深的技术作家和编辑——Bob Reselman之手。
对于开发者文档，有一个非常值得参考的例子，那就是Python 开发者文档，其清晰的阐述了Python 开发的各个方面，拥有清晰而简洁的步骤指南。
二、提供容易上手的入口 如果你的项目有 issue 或 bug 跟踪系统的话，要能够确保标记一些初学者的任务，如&amp;rdquo;简单问题&amp;rdquo;、“起点”之类的，通过解决这些问题，新的贡献者可以轻松地加入进来。跟踪系统也要标记那些非编程的任务，如图形设计、图形和文档改进等。有很多的项目成员并非整天都是在撰写代码，但是通过非代码方式的贡献，也是不可或缺的部分！
这方面做的好的例子有：Fedora 项目，他们维护了一个专门针对简单的问题或入门级的入口。
三、定期为补丁提供反馈 要对每一个补丁都认真对待，哪怕它是一个只有一行代码的补丁，而且要为作者反馈，提供反馈能够有助于吸引潜在的贡献者，并引导他们熟悉项目。所有的开源项目都应该有邮件列表和聊天工具来进行日常的沟通。一些问答可以到社交媒体上来传播。没有那个项目能够一举成名，只有长期的保持友好，公开、透明的态度，保持良好的沟通渠道，才是项目成长的基本条件。
四、对项目进行推广 一个开源项目的创建往往是为了解决某一类问题，而这实际上也是很多人自身在开发中会遇到且有用的。作为项目的主要贡献者，你的责任是为你的项目撰写文档并进行积极的推广。撰写博客、在社交媒体上报告项目的进度。你要为项目的贡献者写一份简短的上手指南，并且在该文档中要提供给主要开发者文档的参考。另外，也要记得提供项目的 RoadMap 和未来版本的信息。
关于此项可以参考 opensource.com 的社区经理——Rikki Endsley 写给读者的写作技巧。
五、要有欢迎的姿态 友好的语气和及时的答复会增加人们对项目的兴趣。在项目启动的时候，有些问题只是为了提供帮助，但是未来这些新的贡献者也会提出自己的意见和建议。从而让他们感到收到鼓励，获得信心，进而成为项目的贡献者。
请记住，你做的事情，人们是有着自己的判断的。那些默默的“潜水者”会观察开发者是如何在邮件列表和聊天室里进行彼此交谈的。而这些所有的内容都会表明该社区是如何对待新人的，是否具有欢迎和开放的态度。当我们沉浸在技术当中是，往往会忽略人的最为基本的初次接触的情感互动，但是这恰恰对于任何项目的生态系统都非常的重要。
我们可以想象一下：有一个非常好的项目，技术很优秀，解决问题的方式也很优雅，但是其维护者有一个臭脾气，对人并不友好，尽管他自己没有意识到，那么有可能很多人就会因为他而远离项目。若此项目已经拥有了一定的用户群体，那么项目就面临分支，他们会另外的开启一个项目，从而抛弃这种不受欢迎的场景。在开源的世界中，类似的例子不胜枚举。
另外，为了在开源项目上持续发展和交流想法，社区要有包容性，能够容纳来自不同背景的人们，让他们彼此为了共同的目标而进行协作。
最终，作为项目的所有者，要对项目的持续发展和成长负有一定的责任的，指导新的贡献者对于这个项目是必不可少的内容，他们或许将来能够成为项目乃至社区的领导者。
请进一步阅读由红帽内容战略专家 Nicole Engard 所写的：让贡献者倍感亲切的7种“武器”。
关于原作者 Kushal Das 是 CPython 的核心开发者，也是 Python 软件基金会的董事。一直以来，他都是 FOSS 的积极贡献者，并作为导师帮助新人走进贡献者的世界。他目前在红帽是 Fedora 云计算工程师，他的博客是:https://kushaldas.in/，他的Twitter账号是：@kushaldas
本文由作者Kushal Das 发表在Opensource.com上：5 ways to expand your project&amp;rsquo;s contributor base。本文在Creative Commons BY-SA 4.0许可证下发布。由开源之道精心编译，欢迎转载！</description>
    </item>
    
    <item>
      <title>如何解决创建全球社区的挑战</title>
      <link>http://www.ocselected.org/posts/community_management/working_worldwide_communities/</link>
      <pubDate>Fri, 15 Dec 2017 22:45:32 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_management/working_worldwide_communities/</guid>
      <description>引子 随着互联网技术的发展，如今的社区成员是来自世界各个地方，在建立在线社区时，会遇到什么样的挑战？我们又该如何解决这些挑战？
人们为开源社区做贡献，某种程度上说，是为实现帮助开发软件的承诺。在过去，人们通过在约定好的时间和地点会面，或者是使用写信的方式，或者是打电话。在今天，技术的发展已经让在线社区无处不在了，人们可以很轻松的随意的进行视频沟通，并开始一起工作。举个例子来说，你如果在跨过公司工作过的话，在早上可能是和摩洛哥的人在协作，到晚上又在和夏威夷的沟通，这些都是稀松平常之事。
全球社区：三大挑战 任何在群体中工作过的人，都能明白当拥有不同意见的时候，是最为棘手的。在线上的社区，则更是增加了新的难度，比如语言障碍、不同时区以及文化差异等。
语言障碍 英语在开源社区仍然是主要的语言，所以说想在开源社区成长，没有一定的英文水平，就会在阅读文档和沟通方面遇到困难，要解决这个问题就得从吸收成员做起，首先要邀请一些具备双语能力的人的加盟，向周围的人打听一下，总是有人精通多门语言的，那些懂得多门语言的人，可以通过帮助他人在语言上的障碍，进而让这些人们能够为社区做出贡献，而且还能够通过翻译项目和文档进而与更加广泛的人们交流。
程序员们会使用各种不同的程序语言，你或许最拿手的语言是 Bash，但是，其他人会选择诸如 Python、Ruby、C 等等。这也意味着，由于编程语言的原因，人们可能会发现很难为你的代码库做出贡献，一般来说，项目负责人选择一种被软件社区采用的语言是非常重要的。加入你选择了非常小众的编程语言，那么也就意味着能够参与的人将会很少。
不同时区 时区也是一种为开源社区带来挑战的形式，举个常见的例子，加入你住在旧金山，想要与在伦敦的小伙伴作一次视频通话，那么你就不得不调整8个小时的时差。那么这也就意味着，你需要根据合作伙伴的所在时区，要么早、要么晚的去工作。
还有一种形式，就是现实中的冲刺活动，如果你的团队是在一个时区下工作的话，这根本就不是什么大问题，但是社区则很少能做如此的选择。只能去定期举行虚拟会议来讨论项目，并建立一个定期的时间和地点，让每个人都可以讨论悬而未决的问题、即将发布的版本以及其他主题。
但不同时区也有另外的好处，因为团队的成员是全天候都可以工作的，如果你有 IRC 等实时通信的话，就可以在白天或晚上的任何时间找人回答他们的问题。
文化差异 文化的差异可能是开源社区中遇到的最大的挑战，人们来自世界各地，拥有不同的思考方式，不同的计划方法，以及不同的解决问题的思路。政治情况也会对工作环境产生影响，甚至会影响到决策。
作为项目的领导者，我们应该努力从不同的角度去创建出宽容的环境。文化差异可以鼓励社区之间的讨论。建设性的讨论总是对项目有好处，因为它们可以帮助社区成员针对同一主题可以有多种不同的视角，不同的意见也有助于改善最终的问题解决。
要想让开源成功，你的团队必须去学习拥抱不同。这并不是一件容易的事情，相反会很难，因为改变思路是最难的。但是实践证明，多样性是有利于社区的，你的改变绝对是值得的。
一些增强社区的方法 深入当地：在线社区成员可能会发现附近的贡献者 —— 能够相识见面，并成立本地的社区，两人成从，三人成众，人数不在多，只要项目有意义。也要去邀请一些当地公司的用户或老板，或许他们可以为聚会提供场地。
寻找或举办线下活动： 举办线下活动是非常有意义的，它是建立本地社区的一种划算的方式，在当地的咖啡店或酒吧聚会，庆祝最新版本的发布或核心功能的实施。你举办的活动越多，有更多的人会加入你（即使只是出于好奇）。你也可以考虑，让一家商业公司为活动提供场地，或者是自行来筹集一些款项来维持或活动的日常开支。
保持联系：在每次活动之后，要与参会的人们保持联系，收集电子邮件地址或者其它的联系方式，邀请他们加入某些聊天群，邀请他们去为更多的社区做贡献，你可能会发掘出更多的本地的人才，而且谁也无法预测——说不定会挖掘出下一代的核心开发者。
分享你的经验：你所在的本地社区是非常有价值的，不仅仅是对于你自己来说，这是泛指范围更大的社区有益，将你的发现和经验分享给大家，或许对他们是有用处的，如果您确定如何开始筹划活动或聚会，请向他人询问他们的见解。有机会能够向拥有更多经验的人请教，可以让人们更加快速的走上正轨。
考虑文化差异：请记住，文化规范因地点和人口而异，所以在清晨安排一个特定的活动可能适合某些地方的人们，但是未必适合其他地方的人。当然，你可以 - 也应该 - 使用更广泛的社区的参考，以便更好地去理解这种差异，但有时甚至你需要通过反复试验来进行试错。不要忘记分享你学到的东西，以便别人可以从你的经验中受益。
收敛下个人的意见：避免在工作环境中传达强烈的意见（特别是关于政治）。因为这只会阻碍开放沟通，对解决问题也是无济于事。而应重点与团队成员进行建设性的讨论。如果你发现自己有一个激烈的争论，退后一步，冷静下来，把讨论的重点放在更积极的方向上。讨论应始终是建设性的，不同的观点应该有利于你的社区。切勿将你个人的观点置于社区更大的利益之前。
尝试去做异步沟通：如今的时代，尽管实时聊天已经司空见惯，但是仍然不要忘记电子邮件的好。如果你在在线聊天室（微信群）找不到某个人，就要尝试发电子邮件给他。或许，你还能得到一个快速的回复。也可以考虑使用一些新近发展起来的异步通信平台，如Twist，但是仍然不要去周期性的检查自己的邮箱，以及到论坛和维基上查看是否有新的内容。
尝试不同的解决办法：这个世界上是没有一把万能钥匙的，最为有效的学习方式往往是通过实践经验，不断试错反馈中得来的。反复的试验可以教会我们很多。不要害怕和担心失败，要学会从失败中总结，你要做到不断从失败中改进。
社区需要精心培育 将社区想象为一株刚刚发芽的植物，要想让它生长和开花结果，你就得每天为它浇水，确保能够吸收足够的阳光和二氧化碳。相应的，经营社区也是同样的道理：倾听来自贡献者的声音，还要时刻记得，你打交道的是人类，需要不断的沟通才能起的一定的效果。如果你的社区失去了人情味，人们将停止对此作出贡献。
最后，请记住每个社区都是独特的，所有没有什么全能的、统一的解决方法能够解决所有问题。要去坚持不懈的努力、持续的学习、并积极的采纳社区成员的意见。用心就好，静待结果。
关于原作者 José Antonio Rey 是一名参与Ubuntu 社区已经有7年的资深成员，他是图书《Ubuntu官方指南》第8版和第9版的合著者，他也是 UbuCon 拉丁美洲的前任当地社区委员会成员和活动组织者，目前来说还是一名在读学生，主要在Juju的团队工作，希望能够通过Juju给大家带来精彩。
本文由作者José Antonio Rey 发表在Opensource.com上：Overcoming challenges when building great global communities。本文在Creative Commons BY-SA 4.0许可证下发布。由开源之道精心编译，欢迎转载！</description>
    </item>
    
  </channel>
</rss>