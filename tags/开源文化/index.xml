<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源文化 on 开源之道</title>
    <link>http://www.ocselected.org/tags/%E5%BC%80%E6%BA%90%E6%96%87%E5%8C%96/</link>
    <description>Recent content in 开源文化 on 开源之道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2019, 适兕; all rights reserved.</copyright>
    <lastBuildDate>Fri, 06 Dec 2019 11:00:01 +0800</lastBuildDate>
    
	<atom:link href="http://www.ocselected.org/tags/%E5%BC%80%E6%BA%90%E6%96%87%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>打造归属感的共同体</title>
      <link>http://www.ocselected.org/posts/community_leadership_development/the-art-of-community-building-belonging/</link>
      <pubDate>Fri, 06 Dec 2019 11:00:01 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/community_leadership_development/the-art-of-community-building-belonging/</guid>
      <description>**“Great things are not done by impulse, but by a series of small things brought together.” **
​ — Vincent Van Gogh
 开源之道按 适兕在年底的时候，也会和大多数人一样，总结一下过去的一年得失，然后寄希望于接下来的一年。那么当开源大行其道的时候，似乎一下子全民开源起来了，开源之道能做点什么了呢？不如直击核心: 共同体！
开篇致敬Jono Bacon 的著作，加上开源之道的重译。希望在接下来的一年探索中能有所收获，当然也是对自己研究开源的一次收敛，博大精深之余，须对宏大理论有所提防。务实一点没有什么不好。
共同体的艺术 (本文节选自《The Art of Community》一书，原书作者以第一人称进行撰写，下文同。本文的翻译也大量的借鉴了该书的简体中文版《社区运营的艺术》。)
手表滴滴答答地走过了下午6点，我知道有麻烦了。首先，我迟到了，可并非当下很时髦的那种迟到。事实上，那时候的我，是如此的老土，足以令人目瞪口呆。长头发，身穿印着铁娘子的T恤，宽松的迷彩裤，再加上一件庞大臃肿的皮夹克。我离开父母家，坐进我那辆小货车，上面装饰着夸张的喇叭和树形的空气净化器，小货车缓慢前进了。
“缓慢前进”是乐观的说法。事实上，我陷入到车流中，英格兰南部几科一半的车都汇集到一起，一辆接一辆，这些却引起了我的好奇心，在这个寒冷的英格兰冬日里，是迈克尔·道格拉斯的那部电影有可能真的成为现实？
这并没有舒缓我的紧张。作为一个相当外向而焦虑的年轻人，紧张通常不是我的菜，但今晚，我有点吃定它们了。
今晚是不同的。今晚我要做一些不寻常的事情，它们看起来像个好主意 。。。。我沿着机动车道，开了不到30分钟，乐声轰鸣，由于设备良好，我的“Number of Beast&amp;rdquo;盒式录音带，展现出貌似高保真的音乐效果。
值得庆幸的是，这世上最长的机械长龙空出了一个缺口。在意识到这点之前，我发觉自已到了一个从未来过的城市，站在一条从未来过的街道上，将要步入一间满是陌生命的房间，这些都是由一个简单的符号关联起来的&amp;mdash;&amp;mdash;一只企鹅。
一个小时前，那只企鹅看起来是如此的友善好客。它是一个标志，囊括了它所代表的所有活动，这些活动将我们从精神到心录聚集在一起，建立起一个系统，来驱动新一代的技术和自由；在陌生的街区 、陌生的城市，陌生的人们组成用户小组，来庆祝这个驱动力。可当我站在那儿，已经按下门铃时，我还未清晰地意识到这些；相反，在走进那个我既想进去又不想进去的地方时，乔纳森·E·J·培根的大脑正在未雨绸缪，预备迎接最终的无可比拟的不适感。
然后，门开了，一个非常和善，叫作尼尔的小伙子欢迎我来到他家。
共同体是一个有趣的怪兽。大多数人&amp;mdash;&amp;ndash;他们在电视上观看达人秀，偶尔去昂贵的餐馆里奢侈一顿&amp;mdash;&amp;ndash;不大理解像尼尔这样的人。到底是什么让这个家伙打开家门，免费招待从网上认识的一群陌生人？他为什么要花一个晚上的进间来喝茶，对着某个叫 “emacs” 的东西开玩笑？他为什么要自掏腰包去资助那些网上资源，比如宣传单/邮件列表和网站？他为什么要为小组成员提供图书借阅服务，甚至提供茶和饼干？
尼尔的妻子就是实在无法理解这些的人之一。她有些困惑，把我们称作他的“网友”。今晚，尼尔的另外一个重要决定是，要拜访一个久违的（或者可能是忽视的）朋友，而不是假坟对你有兴趣总围着你转的人。
协作驱动的伦理 但是尼尔是位普通人。至少，在开源、自由软件、自由文化的世界里，他是一位普通人。在世界上有很多类似尼尔这样的人，他们成立小组、建立邮件列表、筹划会议、偶尔找个地方聚聚，讨论些诸如志趣相投、习俗、思维习惯之类的理念。
在过去的10~15年间，我们看到了许多技术和艺术上的自由文化，这些内容对于人们的思想意识是颠覆性的震撼。整个“共同体”都是类似尼尔这样的人驱动的，他们自愿投入到“共同体”这一社会实体，而且是相当紧密的团结在一起的。
在自由文化世界之外，也有许多这样的&amp;rdquo;尼尔&amp;rdquo;，他们是那些帮助贫穷不幸的人们的教会组织；他们是在共同体所举办的“邻里守望和上门送餐”项目中，向周围人伸出双手的那些人；在公共基础设施、工艺品展销会上，也有他们的身影。他们是志愿者、践行者、热心的分享者，从事的职业有健身教练、编织达人、瑜伽、空手道选手&amp;hellip;&amp;hellip;
当我第一次走进尼尔的客厅，最令我着迷的是：协作驱动伦理，当时的我还是一脸懵逼，但是那天晚上的经历教给我和启发我的也很激动，那就是和一群秉持共同理念，以完全志愿的方式，为理念而奋斗，这种兴奋是多么的可遇而不可求。
在我的世界里，这个伦理远远超过了自由文化、自由软件、数字版权以及打破数字鸿沟，因为该伦理可以很高尚，如倡导世界和平；也可以很普通，如在互联网上分享小猫玩吉他的照片。共同体的重要性不在于某个活动的形式，而在于如何去团结人们，使他们和携手并进。
从本质上讲，《共同体的艺术》是经过仔细筛选关于如何创建共同体的一系列方法和心得。这本书是我从自己的职业生涯以及个人经历所提炼的经验、观察和思考的集合。我的目标是，将我脑中的意念、意象，转化成有实际意义的文字符号。
然而，作为读者，你需要从更为广义的角度来看待这本书，尤其是打算成为共同体的领导者和组织者的话。当然，你要切实的消化书里的内容，然后根据自己的实际情况而形成自己的观点。一定要记住，实践才是王道，理论只是向导指南。
共同体基本上说是一门软科学。如果和编程做对比的话，不确定性更多，但是路径的选择和多样性恰是其魅力所在。
共同体的本质 2004年2月26日，我和三个朋友共同发起了 “LugRadio”的音频节目，请读者周知，本书中会沿用大量关于“LugRadio”的故事，作为一个播客，“LugRadio” 是一个关于开源、自由文化，而且是较为有趣、轻松的。我们都是首次做播客，所以一切都是新奇的。
“LugRadio” 产生的地方，我们称之为“工作室”，其实就是一个堆满二手录音设备的卧室，我们四个人，外加四个摇摇晃晃的麦克风，就这么开始了，第一集我们聊了大约有半个小时，其中有一些冷笑话，还有一些书评之类的，没有任何的后期制作。在当年，这样的播客对于大家来说还是新奇的，然而，颇让我们意外的是，四年之后，当我们决定要关闭这个播客的时候，它的下载量已经超过了200万次了，这点，我们还是颇为自豪的。
“LugRadio” 播出以后，我们几个做了一些开源圈里大家日常都在做的事情，诸如建立论坛、维基、IRC 频道等，这样做的目的就是希望能够通过各式各样的渠道，让大家能够聚集起来。嗯，就允许我先来聊聊第一个上线的论坛。
论坛上线之后，陆陆续续的有人加入进来，其中第22个成员就是一个较为典型的例子，他真人叫做 Ben Thorp，网络 ID 叫 mrben，是一位生活在苏格兰的英国人。是一位对开源颇为热心的爱好者，不经意的访问了“LugRadio” 论坛，然后觉得挺合口味，然后就在论坛活跃了四年，在这期间 mrben 几乎每天都在论坛里泡着，统计下来，共发布了超过3000个帖子，当然也是IRC频道、维基页面的活跃贡献者，甚至还为节目专门制作了镜像下载站点，mrben 可以算是“LugRadio”的忠实粉丝了，他一直都活跃在论坛里，伴随着“LugRadio”走过始终。</description>
    </item>
    
    <item>
      <title>从科学的开放精神来看开源</title>
      <link>http://www.ocselected.org/posts/opensource_culture/open-science-means-open-source-or-least-it-should/</link>
      <pubDate>Tue, 26 Nov 2019 22:38:20 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/open-science-means-open-source-or-least-it-should/</guid>
      <description>引言 开源想要在现实社会中彻底的站稳脚跟，可能除了现在技术上的成绩和经济上的奇迹，还要从更为宽泛的伟大出发，例如和科学的关系。本期文章，我们就译自 Glyn Moody 的大作，看看 Glyn 是如何为开源提升更高的使命和意识的，而不用牵带更多的强迫和激进。
为何说开源其实发生在1665年 各位知识渊博的看官，你认为开源是从什么开始的？是1998年2月份Christine Peterson所定义的吗？还是 Richard Stallman 在1989年所描绘的 GNU GPL 下的 &amp;ldquo;subroutinized&amp;rdquo;？亦或者是更早些时候的1985年，Richard Stallman 所创建的GNU Emacs 许可证？还是1665年3月6日这天所发生的如下声明了呢？
 鉴于促进哲学问题的发展，没有什么比促进传播哲学更为必要的了，即通过他人的发现或实践来应用哲学研究和努力。因为我们以为需要做一些媒介的工作，从而作为满足那些从事此类研究的人们的最合适的方法，进而对于学习和获得进步会感到由衷的高兴，并使得他们充分的了解英国、这个世界，这同样也需要坚持不懈的去研究、劳作、保持好奇的尝试、并享受其中所学到知识，作为最终的发现和表现：最终，这样的作品必须清晰、真实地传达出来，并经得起推敲，作为有用的知识，人们便会进一步的进行探究，精益求精、孜孜不倦、进而授业解惑、激励他人，持续的为改进自然知识，完善所有哲学艺术和科学的宏伟设计做出贡献。
 上面这段文字节选自1665年的《哲学交流（Philosophical Transactions）》创刊号，该杂志是我们世界上存在的最为古老的杂志，历史很多重要的成果都是在该杂志上发表的，如牛顿、史蒂夫.霍金、约翰·赫歇尔爵士等等。值得大题特提的是，该杂志同样确立了我们今天视为理所当然的关键科学原则，其中就包括：常规的技术和成果的分享，以让其他人可以基于其基础进行发展，这不就是我们所熟悉的开源吗？
关于开放科学 尽管科学精神倡导和发明了我们所称之为开源的方法，但是颇具吊诡的是，科学共同体们目前正在试图重新发现开放性，而他们称之为开放科学（open science）。随着历史的进步，人们渐渐意识到那些传统的、模拟（analog）的科学方法正在经历不小的变化，即数字化技术，它将对科学发展带来根本性的变革。
开放科学的革命来自于一场称之为：开放访问，即学术文献应该以电子文档的形式让所有人可访问。这一想法无疑是延用了皇家学会的《哲学交流》的原则 ———— 所有想关的发现应予以公开发布和发表 ———— 通过让所有人都可以自由访问，从而让其能够获得更高的发展。开放访问非常清晰的说明了模拟（analog）和数字之间的差异。那些在皇家学会《哲学交流》印刷版无法抵达的地方，可以通过互联网提供的在线链接，也可以同样访问得到并自由访问所发布的每篇文章。
开放科学还有另外一个非常重要的方面：开放数据。在互联网出现之前，处理数据是一个繁琐且耗时的过程。一旦进行了数字化，即使是容量最大的数据库也可以非常快速地进行传输、组合、比较和分析。对于科学而言，这是变革性的，因为从原理上讲，这意味着其他研究人员可以通过下载完整的数据集并进行自己独立的分析和评估来检查实验结果。同样重要的是，他们可以进行新的分析以获得超出最初发现的结果。用于挖掘数据以获取新信息并将其与其他数据集结合的工具和技术的发展，这就决定了开放数据的思想和实践的传播远远超出了科学领域。
谈完了开放访问和开放数据，接下来我们就聊聊开放科学的第三个重要属性:开放源码。过去几十年来，科学领域最重要的发展之一就是使用数字工具来进行研究。在这过程中使用到的软件可能是收集、分析或存储数据的软件，但是无论使用什么软件，软件对于现代科学都是必不可少的。但是所存在的问题是，很多的代码都是为某个科学研究专门定制而写的，尽管他们在各自的领域都耗费了极大的精力，但是他们的这些成果却很少和其他科学家进行分享。
颇为混乱的科学界 事实上，即使是开放科学是如此的势头迅猛，但是由于没有开放源码的存在，它还是步履维艰。举例来说，在2016年，欧盟理事会发表了一项重要的政策：&amp;ldquo;向开放科学系统的过渡声明&amp;rdquo;，其中并未提及开放源代码。2017年的欧洲开放科学云宣言亦没有提及，同样，在2018年欧盟和美国共同推进开放科学研讨也忽略了开源。2019年早些时候，美国国家科学，工程与医学研究院出版了题为：加快开放科学进展的新框架，值得庆幸的是，该框架肯定了开源所取得的成绩，提及次数不下20次，然后最后还是颇为遗憾是：其最终建议不包括将开放源代码作为开放科学的一部分进行推广。
在欧洲，一项重大的新计划（已引起科学界的关注）也对开源保持沉默。在欧盟委员会和欧洲研究理事会的支持下，11个国家研究资助机构最近宣布了名为 cOAlition S的 S 计划的启动。这是“使对研究出版物的全面，直接开放获取成为现实的倡议”。通过使用高质量的自由软件应用程序，开源可以在这里扮演重要的角色，这些应用程序使发布比当前的方法更容易，更便宜。但是，该倡议却仅仅只是说：“由于长期的存档功能和编辑创新的重要性，开放式档案和存储库对于托管研究成果的重要性是显而易见的。” 这也就是说，仅仅是开放存档，而不是开源存档。幸运的是，有影响力的人物正在呼吁对此进行认真的监督。被大家公认的开放访问的领导者Peter Suber 发表了对S 计划的声明：
 该计划承诺道：“在必要的时候会提供开放访问的基础设施”， 这个承诺看起来非常的不错，但是该计划没有提及开放基础设施的重要性，本应有运行在开放源代码软件的平台、基于开放的标准、用于互操作性的开放API、最好由非营利组织来进行营运。
 综上所述，我们可以看到政府机构和顶级科学组织对与开源合作以促进开放科学并没有多大的兴趣，这是颇为让人掉下巴的事情，也是不能被接收的，因为他们这些研究人员所编写的代码本身就是由公众所资助的，因此，需要有一个令人信服的案例，即所有此类软件都必须在开放源代码许可下发布，以允许任何人（包括为其缴税的人）自由地使用它们。
面对这些大型机构的冷漠的态度，一些没有多少耐心的民众开始有点坐不住了，于是，开始利用有限的资源来做点什么，有的还颇有起色。例如，OPERAS这家欧洲的研发机构，已经发布了一份白皮书，探讨了有哪些开源解决方案可以用于创建开放式科学学术交流基础设施；无独有偶，Lettie Y. Conrad 最近发布为民众提供用于开放科学的开放工具。
 就本项目而言，我们专注于非营利组织或基于共同体的组织使用开源软件提供的工具，提供开放数据、并通过开放许可，尽可能的利用开放标准 —— 总而言之，尽可能的保持开放，无论是从人性的角度，还是技术的视角。
 Conrad 在一个研讨会上介绍了她的工作，该研讨会是为开放科学工具制定联合路线图的。令人非常惊讶的是，研讨会的参与者，唯一的涉及到的开源品牌是 Mozilla，不过这也充分的说明，该项目其实应在使用开源软件当中是失败的了，也就是说类似的开源项目未能在这个重要领域活跃起来。
结语 这真是一件让人感到无地自容的尴尬境地，400年过去了，我们离当初皇家学会《哲学交流》的创始人想要的还有很长的举例。
然而，值得庆幸的是，开放科学为自由的编码人员提供了巨大的机会，进而让他们能够应对新的挑战并创建一些更具创新性的作品，除了状态开源共同体（community）及其项目之外，此举同样可以有助于加入开放科学的革命。这一点无疑是所有人都认可的。
开源之道评论 在软件被以信息的方式商品化了以后，身处盗版中心的中国，经历了大跃进破灭的中国，对于道德和公共的善是唯恐避之而不及，谈一点实际的，那就是一切市场化，自由软件、开放源代码即使有着和改革开放相同的年龄，但是国人还并没有从伤痕中恢复过来，年轻人被上一代人的过度保护，也并不相信存在市场之外的社会价值。但是开源的核心价值，仍然是人类共享知识，再怎么市场化，也难以动摇这份先进的文明。所以，要去相信科学的力量，那么开源的力量就紧跟其后。</description>
    </item>
    
    <item>
      <title>不一定非得同步做决策：远程团队成功的秘诀</title>
      <link>http://www.ocselected.org/posts/opensource_culture/asynchronous-decision-making/</link>
      <pubDate>Tue, 13 Aug 2019 17:17:57 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/asynchronous-decision-making/</guid>
      <description>概要 减少会议数量，还能增加沟通质量不再是纸上谈兵了，本文为你呈现采用异步方式来进行决策，可以达到想要的效果。
异步决策某种程度上已是一种常见的决策策略了，尤其是对于那些是来自全球各地、分布式的软件团队，异步决策对于这种类型的团队尤其关键。在接下来的叙述中，笔者试图讨论和解释异步决策如何成为远程团队的工具，以及一些有用的原则。
相信大家都非常熟悉同步决策，显而易见的优点就是参与的人能够进行实时的互动。《黑客与画家》一书的作者Paul Grapam写过一篇博客：创客的时刻表，当我们去打断这些创客们正在做的事情的时候，代价是相当昂贵的，当然，对于远程工作的团队来讲，做同步决策是几乎不可能的，相信有过类似经历的人，一定能够意识到想要实现同步会议的痛苦，各种等待、浪费时间、低效、不断确认等等。
与此相反的是，我们得接受现实，使用异步决策来进行沟通，这也是很多大型开放源代码项目中所经常采用的策略，举个经典的例子，在Apache软件基金会（ASF，以下均会这么称），也是笔者活动最为频繁的地方，总是尽可能的减少会议，且团队保持一种有效的方式进行推进，Apache 软件基金会旗下的项目，许多都是每年只召开几次会议（甚至干脆根本就没有会议），但开发团队却能够始终如一地生产高质量的开放源代码软件。
那么异步决策是如何工作的了呢？
必需的工具 中心化的异步沟通渠道 想要实现异步决策，首要解决的问题就是要拥有中心化的沟通渠道。无论采用何种实现，但有一些功能是必须的，如所有团队成员获得的是相同的信息，要支持线索式的讨论，相关的人在一个线索上讨论，同时忽略在同一频道上讨论的其他主题。不知道大家有没有熟悉海洋无线电，它的工作原理就是，最大范围的使用广播来引起特定人群的注意，想要进一步的讨论就要进入相应的子频道。
现在仍然有很多的开放源代码项目在使用邮件列表，来作为沟通的中心化渠道，当然，当下的年轻一代的软件开发人员可能会认为这种方法既陈旧又笨重。邮件列表确实需要一定的克制和纪律才能有效的管理繁忙的、具有较高流量的内容，尤其是涉及到比较有意思的条目，每个线索都要坚持一个主题，并要确保主题不会重复。虽然如此，但是目前为止，能够做到正确使用、且与索引存档相结合，邮件列表仍然是最完美的中心化的异步沟通渠道。
企业团队可能会受益于更现代化的协作工具，这些工具可以更易于使用并提供更强大的多媒体功能。无论使用哪种工具，关键是要创建一个通道，在这个通道中，大量人员可以在各种主题上高效且异步地进行沟通。根据实际观察，想要创建一个内容一致、高度参与的社区，一个繁忙的频道要好过于杂而多的频道。
共识构建机制 第二，其实不是一个工具了，而是一种精神上的内容，即达成共识，只有有了共识才能够避免出现僵局，进而推动事情往前发展。谁都以为在众多的人当中做出一致的决策是最理想的情况，当这往往是可望而不可及的，退而求其次，我们希望能够达成共识：“在有决定权的人们之间形成有效的广泛共识”。我们知道要求一致同意，或者是否决决策都会阻碍进程的发展，因此，在ASF，使用否决权的场景是被局限于某些情况下的。ASF 的投票机制经过多年而有效的发展，已经得到了世人的认可，也被人们经常所效仿使用，如果某些团队和ASF较类似的话，如并没有权力较为集中的老板，那么在这样松散耦合的团队中建立共识是非常有帮助的。当然，还有一种情形，那就是当共识没有自然出现时，也是非常有效的办法。
Case 管理系统 共识往往是在项目中心化的沟通渠道中所达成的，这一点我们在前面有所描述，但是对于很复杂的情形而言，可能需要一些第三方的工具来完成，这个工具就是：Case 管理系统，这样的话，大家在中心沟通渠道上用来进行非正式的讨论、头脑风暴诸项，当某些需要决策的内容渐渐浮出水面的时候，就可以引入 Case 管理系统了。
Case 管理系统能够更为准确的组织决策，当较小的团队，决策也相对较少的情况，是没有必要上这么一个系统。但是情况复杂起来的时候，将一些讨论特定决策的细节以及相关信息保存在特定的地方，对于团队是有非常大的帮助的。
其实 Case 管理系统并不一定非得是复杂的软件系统，ASF 使用的就是最简单的 issue 追踪，本来是用于基于 Web 界面的跟踪问题和Bug管理的，每个 Case 均在同一个页面中进行讨论和处理，其中也包含所有的评论，以及所有的操作记录。这么做非常使用追踪决策，以及如此决策所走过的所有路径。例如，一些非紧急或复杂的决策可能需要很长时间才能达成结束，将历史记录放在一个地方是有非常大的益处的。尤其是对于新加入的成员，他们可以通过阅读这些 issue 来了解最近做了那些决定，以及那些决定还在讨论当中，都有谁参与了这些决策，以及每个决策的背后的背景，从而让他们能够快速的融入团队。
成功案例 ASF 董事会有九名成员，他们会在每个月定期的电话会议上做出很多个决策，但是会议不会超过两个小时，之所以能够如此的高效，是因为我们在前期做了非常细致的工作，当然这些工作都是通过异步来做的。这样的好处就是能够让我们将会议的重点放在复杂或者不能确定的事情上，而不是聚焦在那些细枝末节的全部/部分的共识问题上。
其实类似的会议，在软件产业之外也是屡见不鲜的，如瑞士联邦的例行周会，他们的做法非常的类似于ASF。团队亦是采用异步决策的方式来建立共识，从而为会议做好充分的准备。会议议程由一组颜色编码的列表组成，这些列表指出哪些项目可以快速批准，哪些需要更多讨论，哪些项目预计会较为复杂。就是这样的方式，让仅有7个人组成的委员会，能够在每年处理超过5000多个决策，仔细算算，一年也就50多个星期，他们每周仅开几个小时的会而已。这是非常了不起的成绩。
依据我个人的经验，可以负责任的说，异步决策机制是值得投入的，工具是现成的，当然也要靠时间来进行验证。它也可以为团队成员带来快乐工作的益处，而这才是任何事情成功的关键所在。
关于作者 ，Bertrand Delacretaz 是瑞士巴塞尔 Adobe 研究团队的首席科学家。他倾注了大量时间来倡导和实施开放式开发，以此为他的同事提供更高效，更有趣的地理位置分散，且保持高效的团队。Bertrand 同时还是 Apache软件基金会的活跃成员，他在本文写作时（2017）担任ASF基金会董事，即9名成员之一。
本文由作者Bertrand Delacretaz 发表在Opensource.com上：Asynchronous decision-making: Helping remote teams succeed。本文在Creative Commons BY-SA 4.0许可证下发布。在开源之道精心编译。欢迎转载！</description>
    </item>
    
    <item>
      <title>为什么说企业采用开源的阻力来自工程师？</title>
      <link>http://www.ocselected.org/posts/opensource_culture/why_said_obstacle_adoption_oss_is_engineer/</link>
      <pubDate>Mon, 02 Jul 2018 09:13:17 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/why_said_obstacle_adoption_oss_is_engineer/</guid>
      <description>引子 LC3 又来北京了，Linus 也信守承诺，如约而至。去年我参会之后，写下了《开源软件正在吞噬世界————LinuxCon中国首秀感想录》 一文，学到了很多。今年，我就不再撰写什么见闻录了，而是以演讲者的身份做了一次分享。以下是根据我自己的演讲所整理而成。
正式开始之前 我们先来看一个日常的例子，这在北京这座超大城市里很常见。正如我给大家展示的这张照片一样，是我每天都会看到的一个场景。
这张图是我在每天上班经过的地方随手拍的，大量的非正常停放自行车，将人行道堵塞。据说这是新四大发明，但我宁愿称之为社会的照妖镜。我心里一直有个疑问，这些停车的人都是谁？是我身边的人吗？如果不是的话，那么共享单车的受用人群就不是公共交通的上班族，按照这个推论可知，让这些事情发生的就是身边的人。
为什么会产生这样的情况？它让我不由的想到了开源在本土的发展状况，我个人的职业经历让我了解开源、也是从开源中渐渐成长起来的，作为一名开源布道师，深刻感觉到那种不能进步的痛。于是将自己思考了很久的一个阶段性的观察分享给大家。
关于我 还是给大家介绍一下我本人，虽然本土关注开源方法论/文化方面的人很少，但是依旧是一个隐性的主题。网络唯一ID：适兕（kuosi），我给自己标榜为开源信徒，理由有三:
 开源花了20年的时间，证明了其强大的进化能力。 开源正在成为整个现代经济社会的基石。 未来的开源，不仅局限于软件，它会成为重要的创新方式和生产方式。  我也是开源之道的主要作者，开源之道是以撰写或翻译有关开源的方法论、文化、现象等内容的博客，也开了微信的公众号，大家可以搜索关注。
目前在一家云计算服务提供商：青云QingCloud 做产品经理。同时也是开源社执委会成员兼首席编辑，个人履历就不多讲了，拥有十多年开发和管理经验。
 申明： 本文以及演讲不代表任何青云的观点，仅代表个人。
 关于标题中“采用”的一点解释 使用： 可以套用一句话：“凡有水井处，兼用开源软件。” 开源已经无处不在了。不过，本次演讲谈到的是 采用，是指那些和开源社区形成良性互动，以供应链和生态系统的视角看待开源项目，将开源视为重要的合作伙伴，并提高到战略地位、在人才竞争、加速业务上市等形成优势的企业或个人。
陈述一些事实 任何事情都需要以对比的眼光来看，我所陈述的这些都有相应的对照，开源的成功已经是事实，如果非得要数据，大家不妨看看开源之道所撰写的一系列文章。
开源在本土发展的情况并不好，让我们不妨来数一数：基于Linux的商业发行版已经消亡、基于OpenStack的商业发行版正在转型、没有一家非盈利性的基金会、自身发起的开源项目占据整个市场非常的渺小、开源在大学简直是一片荒芜之地、卓越项目中的优秀华人工程师屈指可数，和从业人数完全不成比例&amp;hellip;&amp;hellip;.
以及到处都是搭便车（吃大亏）的公司，听众如果不行的话，可以找IT相关公司的JD即可。
几个维度来说明，工程师才是障碍 人类进入文明的标志之一，就是极少相信因果关系，而是倾向于相关性，开始明白影响事物的发展方向的因素有很多。而这就是科学的真谛，需要我们不断的努力，抽丝剥茧，找出最后的真相。我本人绝不敢说这次分享就是某些结论，而是个人的经历和观察，企业采用开源，个人拥抱开源，其中缘由有很多，选择的不同，导致路径不同，也就导致结果不同。
而我窃以为，其中最大的障碍来自于工程师本身。开源之道会谈到更多的内容，但归根结底仍然是人的问题。以下是我收集到的论据。
文化 文化上的内容，可以说的有很多，但是今天我这里不会提那么的多，但是偶尔的一、两条拿出来唠叨唠叨，大家应该会没有什么意见。
 崇尚权威，这一点很多人都论述过，如果你迷信权威，那么新技术几乎没有什么出头之日，而开源的发展，往往一开始就是和权威相冲突的，Linux和Minix、Apache和NCSA&amp;hellip;&amp;hellip;本土的文化和母亲教育，是和这一点非常有关的。 读书人窃书，不是偷。开源的前提是尊重知识产权，Copyright也好，CopyLeft也罢，要承认别人的劳动成果和付出。法律是一切的前提。而本土的环境视盗版为天经地义、理所当然。这也是一直以来难以将开源与免费讲清楚的重大障碍。 没有负反馈。也就是说这是一个追求表面和谐的糟粕文化，没有批评、没有反驳，叫好声一片。你几乎找不到哪里有批评的声音，这点在企业中也是非常的常见。 师夷长技以制夷。这是一句耽误了很多年的毒药，没有文化上的改变，技术本身不过是些皮毛罢了。 集体主义，你那个单位的？微信群要标注姓名+公司的。举办MeetUp以公司的名义进行筹划。  人性的弱点 利用开源项目，尤其是成熟的开源项目，非常的容易出结果，甚至短时间内就可以做出非常大的成绩，攻克一个从无到有的难关。然而这里名就会产生一些人性的不光彩的一面：
 虚荣， 每个人都希望成为大神，被同行认可，被尊重和敬重。开源的成绩，会让人产生一定的误区，就是被喜欢夸奖的老板热捧，这个时候就要非常的小心了。 自大， 当你解决了一个问题的时候，可能很快就会忘记自己是站在巨人的肩膀上，短时间的小成功，会遮蔽工程师的双眼，自视无所不能。 及时兑现， 人在无法看清未来会发生什么的情况下，会选择及时兑现当下的回报，哪怕是未来的承诺更多。这一点尤其发生在开源项目的贡献上，企业也是一样的。  工程上的短见 开源的项目，尤其是一些成功的开源项目，如Kernel、Apache等，均是经过多年，由来自全球数千人所开发，如果是按照金钱来衡量的话，如Kernel，是70多个亿美金。然后，很多企业或个人，就在没有融入的前提下，直接就开始做成下游项目，以“蚂蚁憾大象”的方式进行开发或定制。这是一种非常自大的行为。
另外就是没有做上游优先，将软件工程中开销最大的维护成本落在了自己的公司或团队的身上，随着时间的流逝，这个窟窿会越来越大。这也就是常见的“刻舟求剑”式的Fork，其实说刻舟求剑，很多人不愿意承认，因为没有人愿意承认自己是犯低级错误的。最为常见的理由就是，”上游的每个Release，我们都能及时的使用，虽然我们没有参与日常的讨论、补丁更新”，而这恰恰就是问题之所在。这里时间原因我就不多说什么了，就套用去年的图灵奖得主John L.Hennessy 和David A.Patterson 对技术的描述：
 尽管技术的进步是连续性的，但只有当技术积累到一定程度，为新功能的出现做好准备时，才会产生跳跃性的、不连续的影响。 ——《计算机体系结构量化研究方法》P14
 刻舟求剑式的放大自己，用静态的思维去看待开源项目的进展，而忽略时间和全球参与的力量。
缺乏认知和视野 在“人定胜天”的环境中，喜欢先定好时间，然后再来进行项目。而这往往也是开源在企业当中最大的阻力。因为是人为的规定了项目的周期，工程师会以项目的截止日期当做至高的目标，因为那是KPI的保证，只能提前，不能落后。落后的话，可能会影响到当年的年终奖。
于是，一场忘却上游的疯狂的“大跃进”工程如火如荼的开始了，更加夸张的是老板一般会搞搞仪式感，誓师大会、封闭开发、上山修行之类的。然后出来之后，就成了自主知识产权，跃居世界同行前列。</description>
    </item>
    
    <item>
      <title>为什么基于成功的开源项目的商业产品会失败？</title>
      <link>http://www.ocselected.org/posts/opensource_culture/why_product_failed_that_based_successful_open_source_project/</link>
      <pubDate>Thu, 10 May 2018 12:50:25 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/why_product_failed_that_based_successful_open_source_project/</guid>
      <description>导读 首先解释下题目，所谓的成功的开源项目，主要是已经被市场和技术所证明已经非常成功的社区主持下的项目，如Linux,Android,OpenStack,oVirt等等，另外一个特点，就是这些开源项目更加的倾向于基础设施软件，如操作系统、IaaS平台，虚拟化管理平台等。至于商业产品，就是基于上述开源项目，进行包装、二次开发，然后出售许可证等之类的商业产品，最后解释下失败，此处的失败不包括其商业模式或公司盈利等的失败，而仅仅指的是上述的商业产品在市场的存活时间，其内部开发的周期上的失败，换句话说，就是这个产品不再有未来，从此消失在历史的舞台。
这个题目，纯粹的是从个人的职业经历的角度上的一个总结，不是类似 Gartner，Forbes等技术、市场专家从宏观、调查的基础上去预测和评价的，所以并不具备普遍性。虽然我想着这是我可能是尽可能的惠及众人，但我仍然会阐述一些如何避免类似的悲剧发生的几点大的方向。
另外我会从以下几个要点来说明：
 我个人所经历的失败。 再失败的路上他们都在做什么？ 失败的几个症状有哪些？ 为什么会失败？ 如何避免这样的失败？ 安娜卡列尼娜定律  附录： Linux发行版，OpenStack发行版，BSD发行版之间的一些特征对比。
一、个人职业生涯中经历 我从事开发从07年算起，到今天已经7年多了，但是经历的产品却一点也不少，下面是一一的列举：
07-10 红旗Linux服务器企业版 CentOS 4 08-10 红旗高可用集群 Heatbeat + Pacemaker 10-11 普华IaaS云平台 CloudStack 11-12 云端时代x86终端Linux构建平台 OBS 11-13 云端时代云桌面 oVirt 13-15 易云捷迅 oVirt&amp;amp;&amp;amp;OpenStack
在上述的这些项目中，有的我只是一个普通成员参与的，有的则是以完全主导的身份参与的，无论什么的角色，最后都难以避免最终消失于市场，我个人的遭遇也不太好，因为意见的不一致，导致闹的不愉快的公司有两家。虽然最终时间证明了我的观点，但是又能怎样了呢？最后的我不得不逃离这些公司，尝试着去独立，另立门户。
二、在失败的路上他们都在做什么 每一家创业公司也好，或者是公司的内部开发新的市场成立事业部也罢，总是先要推出产品的，那么在开源世界大势所趋的时代，快速的开发一款产品，（这里不是指互联网公司开发的应用，而是基础设施软件，换句话说，就是企业或者互联网公司的应用背后所支撑的软件，如操作系统等。）并非是一件很困难的事情，时间也不是什么大的问题。
当然首先是选型了，选型的过程，一般是技术人员对一些功能类似的项目进行对比，然后出报告，最后是老板拍板，因为他要考虑市场和消费群体。靠谱的技术人员会按照下面的角度来考察一个开源项目：
 解决了什么问题。 项目的历史有多久。 发起人是谁？或者是哪个公司？ 代码的架构如何？ 使用什么样的编程语言？ 采用何种构建方式？ 社区的活跃度如何？ 背后有哪些商业公司在支撑？ 社区的生态系统是否完善？ 安装、配置的容易度是多少？ 项目是基于什么开源协议？ 文档是否齐全？ 成熟度如何？有哪些公司/企业在使用？  当你没有花费了3～5个月去做这件事情，有一些遗漏的时候，老板已经表现出非常的不耐心，这时技术人员会将残缺不全的报告递交给老板，然后，老板会利用他自己的圈子，四处打听，比如找一些在外企工作的，一个星期后，告诉你开始招人吧。（有没有觉得不对劲的地方？）
关于招聘，你只能按照上述5中的内容来进行JD描述，这是国内最为普遍的现象，如果你运气好的话，又恰好在社区中遇到了一些人，否则，只能将目标放在应届毕业生身上，如果你选择了外包公司或者是某个给银行或石油公司写应用的，那么你就留下了后患。
在招聘的同时，技术人员开始搭建开发环境、构建平台、测试，开始向公司申请服务器，这个时候，遇到的冲突可能有代码仓库和知识分享平台。老板会让你严格控制好代码，这个时候如果上游的仓库时使用git的话，那么你就要考虑gerrit了，并且需要招聘一个版本控制的管理者，如果上游的是SVN的话，那么你就得想好控制权限了。一般的项目都会有一个自己的甚至还有wiki、etherpad等平台，但是老板会要求加入全公司的微软sharepoint之类的系统，或者是办公自动化之类的系统，并会告诉你所有的东西都不可外流，知识产权归公司所有。
这样过了几个月，也招聘到了一些人，早期的这些人也开始对系统有所了解了，这个时候差不多，公司会招到一个产品经理，开始参与项目，开始向系统提一些需求了，然后，公司会要求开发经理第一版什么时候出，销售已经等不及了，让销售们干座着可不行。好！ 那么就开干吧。
从社区的某个分支正是的克隆下来，开始了产品化之路，要求有：
 界面要更改，不能和上游有任何的相似之处。 全部汉化。 增加xxx功能，这是我们客户明确要求的。 要测试，连续跑30个昼夜，要稳定。 2/3个月的时间够不够？晚餐和路费公司报销。  好吧，这个时候，开发人员的选择不多，产品经理也一样，产品经理这个时候已经开始物色文档人员了，要求是会office,英文可以，最好是有计算机背景。</description>
    </item>
    
    <item>
      <title>开源的成功理应是什么样子？</title>
      <link>http://www.ocselected.org/posts/opensource_culture/what_success_really_looks_like_in_open_source/</link>
      <pubDate>Tue, 27 Mar 2018 22:23:33 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/what_success_really_looks_like_in_open_source/</guid>
      <description>图片：适兕在云计算开源产业大会2018的演讲现场
引子 视角不一样，评价的尺度不一样，那么最终衡量一款开源软件或项目的成功与否，就会有完全不同的结果。现在，请你环顾四周，问周边的人们一句：“你理解的开源成功的标尺是什么？有哪些？” 能解决实际问题、用户多、有公司赚到钱了、名声足够响亮 &amp;hellip;&amp;hellip;不一而足。那么假如现在将你手头上的项目开源的话，你认为会成功吗？是不是应该去找出一些事项，开源的成功究竟有哪些关键的因素？
大教堂与集市 在开始讨论之前，我们先回顾一下 Raymond 在2001年发表的天才著作《大教堂与集市》，创新性的将传统的软件开发模式视为过时，而未来是属于开源的，即集市式的开发模式，并以Linux的开发方式为例，证明了其观点的正确性。其中Raymond令人信服的提出，通过集市化过程生产出来的系统产品，一般在技术上优于那些由大教堂式过程中生产的同样产品。
 首先，从进化的视角来看，市场会选择拥有最佳设计的模块。 其次，将一个新的模块同时放到数百个测试者那里，会更快的发现其中的缺陷，从而催生更加可靠的产品。 最后，缺陷被修复的更好，因为市场化的选择机制同样作用于缺陷的修复过程。  [综上所述][2]，集市过程是作为这样一个全新的模式出现：它同时作用于产品构建和协同的过程，团队成员通过电子化的手段彼此联络，天各一方、互不熟识。
回顾一下所谓的成功 成功的开源项目正在增多，虽然相对于失败的项目，成功占的比例还是很少，但是从更高处看待整个领域的话，开源至少已经在基础设施领域占据大壁江山。我们不妨按照领域来列举一下：
   领域 开源项目 备注     操作系统 Linux    容器 Docker    大数据 Hadoop    编程语言 Go、Python    Linux发行版 CentOS、Debian    版本控制系统 Git    持续集成 Jenkins    关系型数据库 MySQL、PostGreSQL    web服务 Apache    浏览器 FireFox    容器编排 Kubernetes    流的消息服务 Kafka     挂一漏万，以上列出的仅仅是非常成功的开源项目，限于篇幅，这里无法一一列出，在此表示歉意。</description>
    </item>
    
    <item>
      <title>开放的 Apache 究竟有多开放?</title>
      <link>http://www.ocselected.org/posts/opensource/apache_is_open/</link>
      <pubDate>Fri, 23 Feb 2018 14:40:53 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource/apache_is_open/</guid>
      <description>题记 笔者经常参加一些北京当地的一些线下聚会，或者是加入一些微信群，所谓的以某开源软件项目巧立名目的，诸如&amp;rdquo;linuxxx&amp;rdquo;&amp;ldquo;xxx中国”之类的，有一个现象特别的明显，那就是你必须自己是属于哪个公司，这家公司是干什么。我常常纳闷，为什么？于是找到些许的历史原因：
 倒退30年，一切都是国营的时代，没有单位就是 整个历史所表现的文化，都是以集体来呈现的，个人是微不足道的。  那么为什么Apache软件在本土却这么受欢迎，治理方式开放到极致，却无人问津。是怎么一回事了呢？
 Apache 软件基金会，是整个现代开源软件生态系统的基石——它支撑着当今互联网经济，为其提供最为广泛使用的和重要的软件解决方案。 —— Mark Driver, Research Vice President, Gartner
 Apache软件基金会对协作开发的承诺，长期以来一直是生产高质量软件的典范，且矢志不移的推动着开放式开发方法，被开源圈内成功的影响者们所赞誉。来自Apache 的软件项目几乎占据互联网的半壁江山、数百兆字节的数据是由Apache软件所驱动、执行着万亿次浮点运算的操作、并在几乎所有行业中存储数十亿个对象。Apache软件项目几乎是每个终端用户计算设备不可分割的组成部分，从笔记本电脑到平板再到手机，无处不在。
开放源代码 开放源代码相比闭源的企业软件，有如下独特的优势：
 低廉的费用 高质量的软件 免受供应商锁定和专有解决方案的束缚  开放式的开发方法 开放式的开发方法适用于各种规模的组织，让其可以从快速的开发速度的提高中受益，并通过以下方式获得业务上优势：
 减少重构应用程序的投资 活跃的社区支持 技术领先  开放的领导力  “Apache软件基金会已经为现代应用程序和基础设施软件以及它开发的开源协作流程设立了标准。” ————Matt Aslett, Research Director, 451 Research
 如今，Apache 软件基金会开发、管理和孵化着超过350个开源项目，之所有有如此的成就是因为通过其开发式的领导力、强大的社区、以及被称之为独特的“Apache之道”的精英式的管理流程。
 &amp;ldquo;扁平化&amp;rdquo;的组织：Apache 项目以及社区驱动开发方式 项目的开发和项目的领导完全由个人志愿者推动 提供组织，法律和财务支持  向全世界所有人开放 所有的Apache软件 —— 项目下载、文档、更新、补丁等—— 均可自由的下载和使用，没有任何的许可证费用或其它类型的费用。
 任何人，可用于任何目的 不受任何的安装或部署限制 在灵活的、商业友好的 Apache 许可证2.0 下发行  开放的参与方式 Apache项目所有的代码均有志愿者在没有任何报酬的情况下所完成，他们来自全球五湖四海，有超过6000多名独立个人或公司员工。Apache软件基金会的治理是社区的方式，以最直接的方式提供服务——人们之间的协作在项目内。还有被广为称颂的Apache精英制的流程，被众多个人和组织称之为最佳实践。
 贡献指的是代码、补丁、以及文档 贡献者经过检验，通过持续不断的贡献可以被提升为“提交者”，而提交者是可以直接写入/提交代码到代码仓库的，并有权利对社区的一些决策进行投票，并为提交者委员会提供活跃用户 对基金会的发展、演变和进步中表现优秀的提交者可能被现有成员提名为ASF成员  开放的社区 ASF社区开发帮助新手学习关于Apache项目、治理、活动，并为如何成为Apache精英的一份子提供向导式的帮助，以及了解Apache社区均是由志愿者个人组成。</description>
    </item>
    
    <item>
      <title>开放源代码定义之历史篇</title>
      <link>http://www.ocselected.org/posts/opensource_culture/the_open_source_definition_history/</link>
      <pubDate>Sun, 21 Jan 2018 21:28:50 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/the_open_source_definition_history/</guid>
      <description>引言 本文节选自《开源之声——开放源代码运动文集》一书中由著名开源领袖 Bruce Perens 所执笔的《开放源代码定义》一文，开源之道尝试以开放源代码原作者的视野，从而看看追溯开源的源头。这样对于人们理解起来或许有所帮助。尽管现在很多的技术都受益于这样一个思想，但大众是不会去想这些的。
 下面的第一人称我指的是 Bruce Perens 本人。
 开放源代码定义的历史 在谈论开源之前，一定要提的就是自由软件（Free Software），自由软件算是比较陈旧的一个名词了。最初当计算机刚刚进入大学时，是被当做研究的工具来使用的，软件是自由的在黑客们中间流传的，而且程序员们也仅为编程行为获得报酬，但不会为程序付费。稍后一段时间，当计算机进入商业世界之后，程序员们开始通过限制软件的权利来让自己获利，即对软件每个副本收取一定的费用。在1984年，Richard Stallman 将自由软件作为一种政治考量来进行推动，他还创立了自由软件基金会，并身体力行的开启了轰轰烈烈的 GNU 项目，Stallman 的前提是人们应该有更多的自由，而且应该感激自由。他设计了一套他认为所有用户应该拥有的权利，并将其编入GNU通用公共许可证（GPL）。Stallman 还根据保留权力巧妙的起名为 Copyleft，这样就可以保留复制的权利。而且 Stallman 自己亲自实践这样的理念，开发了一系列的自由软件，诸如 GNU C 编译器、GNU Emacs（一款编辑器，非常之诱人，以至于很多人称之为是一门宗教）。受 Stallman 的启发和感染，有很多人在 GPL 许可证之下为自由软件贡献力量。是的，开放源代码定义囊括了很多 Stallman 的观点，可以称之为其衍生作品，因为它没有对自由有那么强烈的表达。
开放源代码定义 最初来自于 Debian GNU/Linux 发行版 的政策文档。 关于Debian， 我们知道它一直都是很受欢迎的 Linux 发行版，其特色在于全部使用自由软件来构建。Debian 开发出来之后，Debian 除了遵循 copyleft 之外，也遵循着一些其他的自由许可证。所以当时的Debian在自由软件方面还存在中一些问题，因为它没有向 Debian 之外去明确其自由软件的理念。 我当时恰好是 Debian 项目的领导者，为了解决这个问题，我在 1997 年的7月份，于是起草了 Debian社会契约 和 Debian自由软件指南，后来许多 Debian 开发人员对这些文档进行了纠正和改进。在 Debian社会契约 中我们明确了 Debian 是有自由软件所构建，而 Debian自由软件指南 则旨在通过对软件的许可证和指南进行独臂，让开发者能够可以轻松地将软件区分为自由和非自由软件。
Debian 指南是备受自由软件社区所称赞的，尤其是那些 Linux 的开发者们，要知道他们可是正在进行自由软件革命的践行者，他们所开发的是世界上第一款能够实际使用的自由操作系统。就在网景公司决定要将他们的 web 浏览器变为自由软件时，他们找到了 Eric Raymond。Raymond 是自由软件的玛格丽特·米德：他写了几篇人类学文章，解释自由软件现象及其围绕其所产生的文化现象，Raymond 的贡献在于首次向世界展现了这些自由软件的开发者们，也向世人展示了他们鲜为人知的一面。网景的管理层主要对 Raymond 那篇著名的论文《大教堂与集市》印象深刻，这是一本讲述自由软件能够之所以能够为没有任何报酬的志愿们成功的开发出来的背后故事。网景之所以找 Raymond ，就是希望Raymond能够为他们进行基于保密协议的咨询，且能为他们的自由软件开发新的许可证。Raymond 坚持认为网景的许可证应该遵循 Debian 指南，那才是真正的自由软件。</description>
    </item>
    
    <item>
      <title>开源20岁了，是该庆祝一下了</title>
      <link>http://www.ocselected.org/posts/opensource_culture/opensource_20_years/</link>
      <pubDate>Wed, 17 Jan 2018 21:59:03 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/opensource_20_years/</guid>
      <description>开源的20年 开源促进会 要在今年隆重的庆祝开源诞生20周年，人类习惯于以十年为一个阶段，开源即将进入它的第三个十年，若是将之比喻为我们人类本身的话，正是意气风发的年龄，也是才华碧现的时候。
20年前，也就是1998年的二月份，“Open Source”（开源）被软件所第一次使用，稍后，开源的定义OSD 正式的公布，我们不妨再重温一下OSD的主要起草者： Bruce Perens 的精确定义开源：
 &amp;lsquo;开放源代码&amp;rsquo;是为了让已经存在的自由软件对商业更加友好而提出的正式名称，旨在鼓励商业，而且会对验证的许可证进行收集。
 为了避开自由软件的硬性规定，当时认同开源的几个大人物，如 Tim O&amp;rsquo;Reilly，Linus Torvalds，Bruce Perens等人，齐聚加州的帕洛阿尔托，为“开源”一词赋予全新的意义。自从开源出现以来，越来越多的项目认同并加入开源阵营，从最初的Linux、Sendmail、Perl，以及稍后的Python、Apache，乃至最近的Docker、Kubernetes、TensorFlow等。
开源大潮似乎越来越涌 从某种意义上说，开源已经赢得了胜利，它已经超出了当时参与者的想象。开源现在已经无处不在，他是整个互联网的基石，它驱动着我们日常使用的电脑和移动设备，以及相互连接的网络。假设一下，如果没有这些开源软件，云计算、物联网就不可能有今天的规模，甚至都未必创造出来。
单单从技术上讲，我们简单的遍历一下：改变软件交付方式的容器技术实现 Docker 是开源软件，基于容器技术实现编排的 Kubernetes 是开源，再返回头看看大数据的生态圈，Hadoop、Spark、Kafka、Hive、Hue&amp;hellip;&amp;hellip;都是开源软件，当然，2017最火热的领域人工智能，亦是由开源所驱动，如 TensorFlow、MXNet等等
更不用说，Linux占据超算前500名，90%的云计算跑到负载是使用的Linux，以及数不清的智能手机。
微软转型真心拥抱开源，这在20年前是所有人不敢想象的，要知道它认为开源是损害知识产权的获罪魁首。然而就在2017年一跃成为GitHub贡献最多的公司榜首。2018年初，即使保守如本土的公司，如阿里巴巴、百度也都对自己的开源项目作了一些回顾和总结，比如加入某基金会、在GitHub开源了自己的项目等等，即使如AWS，作为云计算的全球老大，也加入了CNCF，并雇佣了Netflix OSS团队的 Adrian Cockcroft， 要在2018年在开源界发力，MXNet 和 ECS 似乎落后了许多。
这已然是一个默认开源的时代，和工程师交流，几乎就是“无开源，不聊天”的局面。（告诉你个秘密，你看下各家IT媒体的首页，如果没有开源相关的新闻或文章，那它一定没有点击率。）
开源将点燃创新之路  每个人都被赐予天国之门的钥匙，但同样，这把钥匙也可以打开地狱的大门。 &amp;ndash;Richard Feynman
 让我们暂时抛开道德、民主、自由这些话题，单单从工程的角度来思考开源，为何人们会青睐开源？为何开源软件的开发方式正在得到工程师的认同？如：
 对待用户要像对待自己的开发的伙伴一样 尽早发布 频繁的集成 高度模块化 多个版本  正如《原则》一书中指出，“极度开放”是取得成功的关键所在。因为只有这样，才能最大的发挥匠人精神，让优秀的想法和付出得到应该有的回报。世界在加速的发展，代码正在吞噬人类，如果不开源，那么依靠自身的力量来应对世界的复杂性、不确定性，将面临非常大的考验，在《技术的本质》一书中，经济学家、技术思想家布莱恩.阿瑟精确的道出了技术是什么，以及它是如何进化的。所有技术产生于已有技术，也就是说，已有技术的组合使新技术成为可能 。并在最后论道：“秩序、封闭、均衡作为组织解释的方式现在让位于开放性、不确定性、以及永恒的新颖性。”
下一个20年 大家应该还记得那本书：《开放源代码——来自开源革命的声音》，书中收集了开源领袖们的文章如Eric S. Raymond、Linus Torvalds（Linux和Git的创始人）、Robert Young（红帽公司创始人）、Larry Wall（Perl语言创始人）、Tim O’Reilly（著名媒体人，web2.0的发明者）等等。20年过去了，重读这本书，作为晚辈的你是否能够完全理解他们的想法和做法？开源已经作为主流的显学，进入人们的视野，并渗透到其它领域，不仅仅只是在软件界发挥力量。作为爱预测的、总是担心被未来淘汰的国人，是否愿意畅想一下开源未来20年的发展？
 开源将会是主流的软件工程方法论 开源也是未来软件的主要生产方式（微服务、DevOps已然显出端倪） 商业模式将会变得更加复杂和让人捉摸不透 工程师将变得更加独立和专业，开源让”牛人”的视野更加的开阔，也让自身更加的独立 开源的最终目的仍然是自由，或许伟大的Richard Stallman的理想能够实现，软件终究是自由的。  结语 开源界大人物 Eric S.</description>
    </item>
    
    <item>
      <title>Linux内核开发者是如何协作的——用实际数据说话</title>
      <link>http://www.ocselected.org/posts/opensource_culture/collaboration_linux_kernel/</link>
      <pubDate>Tue, 12 Dec 2017 22:26:55 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/collaboration_linux_kernel/</guid>
      <description>导读 开源项目的协作模式，对于绝大多数人是陌生的，也是好奇的，而这也恰是很多人感受到互联网的魅力，来自完全不同时区的人，从未谋面，却能够协同开发，在世界上最大的开源项目中进行工程攻关，堪称世界奇迹，人类史上也是罕见。本文由来自Linux内核最大的贡献公司——Intel的实习博士所作，她并非仅仅是位观察者，她本身也是开发者。本文就是她对于Linux内核开发者如何协作的记录和观察。实乃肺腑之言。
引子 Dawn Foster 在 Intel 的开源技术中心工作的时候，她所在的团队中有几位是做Linux内核开发的，那时 Dawn Foster 就对他们这些人产生了兴趣，非常好奇他们：“这些人是如何和各个公司的人进行合作的了呢？有些公司甚至是竞争对手。”
这里需要先说明一点的就是，其实Linux内核的开发人员，多数是来自商业公司的员工所做的贡献。然而，还是有很多关于开源软件的学术研究会假设大部分的工作是志愿者做的，即那些由于个人需要或利他主义的人。或许有些项目确实是由志愿者所开发和维护的，但是对于Linux内核来说是不成立的。基于此种情形，同时也是为了满足 Dawn Foster 的好奇心，Dawn Foster 采访了16位内核开发人员，主要是和他们讨论内核开发人员在开发过程中是如何进行协作的。
以下内容即是 Dawn Foster 所探索和总结的内容。
社区第一、老板第二 他们中的多数人首先认为自己是 Linux 内核开发者，然后才是某家公司的员工。即使是他们对于现在的工作很满意，对其老板也充满好感，他们中的大多数往往把雇佣关系视为暂时的，而他们作为内核开发者的身份则被认为是永久的，也是更为重要的。虽然公司在有些时候会影响到员工的贡献，但是这些员工在工作上还是享有很大的自由。这些人的日常工作并没有受到任何的干涉，老板高度信任他们，让他们去做自己认为有用的工作。但是，他们偶尔也会被要求做一些特定的工作，比如是某个公司特别感兴趣的领域。
许多内核开发者会定期与竞争对手公司的员工进行合作，他们彼此以个人身份进行交互，而并不去关注他们的雇主之间彼此的竞争关系。这点是 Dawn Foster 在 Intel 工作时所亲历的，因为Intel 的内核开发者，会和所有Intel的竞争对手公司的员工进行协作。
和他人一起协作 每位内核开发者都会对自己的同类更加的亲密，他们其中一些虽然大多是仍然是职场关系，但是很多都发展为私人友谊。基于私有友谊或职业关系，以及在一些研讨会上的碰面，让他们能够更加的利用邮件列表来进行协作。
在大多数情况下，人们似乎并不特别关心其他Linux内核开发人员在哪里工作，然而，有些志愿者软件开发人员给予的回报和帮助要比公司从事类似工作的人还要多。
具体的地理位置对于他们来说也不是什么大事，因为协作都是发生在邮件列表里，而这些是异步的，从而使得跨多个时区的协作变得容易。虽然有些开发者会了解一下关键的合作者的所在时区，从而能够判断是否能够得到及时的回复，但是绝大多数时候，人们并不在意各自的时区。
使用邮件列表进行协作 Dawn Foster 研究的重点就是内核开发者们利用邮件列表来进行协作。在Linux内核的开发中，关于补丁的讨论都是利用各个邮件列表进行的，所以如果你想知道Linux内核开发者们是如何协作的，那么邮件列表确实是最好的选择。另外，我们知道，Linux 内核真正的实际工作是那些许许多多的子系统列表，所以Dawn Foster的研究工作也不是在Linux内核的主邮件列表(LKML)，而是几个经过挑选的重要的子系统邮件列表。
当然，这也并不意味着Dawn Foster会忽略掉源代码，相反，Dawn Foster 还会关注开发者们最近的代码提交，或者是维护者的状态，等等，可以影响到人们如何在一起工作的因素。
以Linux USB邮件列表为例：
举例来说，上述图展示的是两年间（2013.12.31~2015.12.31)Linux USB邮件列表上的回复。其中邮件中有回复有8,000多封，大约每天10封，不包括没有回复的邮件。较大的黑色圆圈代表那些员工在USB邮件列表中回复或回复最多的公司，用较暗的箭头表示两家公司之间的电子邮件的交互。图像中也为邮件列表上的员工活动最多的公司添加了名称。其中有一些指向自己的箭头，说明是公司自己的员工之间的交互（也有的情况是自己）。例如，像德州仪器和英特尔这样的公司就有几个人在为USB代码工作而互相回复。
同样我们从图中可以看到，在本来就是竞争对手公司之间也有很多的互动。我们可以看到诸如德州仪器、英特尔等大型半导体公司。同样，我们也可以看到即使是Linux发行版之间也有相当的交互，如在红帽和SUSE之间就有非常多的互动（线条非常的粗)。甚至是SUSE和Canonical（Ubuntu发行版母公司，译者注）之间都有些许的联系。
对于 Linux USB 模块的邮件列表来说，Dawn Foster运用了一些统计模型，即专注于去理解什么样的话题更可能会得到他人的答复，这里举一些特别的：
 有一些人更可能回复给维护者。 那些近期有代码提交的人更可能会积极的得到回复或回复他人。 最近对代码的相同领域做出贡献的人也更有可能相互回复。 在同一家公司工作的员工倾向于互相回复。 没有任何证据能够证明，在相近时区的就合作的更好。  接下来Dawn Foster会做点什么 （以下为Dawn Foster的第一人称叙述）
我就快完成我的博士学位修行了，可能有6到8个月的时间，在这期间我将继续使用各种统计模型来查看其他一些邮件列表，从而完成我的研究。所有这些最终都会在我的论文中发表（无疑这仅仅是对于那些想要阅读我关于内核的几百页学术漫谈的人来说的）。在完成这个研究之后，我计划到技术公司去工作，做一些类似于我以前在开源社区角色中的工作，不过那时人们将称呼我为博士了。
关于原作者 Dawn Foster，在Scale Factory 作顾问，Geek，社区经理、跑步爱好者、科幻小说迷、热爱旅行、技术发烧友、伦敦格林威治大学在读博士。</description>
    </item>
    
    <item>
      <title>衡量开源社区投资回报率的16个资源</title>
      <link>http://www.ocselected.org/posts/opensource_culture/resources_measuring_open_source_community_roi/</link>
      <pubDate>Sat, 02 Dec 2017 22:29:40 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/resources_measuring_open_source_community_roi/</guid>
      <description>混迹于开源社区的绝大多数人都能够明白社区为项目或企业所带来的巨大价值。但是这些东西，怎么通过电子表格或饼图之类的展示给世人？让圈外的人也能够明白？为此我专门撰文写了一篇文章：企业建设社区最起码能收获什么，在写作的过程中，我收集、查阅了很多的资料，我整理后一并分享给大家，相信这些材料能够帮助你去了解成功的商业案例，并有足够的信心去建设一个充满热情的开源社区。
 衡量在线社区投资回报率之最佳实践（PDF）- 尽管是仅仅只有19页的PDF文档，由Oracle RightNow社交体验客户所创建，它是建立一个衡量其他在线开源社区的商业价值的框架的一个很好的资源，提供了来自真实社区实际经历的衡量投资回报率的计算方法，而且还解释了设置衡量社区目标的最佳实践。 重新定义在线社区投资回报率- 此博客解释了参与社区如何帮助补充客户支持。正如作者所说，”这样的成功实际上会提高成本，但是这是一个相对更好的方式，因为额外的好处是增加客户的忠诚度、加速上市时间并能够更快地获得客户的需求和希望”。 社区的价值-行为转变为投资回报（幻灯片）- 此幻灯片讲述了如何通过投资社区来增加商业价值，定义了行为的改变会带来价值，如何改变行为的实践，以及接下来该做什么。 构建价值：阐明社区管理的力量- 2013年社区管理状况报告的调查结果，其侧重于社区管理的价值。“诸如此报告之类的资源是真正能够提供具体的研究和案例的，是人们难以找寻到的。” 社交商业的价值（信息图表）- 这个方便的信息图表考察了公司如何将社交视为商业工具。 如何为你的在线社区计算投资回报率- 说实在的，计算社区的投资回报率是很难的事情，“好消息是让您的在线社区获得投资回报更为复杂，可以使您既捕获私人在线社区为您的组织带来的真正价值，并在必要时改进您的方法。” 社区就绪和增长研究的关键（报告和信息图表）- CMX 和 Leader Network 共同回答了这个问题，“如果你之前从来没有搞过社区建设，你知道从哪里开始？” 请下载他们的报告，了解负责成功品牌在线社区的业务驱动因素和运营的最佳实践。 开源的成功真正看起来是什么样：以及我们该如何支持他们，开源项目并非起源于社区，总有人在”掌管”，即使是项目已经很成熟- Medium 上的一篇文章，作者Nadia Eghbal调查了一些开源项目以及其社区，并尝试找出他们背后的资源和组织。 衡量在线社区的投资回报率- 正如本文所指出的一样，在线社区的益处来自于成功的在线社区之外的衍生物，而不是其本身的目的。 Threadless、赫芬顿邮报、以及Fitocracy 是如何理解社区的商业价值的- 通过本文可以了解到社区可以为企业带来的起码的益处，有大的品牌，也有小的很少听到的公司。 为什么在线社区的投资回报率不重要- 本文并没有回答关于社区的投资回报率，作者相反是指出了已经获得利益后的证明，并提出问题：“社区能够为我们的客户带来什么价值？社区对这个世界有什么价值？” Erica Kuhl如何在Salesforce上证明了社区的投资回报率- 本文提到：“在今年二月份，也就是整整构建了7你那的社区之后，那个从零开始的市场开发，Erica 成功的从社区转型到产品团队，他们现在对Salesforce产品本身产生了明确的影响。” 社区的价值是什么？- 如果一个社区并非市场的话，那么你就无法获得所谓的投资回报率，那又对企业有什么益处了呢？请阅读此文中的两个示例，看看社区可以做什么。 社区参与的价值- 了解您在尝试参与社区时可能遇到的四个关键挑战，以及让参与活动成功的建议。 社区的商业价值- 这三个步骤可以帮助显示您作为社区经理的价值。 在线社区的真正价值- 本文发表于1996年，一份20年之后仍极具价值的文章不多，为在线社区的价值提供了一个实用的解释。今天读来仍然受益良多。  关于原作者 VM (Vicky) Brasseur - VM(简称 Vicky)是一名管理者，其中包括管理人、管理项目、流程、产品、以及p^Hbusinesses，在她超长的18年的技术生涯中，她曾经担任分析师、程序员、产品经理、软件工程经理、软件工程总监。目前，她是一名顾问，为公司提供有关开源的战略、政策和程序的建议。她的博客地址：anonymoushash.vmbrasseur.com，以及Twitter账号：@vmbrasseur
本文由作者VM (Vicky) Brasseur 发表在Opensource.com上：16 resources for measuring open source community ROI。本文在Creative Commons BY-SA 4.0许可证下发布。由开源之道精心编译，欢迎转载！</description>
    </item>
    
    <item>
      <title>开源软件项目的“上游优先”解惑</title>
      <link>http://www.ocselected.org/posts/opensource_culture/what_is_upstream_and_its_benefits/</link>
      <pubDate>Mon, 13 Nov 2017 23:10:44 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/what_is_upstream_and_its_benefits/</guid>
      <description> 引子 中国开源年会2017，即将在本周末上海交大举办，为期两日的会议，开源大咖云集，探讨本土开源。我依旧像往年一样，有机会就布道开源。这次带来的演讲题目是《论拿来主义的陷阱——No upstream first的心理和文化分析》，是标题党没错。其实，现实中的我常常遇到的问题不是大家不愿意参与上游，而是无可奈何，一脸无辜的样子。
那么我在分析的时候，是有一个前提的，那就是假设听众都是明白上游是什么?上游能为项目带来的好处也是清晰明了的。但是，若是有人不明白怎么办？好吧，那我就提前写一篇文章讲讲。算是科普一下。
什么是”上游” 上游这个词本身来自于河流，意思是理源头较近的地方，也有相对的意思，在河流的任意两点，相对理源头较近的地方就是上游，否则，称之为下游。
在非软件技术领域，如供应链等，则指的是诸如原材料等生产过程较原始的阶段或本成品。
我们这里的上游，特定指的是开源项目，如Linux Kernel、Kubernetes、Docker、Hadoop、Kafaka等，由最初的发起者或非营利性组织的社区所维护，其他人可以自由的为原始项目（上游）做贡献，诸如提交代码、撰写文档、测试、设计等，然后，按照一定的规则，接受贡献或者拒绝，继而形成更大、更完善、能够解决更多问题的软件项目或产品。
“下游”又指的是什么？ 其实，开源软件的项目上、下游也是相对的概念。所谓的下游，指的是某个开发者或某个团队，fork了上游的代码，形成了自己的分支，自行维护分支的更新，即相对于原初的开发者或社区，形成了自己的产品。项目产品的bug、安全漏洞、文档等统统都由自己维护。
下游如果发展良好，可能形成自己独特的分支，如Ubuntu之于Debian，OpenShift 之于 Kubernetes。
上游优先的益处 按照人类的直觉，犹如古代一个脍炙人口的成语故事——“刻舟求剑”一样，一个较为成熟的上游项目，我基于某个版本来进行定制，如添加自己理解的功能、增加易用性等，如下图所示：
若是自己的能力大于上游的话，那么有可能发展出胜出原有项目的，不过这个历史上尚未出现过这样的个人或团队。反倒是，浪费了很多的人力无力，最终又回归到主干。著名的商业案例有Google之于Android内核分支、AWS终究还是拥抱KVM，独立维护XEN太吃力。反面例子太多，我这里就不多列举。以下我们就上游优先，讨论下其益处。
个人 作为开源的贡献者，尤其是一名开发者，能够参与到开源软件项目中，被全世界的人都可以看到，若是这个项目是常见的、基础性的、流行的，那么更是让人振奋的事情。毕竟，能够被越多的人承认，是人类之所以发展到现在的动力！
个人上游优先，首先的益处就是，能够在众多的同类型的开发者中交流、探讨问题，追随项目的创始人、维护者，学习他们的思路和解决问题的方法，和他们交流，第一时间解决问题，让全球的人受益。第二就是自由的成长了，在社区，通常是没有外界压力，诸如商务、项目周期等，而是做自己愿意做的事，做自己认为正确的事，不走捷径，坚持原则。当然，同样这样也要求你是一个意志坚定的、敢于挑战自我的、能够自律的人。最后，就是让更多的人认识你，互联网的优势就是讲世界拉平了，超越了时间和地域，比如GitHub这样的基于社交的代码托管站点，你所有的贡献，都将是有目共睹的，你的能力不会被某个公司所雪藏。
个人选择下游，独自蒙头苦干，重复制造轮子之余，视野会逐渐变得狭窄，而且若是被超越，失落感、挫折感也将很难承受。
公司/企业 对于公司来说，商业其实有时候蛮好解释的，就是一定要赚取利润，有的时候是直接的，有的时候是间接的、绕很大弯子的。那么开源软件项目的上游优先，我随便列举三个理由，就可以让商人们难以拒绝:
 降低维护成本：基于开源项目的某个版本来做自己产品或服务，然后自己来进行bug修复和安全漏洞补丁，甚至是添加新的功能，随着时间的增加，这简直是惨绝人寰的梦魇。没有哪家公司或个人能够独立维护一个巨大成本的开源项目，即使有实力，也要付出相当大的代价，无论是时间成本还是经济成本。而上游优先则不存在这样的问题。 吸引人才：代码是最好的面试题答案，如果一名开源贡献者所有的代码、文档你都可以看到。这样的人，难道不需要吗？而这些人，需要的就是一个开放、分享、自由的环境。封闭做事，恐难以捕获他们的心。 影响项目走向：在开源项目中，新的功能和特性来自于贡献者，而这些贡献者则是影响项目走向的关键人物。如果你的公司认为某个功能对于你们很重要的话，那么你就需要有相应的贡献者积极的去做这件事，恐怕有些时候是别人无法代劳的，因为你们更了解自己的业务。而此时，唯有积极的优先上游开发，才能影响项目的整体走向。否则，就又进入了陷阱。  后记 现实中遇到的问题，往往更加的复杂。谁都能看到直观的结果，但是过程往往对于很多人来说是黑盒子，一如现实中我们看到的那些奥运会冠军、编程高手、金牌销售、超级管理者等优秀的人，这些人的特征，大家都仿佛能够观察到，诸如坚毅、刻苦、聪明、灵敏等，但是所有的事情，都是有过程的。没有一蹴而就的事情。开源，发展了这么多年，一路滚爬摸打，有成功的公司、有失意的个体，但是失败的居多，成功的寥寥。洞见就在那里，那就是它的过程。它或许看起来是违反直觉的，但是它往往可以让你离胜利更加的接近。
至于说，为什么人们不实行上游优先的策略，这就是要在本周六下午的分享中要谈到的。敬请期待。
 如果你想打出一记重拳，你首先做的是不得不后退一步。 ————《百万美元宝贝》
 参考资料  Linux基金会发布的开源指南之参与开源社区 Upstream First: Turning OpenStack into an NFV platform Why upstream contributions matter when developing open source NFV solutions.  </description>
    </item>
    
    <item>
      <title>Linux 内核开发报告2017版</title>
      <link>http://www.ocselected.org/posts/opensource_culture/2017_linux_kernel_development_report/</link>
      <pubDate>Mon, 30 Oct 2017 15:41:51 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/2017_linux_kernel_development_report/</guid>
      <description>摘要 全球公有云上运行的负载有90%是Linux操作系统，在嵌入式市场的占有率是62%，而在超算的市场占有率更是达到了99%，还有，它运行在世界上超过82%的智能手机中，也是所有公有云厂商的主要支撑服务器（90%）。
这一组百分比的数据能够激发你什么样的想象？这么形容，你觉得是否合理：“几乎整个（移动）互联网以及支撑它的云计算和大数据，都是由Linux来负责掌控的。” 这样一个神奇的系统的开发方式是什么样的？已经经过了26年的发展，它是如何保持活力的？庞大的社区又是如何协作的？我们不妨来解读一下Linux基金会刚刚发布的Linux内核开发报告2017
 我很荣幸能够在Linux社区和一些具有高水准的人打交道。 &amp;ndash;Julia Lawall（来自 Inria 的高级研究员如是说）
 Linux 项目的现状 本次的报告，所统计的数据是从内核的4.7算起，到4.13止，先看看Linux都增加了那些新的特性吧：
 透明 Huge 页现在可以支持基于文件的页，以及可编程的数据的页，可以更加高效的利用内存。 内核的文档系统切换到了新的工具链，即Sphinx：为了更好的组织和加强内核的文档。 内核的核心计时机制，被替代为新的更加高效。 网络栈中的“易捷版数据路径”机制的实现，可以处理用户 BPF 程序负载的高速网络包。 BBR 拥塞控制算法改善了多种设置中的网络性能。 &amp;hellip;&amp;hellip;  以及更多的驱动、更安全、更多的测试。
 当你的代码是运行在数十亿台设备上的时候，感觉真的不一般。 ——Jens Axboe（Software Engineer, Facebook）
 都有谁为Linux做的改变？ 自从进入 Git 时代（即2005年 2.6.11 发布之后），共有15,637名开发者为 Linux 内核的开发做了贡献，这些开发者至少是来自1,513家公司。
尽管那些独立的开发者看起来是很多，但其实是少部分人做了大量的工作，在几乎所有的开发周期中，大约有1/3的开发者，每人仅贡献一个补丁。自2.6.11版本之后，贡献最多的前十位工程师，他们加起来的贡献有45,338次改变，大概占了总数的7.1%，前30名加起来的贡献是16%。他们的名字是：H Hartley Sweeten、Al Viro、Takashi Iwai、Mauro Carvalho Chehab、David S. Miller、Johannes Berg、Mark Brown、Tejun Heo、Russell King、Greg Kroah-Hartman、Thomas Gleixner、Christoph Hellwig、Hans Verkuil、Ingo Molnár、Chris Wilson、Arnd Bergmann、Geert Uytterhoeven、Dan Carpenter、Eric Dumazet、Joe Perches、Alex Deucher、Daniel Vetter、Laurent Pinchart、Axel Lin、Trond Myklebust、Ben Skeggs、Arnaldo Carvalho de Melo、Bartlomiej Zolnierkiewicz、Kuninori Morimoto、Linus Walleij。</description>
    </item>
    
    <item>
      <title>归零心态，参与开源</title>
      <link>http://www.ocselected.org/posts/opensource_culture/open_source_success_starts_at_zero/</link>
      <pubDate>Mon, 09 Oct 2017 22:05:25 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/open_source_success_starts_at_zero/</guid>
      <description>“总是要达到110%的满意？” 大多数人都听过类似的心灵鸡汤，激励话语，甚至在我们的整个职业生涯中都是这样子过来的。虽然说在某种程度上讲，这也是一个好的建议，但是若运用不当，则事情会恰得其反。
多年前，我在去韩国的国际航班上阅读的一本书，彻底的改变了我的观点，它就是克里斯.哈德菲尔德上校的宇航员地球生活指南, 曾担任过国际空间站指挥的第一名加拿大宇航员，此书让我领悟到了关于公司或个人如何在开源社区中工作的真谛。
哈德菲尔德和所有的其他宇航员一样，在进入太空之前，都要进行大量的训练、做充分的准备工作、以及很多艰难的任务。他从所有这一切学到的竟然是团队的动力是成功完成任务的关键部分，也是能够安全返回地球的重要原因。为了能够实现这样的动力，他开发了一个让团队能够合作的思考方法，尤其是针对新的成员。他将这个方法称之为：归零大法。大体的意思就是，如果你在刚刚加入一个团队时，就去努力的尝试提供110％（成为+1）的能力，则会损害你在此团队中获得长期成功的机会。归零心态则意味着能够虚心的学习并努力成为团队中的高效成员。
同理，这个方法亦适合于生活中的其它领域。举个例子，我本人在Cal消防局做志愿者的时候就应用到了这个方法，在那里，我作为团队的一份子成功的融入了团队，无论是消防前的准备，还是在实施救火的过程中。
当然，本文讨论是开源相关的，那么下面的内容就是我在开源项目如何应用哈德菲尔德上校的 归零大法，让你能够在未来为开源项目添砖加瓦，奉献力量。
准备工作 正如哈德菲尔德在太空计划中所发现的那样，以及我本人在加州消防局的亲身经历的，在开源社区中也是一个道理，在你要加入或贡献自己原来并不熟悉的社区项目之前，需要做很多的准备工作的。
以下是加入开源项目／社区要确定的一些基本知识：
 使用何种沟通工具？（IRC、Slack、邮件列表、论坛等） 这些工具的沟通规范是什么？（高级别的讨论、深入的技术等等） 项目遵循哪些开发流程？（短期的、活跃的发布周期还是长期的、大型的发布） 项目治理是什么样的？（一个典型的PR是什么样子？人们该如何接受／审核代码等等） 项目的领导结构是什么样的？（仁慈独裁者，还是去中心化领导等）  将上述问题的答案找出来，不仅能够理解项目是做什么的，它还能够给出一个框架，从而能够确定你可以从自己可以胜任的地方开始参与贡献到社区，这就是 “我就是+1，我可以。”
做那些别人不屑做的脏活累活 一旦你开始逐步理解了项目和社区，你就可以开始作出自己的贡献了。所谓的 归零大法，其最佳实践就是做那些人们不屑做的事情，尤其是下面的：
 文档（开源项目几乎总是缺乏文档） 测试／QA（同上注释） 回答问题（这条还有额外的好处，可以帮助你更完整地学习代码/项目） BUG 修复／分类（这类工作颇具挑战性，但可能会被一些开发者所无视） 社区管理／布道  通过深入这些特定的领域，你不仅可以在工作中学习，而且显示出你不卑不亢的态度。所有你的活动和贡献，现有的项目成员都是有目共睹的，他们会认为你是希望项目更好的，而不单单是为了个人出名。
尊重每一个人 哈德菲尔德讲述了那些从来没有进入过太空的同事们的故事，他们之所以没有被选中的原因就是没有归零心态，这几乎适用于他们所有人。哈德菲尔德还指出，“远征行为”的概念在太空飞行（特别是长期任务）中至关重要，简单来说，这意味着你需要能够依靠你的同事，并且与他们一起完成任务或者说是项目的目标。
这就意味着要尊重每一个人，而不论你是否同意他们在某个主题或一段代码上的立场。切记：
 你永远不会失去专业精神。 批评代码/解决方案，而不是人。（所谓的对事不对人） 不要为你个人（或公司）沽名钓誉。 理解尊重是双向的（你想获得它之前先要给予）  关于此点，你可能会想，“嗯，当然这听起来很常见。” 这就是秘密所在，尤其是当公司和他们的优先事项参与开源项目时，这些常识就会是向导，很有效果。
总结 每家公司或是每一个人，均有一定的自我意识，——这是正常的，也是可预期的。其中的奥秘就是理解人类动力学（即我们通常说到“软技能”），这是所有有效协作的核心。无论你是在离地球249公里的太空，还是在野外消防指挥所工作，抑或是为开源项目做贡献。
在你开始获得+1影响之前，你的目标就是 归零，进而让你或你所在的公司在帮助开源项目和自己成功方面成为关键的优势。
关于作者 ，Guy Martin 是 Autodesk 开源部门的总监，他可以代表公司在开源社区进行广泛的活动，且在公司内部与各团队紧密合作，并加强各团队与上游社区的参与。在加入Autodesk之前，他协助创建了三星开源部门，负责代表公司对关键开源项目进行持续贡献的团队。再之前，Martin在红帽工作，他创建了开源实施咨询服务，帮助客户利用红帽在开源社区中的优势地位。当Martin没有与客户交流、没有在社区写博客、也没有在开源社区活动时，他非常享受和女儿待在一起，也很乐意为加利福尼亚州的消防部门——Cal Fire做志愿者。
本文由作者Guy Martin 发表在Opensource.com上：Open source success starts at zero。本文在Creative Commons BY-SA 4.0许可证下发布。由开源之道精心编译，欢迎转载！</description>
    </item>
    
    <item>
      <title>在你的项目开源之前应该确认的几件事</title>
      <link>http://www.ocselected.org/posts/opensource_culture/what_to_know_before_you_open_source_your_project/</link>
      <pubDate>Mon, 25 Sep 2017 21:12:13 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/what_to_know_before_you_open_source_your_project/</guid>
      <description>你所在的公司决定将自己内部开发的项目开源了。除了准备好代码之余，是否确定了诸如开源的目标、开发流程等等？开源绝非是在GitHub上将代码开源即可，除了代码还有很多事情需要确认和准备，别急，且待我慢慢道来。
其实，我忍不住想用电影《蜘蛛侠》里面的一句经典台词：“能力越强，责任越大。”来绑架你的开源行为，一旦你的项目开源了，这同时也意味着，你的公司不仅要为项目本身负责，而且要为围绕项目所构建的社区负责，而这通常有意味着需要更改开发/构建/发布工作流程。这不仅仅是代码本身的问题，而且包括那些围绕代码的所有流程和基础设施，唯有这些适应开源的方法论，方能确保项目的成功。
以下就是我要和大家说的，关于在项目开源之前应该去确认的几件事情。
确定公司开源的目的 在事情没有开始发展之前，请花一些时间来评估为什么公司要选择开源？要知道，开源一点都不简单，相反，会是非常艰难的过程，如果是三心二意的话，很有可能坚持不下去。
公司在项目开源之前已经花费了大量的时间和资源来开发，在开源之后，还要花更多的时间和精力去维护和经营围绕项目的社区。所有的这些看起来都是利他主义的，但公司的目标是盈利的。这是所有人都去思考的问题。
请在开源之前，要三思。开源某种程度上并不能使你的公司直接赚到钱，请一定要理解自己的目标。或许是为了声誉，或许是为了吸引人才，或许是其他原因。总而言之，要想清楚。
开源不仅要满足公司的目标，也要对自由和开源软件（FOSS）有利。如果不能满足上述二者的诉求，开源将毫无意义。
理解社区的期望 当你的公司还掌握着项目的绝大多数权力的时候，可以决定那个贡献可以合并到主干，也决定着什么时候发布版本，即使这样，也要确保所有的开发流程都是在开放的沟通情形下完成的，而且是围绕着社区来进行协作的。
换句话说，该项目必须按照社区对开源项目的期望进行操作。这些期望包括（但不限于）：
 所有的开发工作 - 包括bug修复、新的功能开发、产品的路线图、以及讨论和问题追踪，所有的这些事情都要公开的进行，并与社区协调配合。 所有和代码相关的 构建流程 （即持续集成、持续部署等内容）均是公开操作的，并社区成员是可以访问的。 公司要接收来自社区的 贡献，这里的“贡献”不仅仅指的是代码，它也包括文档、设计、产品路线指导、治理、以及与项目有关的其它事项。所有的贡献必须及时的进行review，和认真的考虑，且要进行公开的反馈。  要明白社区才是关键 开源一个项目需要做很多的工作，虽然在实践中通常没有比专有软件的开发需要做的更多。然而，流程的改变和文化的转型是需要付出很多努力方能有所结果，然后才是进一步的更加公开、有效，并获得社区的支持。
既然有这么多的工作，我为什么要开源了呢？
正如我在开始的时候所提到的，一家企业开源某项目并不是完全的处于大公无私的、利他的行为，之所以开源，企业通常是希望能够从项目所围绕的社区获得一定的利益。但是，企业要获得这些利益的前提是能够赢得、构建、维持住社区的信任。
信任是在项目在公开的进行中所产生的，须在社区的氛围下进行沟通和协作。公司做出的任何完全单方面或私人的决定都会违反这种信任，疏远社区。当社区分崩离析时，人们就会离开（有时会有人fork代码另起炉灶）。
任何人都没有办法从一个消失的社区中受益。这样的结果就是，这家公司拥有看起来开放，却无人问津的代码而已。与自己当初的目标背道而驰！
启动开放的缺陷跟踪系统 一旦一个项目发布了，所有的 bug 报告 —— 旧的还是新的 —— 都必须公示在项目的缺陷跟踪系统，以下所列出来的是你应该去做的事情：
 将 原先已经存在的缺陷 移到项目的缺陷跟踪系统  要知道迁移的过程通常是需要写一些脚本的 在你移动任何东西之前，检查所有现有问题，并关闭那些没有真正希望被修复的问题。 确保这些过去的缺陷当中所包含的专有的信息要删除，然后在将之移入缺陷跟踪系统。  决定要不要将已经修复的缺陷公开  这是可选的，但是它却能够提供有价值的上下文。 确保这些已经修复缺陷当中所包含的专有的信息要删除，然后在进行公开。  创建新的工作流，以让所有的缺陷能够通过公开的缺陷跟踪系统更加的有效。  为公司所有缺陷报告者或参与者进行培训和协调。 假如你选择来网上公有的服务（如Zendesk），新的工作流必须确保这些缺陷的报告能够有效的迁移到这些服务上来，而且要确保报告方（通常是客户）仍然能够收到他们所期望的服务和信息。   准备好产品路线图的公开透明 一旦项目以开源的形式发布，其开发的路线图，以及所有相关的讨论均须在公开的地方进行。
 所有关于项目的路线图（以及为什么）讨论和决定都必须要公开，并且要以社区的名义进行。 社区的反馈需要集成到路线图当中来。  请记住：虽然路线图和所有关于它的讨论都是在公开的和社区的投入中发生的，要知道除非是发生了变故，否则公司依然有对项目最终的决定权：决定项目的走向，何时以及为什么。当然，这些应该在尊重项目现在服务和支持的社区的方式来完成。
公开的项目路线图，可能会包含一些功能，这些功能或者和专有的功能有所交互，或者是和专有的功能有依赖关系，那么公司里与项目有交互的每个人都要小心，请不要在公开的路线图中去讨论专有的信息和内容。
定义好协作的流程 项目以开源的形式发布之后，所有的贡献都必须使用公众的工作流，无论贡献来自原始公司还是社区。
我这里列举一个典型的工作流：
 贡献者能够 fork 或 clone 公共的仓库到自己的电脑上。 贡献者在自己的分支上开发新的功能，这些工作，贡献者是在自己的电脑上完成的，是私有的。 一旦完成了所开发的内容，贡献者就会将这些内容提交到公共的仓库。（该过程取决于正在使用的版本控制系统以及项目自身偏好。） 这些内容会被社区有资格的社区成员（通常是核心贡献者）进行审核，这些核心成员去选择合并，推迟或关闭（拒绝）这些内容。如果内容被合并了，可能合并到主干或其它的分支，这取决于项目的需要和流程。  每个项目都必须考虑和决定其具体的贡献需求和工作流，而且最好是写入一个叫做 CONTRIBUTING.</description>
    </item>
    
    <item>
      <title>大多数成功的开源项目都是用钱砸出来的，你信吗？</title>
      <link>http://www.ocselected.org/posts/opensource_culture/structure_and_funding_are_key_opensource_growth/</link>
      <pubDate>Tue, 12 Sep 2017 22:33:24 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/structure_and_funding_are_key_opensource_growth/</guid>
      <description>引言 十年前，布道师Berdou&amp;rsquo;s博士的论文：集市的管理：社区主导的开源／自由软件项目、商业化以及外围的参与者就如此的论述：
 基础设施模块是需要大量的、持续的贡献的，诸如桌面系统、平台的程序库，这些都是需要高深的知识和技术能力的。一个有能力全职在项目中贡献的人，若是有人付钱给他从而全身心的投入的话，在理解代码等需要专注和投入精力方面，要比业务时间的志愿者好很多。
 是的，尤其是进入开源默认的时代，企业参与开源、贡献开源的力度是越来愈大。甚至Docker的创始人兼CTO：Solomon Hykes 认为：开源和商业是一枚硬币的两面，缺一不可。。无论是否承认，资本或商业的力量成就了现代的世界，人们为之付出，为之奋斗。换句话说，现代的软件业界，被开源吞噬的软件，商业力量的驱动功不可没。
最成功的开源项目有哪些不同? 欣欣向荣、如日中天的开源项目，用户无疑是重要的一部分，也离不开成千上万活跃的贡献者们，据统计，现在全球开源的项目仓库有6千万，但是，绝大多数只是个人的一个工作空间而已。而那些卓越而成功的项目到底有何不同？经过我们观察，我们发现其中一个共同点：这些项目背后均是由一家公司开发，或者是多家公司共同开发。
来自CNCF的执行董事 Dan Kohn 和开发者Łukasz Gryglicki 将30多个最快发展的开源项目展示了一番，如上图所示。（项目的地址：https://github.com/cncf/velocity 囊括了所有的生成数据的脚本。）图中所展示的内容，其中五颜六色的气泡越大，表示此开源项目的作者数量多，比如最大的Linux Kernel共有3814名贡献者。X轴表示的总共的提交次数，而Y轴表示的是提交的PR和Issue的数量。
Dan的想法是，开源项目所展现出来的现象是，自然增长的越发的规模扩大，其中的原因是大多数的开发者都倾向于使用和参与那些较大的项目，而反过来，又由于参与的人数够多，Bug修复的就更快、增加功能也快，质量也高，一个完美的闭环，所以Dan选择了跟踪增长快速的项目，帮助说明在哪些方面可以参与其中，以及在接下来的几年中有可能成为成功的平台。
前30个增长最快速度的开源项目背后有何神秘？ 现在，让我们来捋一捋这30个项目：
其中有9个项目，其背后是经营最成功的基金会，它们分别是：
   项目 基金会     Linux 内核 Linux基金会   Kubernetes CNCF   Cloud Foundry Cloud Foundry基金会   .NET .NET 基金会   Nova、Neutron、 Cinder OpenStack基金会   Node.js NOde.js 基金会   [](http://mesos.apache.org/) Apache软件基金会    第二种类型占的比例最多，这些项目背后都是由某家公司在背后支撑，但是外部公司的开发者和独立开发者也占有相当的比例，其中值得关注的一个现象就是，很多维护者都是受雇于某一家企业的。其中有14个开源项目：
   项目 商业公司     Chromium、TenSorflow、AngulaJS Google   React FaceBook   Docker/Moby Docker   VS CodeOffice开发者 微软   Ansible RedHat   ElasticSearch Elastic   Auth0 Auth0   GitLab GitLab   Ruby on Rails Basecamp   ionic ionic   Terraform HashiCorp   Chef Chef    第三种类型的开源项目，背后并非是基金会，也没有公司支撑，比较特殊，不好来划分，6个项目：</description>
    </item>
    
    <item>
      <title>东方文化与技术社区</title>
      <link>http://www.ocselected.org/posts/opensource_culture/culture_and_community/</link>
      <pubDate>Sun, 06 Aug 2017 22:30:25 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/culture_and_community/</guid>
      <description>开源之道的主要作者适兕，今年报名了COSCUP 2017的分会场——開放社群經營藝術，并被入选，于是远走台北，为大家分享了《东方文化与技术社区》为主题的演讲。以下为适兕的摘录。
演讲的演示文稿下载地址：《东方文化与技术社区》
 Hello，大家好！
请大家想一下，当我讲出成功的社区、技术社区、开源技术社区时，你脑海中闪过的前三个都有那些，Linux Kernel?Ubuntu?GDG?&amp;hellip;&amp;hellip;有没有本土的？要知道 COSCUP算不上真正意义上的社区，它应属于：Conference。
 社区运营是一项复杂的系统工程，涉及经济学、社会学、心理学、软件工程、人类文化等等诸多领域，任何一样的缺失，或不能保持好奇与努力，都无法经营好一个靠谱而优秀的社区。 ——《The Art of Community》阅读有感
 而我今天就是要和大家分享一下我个人对于文化，和技术社区之间的一些思考。希望能够对大家起到抛砖引玉的作用。让东方有更多成功的技术社区出现，当然开源就更加的好了。
武术界的故事 在正式开始之前，我想问下在座的各位，有没有是武术界的朋友？
真的有哦，等一下子我找你切磋，开个玩笑。
 没有吗？那我可以放心的讲了，讲错也没有关系了，反正是一个外行讲给另外一些外行的。
 嗯，我要讲的是武术界的故事，而不是讲武术、格斗、竞技比赛等。
 前一阵子，大陆地区的武林中，出现了一件事情。一位现代的MMA选手，要挑战传统的武术，大名鼎鼎的太极，在一场不到20秒的比赛中，MMA选手徐晓冬将太极玩家雷公击倒在地，后续的故事，是这位MMA选手遭到封杀，无人迎战。 要讲讲隔壁日本武林界的故事，空手道的发展也是绵软无力，直到一位大师出现，就是创立极真空手道的大山倍达，為避開鐵板一塊的傳統空手道界的反對和質疑，大山倍達選擇了「曲線救道」的理念，繞開日本本土，前往美國表演和踢館。  故事讲完了。我要说明一个什么问题了？稍后再讲。
自我介绍 先自我介绍，我自封为开源信徒：Open Source Believer！ 将自己对于开源的一些思考：
 开源文化现象， 开源商业模式， 开源社区治理 InnerSource 企业内部采用开源 科学的参与社区 如何防止破坏开源  整理了一个部落格出来——《开源之道》，如果你和我有类似的想法，愿意通过写文章的方式参与的话，可以到GitHub上提交PR。
我还是维护了一个中文翻译项目——《开源指南》即 opensource.guide。
目前在大陆一家叫做QingCloud的云计算公司负责开源相关的事情。
反思 我本人的职业生涯，或者说和开源的关系，像很多人一样，是从技术本身开始的，做了差不多十年的技术，8年的开发经验，也有带团队的做过产品。几乎在参与社区这件事上，或者建立社区上，经历了太多的失败。
于是思考，究竟是什么原因造成的？从一开始我就否定了技术本身，我们身边从来不乏聪明、勤奋的人。于是追寻答案，太多的原因了，个人的能力和精力都是有限的，而于是我就挑了个人以为是根本原因的内容——东方文化。
相关著作 作为一名阅读爱好者，广泛涉猎相关图书，从历史、政治、社会、人类等等著作开始，开始抽丝剥茧的寻找和技术、结社、人性相关的内容。今天所讲到的内容，我推荐三本书给大家。
 日裔美籍大神，弗朗西斯.福山，《信任： 孙隆基先生的《中国文化深层结构》， 台湾著名历史教授许倬云先生的中国系列。  他律 他律是和自律相应的一个词汇，形容一个人，需要外力来约束自己、寻找目标、实现目标时需要监督。比如学习和工作需要上司的胡萝卜加大棒。参与社区是因为公司需要我去参与。
他律本身并不可怕，可怕的他律的后遗症——失去方向和动力。变成了《历史的终结和最后的人》，整天坐在沙发上，喝着啤酒、吃着薯片，看着肥皂剧&amp;hellip;&amp;hellip;
自律，找到自己愿意为之奋斗的志业，如Glibc的维护者，NTP的维护者&amp;hellip;&amp;hellip; &amp;gt; I have lived a life.My only regret is that you didn&amp;rsquo;t get to live yours.</description>
    </item>
    
    <item>
      <title>内部开源系列之二 —— 经典案例</title>
      <link>http://www.ocselected.org/posts/innersource/use_case_of_innersource/</link>
      <pubDate>Mon, 12 Jun 2017 21:12:39 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/innersource/use_case_of_innersource/</guid>
      <description>引子 InnerSource 的介绍，我似乎陷入了一种不知该从何讲起的尴尬局面，也就是所谓的破局，理论？历史？案例？实践？文化？曾几何时，脑子灵光一闪，希望通过某个假想中的案例来阐述，从管理、文化、开发、协作、产品、生态、人才等多个角度来逐步细致将一个InnerSource贯彻到底。但是想法总归是想法，需要时间来慢慢的完善。难道是我的每周一篇文章时间定错了？还是应该将InnerSource单独拿出来，独立成系列？我陷入了思考和停滞状态。
但是，国人的思维是喜欢案例的！尤其是你出身于某个案例，因为保守，不愿冒险！好吧，思考归思考，材料还的积累。于是有了此文，尝试将现有的InnerSource案例整理出来。
InnerSource 案例 在一个普遍推崇模仿、山寨的文化中，谈案例是最受欢迎的，我也顺着这个思路来写一篇试试水，以实际行动来验证下。
InnerSource 正如我在上一篇文章中所提到的，不是什么新的概念和实践，而是有很多学界和厂商都在研究、运行，下面笔者就列出一些业界公开的案例。
PayPal PayPal 是在2013年施行的InnerSource，主要是内部的开发效率遇到了严重的问题，由于PayPal是一家跨国公司，各个国家的清算情况又不尽相同，于是牵扯到沟通、协调、覆盖代码等问题，在施行InnerSource之前，PayPal施行过两种办法：自顶向下的强制和驻场。最终证明这都不可行。
PayPal从开放源代码软件中汲取了灵感，尤其是来自Apache软件基金会的实践。他们发现了开源软件的组织原则，即每个项目都有各个金字塔的层：用户，在最底层；贡献者；可信任的提交者；最上层是架构师／开发者的领导者。PayPal评估了这些个情况后，作出最大的变化是引入“可信任的提交者”角色。
从2015 年开始，PayPal 在InnerSource施行成功之后，开始了他们的积极推广之旅，成立了InnerSource corporate-vs-community-better-open-source 社区，每年做一次InnerSource的调查，并组织面向全世界的InnerSource峰会。
PayPal 自身是InnerSource的积极受益者。这点是毋庸置疑的。当然这也得感谢PayPal的技术带头人：Cedric Williams。
沃尔玛 沃尔玛给人的感觉，和领先的IT技术似乎无关，但是，沃尔玛一直在电商方面努力着。技术方面从eBay挖来了Jeremy King，Jeremy King上任以来就在推行InnerSource，在一篇报道中指出： &amp;gt; 沃尔玛的研发团队有一千多人，他们每个月要做约30000次代码部署，但是King仍认为他们只是“世界上最大的创业团队”而已，因为有的公司做一个项目可能就会要上千人了。沃尔玛的一千多名研发工程师分布在约100个小组中，每个小组有10-20人，开发、构建、测试和部署等全部由小组自行负责，以DevOps模式工作。尽管大家的工作模式都是持续集成、迭代开发，不可避免地有时候某些团队会由于任务过多而成为瓶颈，这样在小组之间可以共享、开发和贡献代码就非常重要，可以在某种程度上避免这样的“单点故障”了。King举例道，比如某个工程师需要能连接到支付网关上，但负责支付网关的团队手上已经堆积了5个更重要的项目了，没时间做这个。在这种情况下这个工程师可以自己把相关功能实现了，然后再请支付网关团队的人审核通过，就可以了。或者比如说一个支付团队的工程师对于购物车等功能忽然有了什么新想法，那他就直接简单的作出原型来，然后通过GitHub提交给对应团队就好了。
InnerSource除了让沃尔玛的基础设施及时的赶上时代，还为这个传统的零售业巨头吸引人才提供了很大的契机：
 沃尔玛推行开源的开发方式之后，对开源社区成果的使用和回馈行为还帮助他们吸引了许多技术人才。在他们准备录用的候选人中，50%手中还握有Google、Apple、Facebook、LindedIn或其他硅谷著名公司的Offer，可是最终这些人中有70%还是选择了沃尔玛。King把争夺人才胜利的原因归功于两点：一是小而专的团队，二是开源。“大家都对我们已经取得的成就非常赞赏，同时也希望如同在创业公司工作一样。”
 当然，沃尔玛也在积极的参与到开源中来，不仅鼓励工程师积极的参与到上游的开发中，还将内部的项目开源出来，如云管平台OneOps、Electrode移动开发平台。
AutoDesk AutoDesk 是一家专有软件公司，他们并没有任何开源方面的消息，但是设立了开源战略总监这样一个职位。我们的InnerSource也是从这里了解到的。
AutoDesk 的开源战略总监Guy Martin，Guy Martin的经历很有意思，早期在Sun工作，通过JavaCar项目认识了开源，之后在Motorola从事InnerSource的工作，为PHP和Scuttle等开源项目做过贡献。
GM在Autodesk的另外一部分工作就是负责企业内部开源。他表示，对于一个拥有超过150个产品的公司，合作开发在产品研发的各个阶段都起着非常重要的作用。同时，随着Autodesk的很多产品开始与云相关。可重用组件对保证用户体验变得十分重要。内部开源很好的保证了这些组件的开发进度和质量。
Google Google 向来是支持开源的，是少有的对开源有着执着情怀的公司。在开源界享有盛誉的GSoC，以及将开源放在战略地位的“开源项目办公室”。一个和开源有着如此渊源的公司，是如何实施InnerSource的呢？
其实，这是笔者照着InnerSource的理念为Google强加的，Google本身可能对这个概念并不感冒，至少没有过公开的表态。理由有2:
 众所周知，Google 全公司采用的是一个代码仓库！Google的所有员工都可以查看修改源代码。 在《SRE运维揭秘》一书中，作者谈到gRPC等项目的高效性，得益于不同部门的透明协作。  就凭两篇论文，就可以说明，Google内部对于开源方法论运用之娴熟！当然，这也和Google的文化有关，他们本身受益于开源，始终是开源的支持者。
其它 在IEEE的一篇论文：InnerSource —— 企业内部采用开源方法实践 中，谈到采用InnerSource的有飞利浦医疗保健、阿尔卡特朗讯、飞利浦研究院、惠普、IBM、SAP等，当然InnerSource本身的方法论也在不断的变化着，其实现在PayPal所倡导的，和当年Tim O’Reilly首次提出的概念已经相差很远了。
现在是云计算、大数据、人工智能的时代，这些曾经走上浪潮之巅的公司的案例相信很多人已经不怎么感兴趣。所以InnerSource也得与时俱进，增加新的内容，但是笔者更加的倾向于InnerSource的外延性更多了，更加的强调企业参与到社区上游项目的重要性，以及人才的管理上。
后续 InnerSource 已经发展为一个庞大的课题，开源之道会慢慢、逐步为大家介绍、引进，并分享业界的经验。下期我们聊聊InnerSource Common刚刚发布的《企业搞内部开源必须弄明白的几件事》。欢迎留言反馈。</description>
    </item>
    
    <item>
      <title>为何开发人员对开源青睐有加？ ————从匠人的“留名”自我意识说起</title>
      <link>http://www.ocselected.org/posts/opensource_culture/why_craftman_like_opensource/</link>
      <pubDate>Sat, 13 May 2017 05:12:26 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/why_craftman_like_opensource/</guid>
      <description>引子 这是一个默认开源的时代，GitHub成为”好基友”网约的圣地即为明证，遍地开花的开源项目早已说明此已成为主流。那么这就引入了一个问题，开发人员为何倾向于开源？为什么开源会成为主流，为什么那么多的开发人员愿意加入这支庞大的队伍。Ben Balter曾经在6种使用、发布、参与、支持开源软件的动机论述过各种动机。本文则试图从开发人员的自我意识，即“留名”的角度来尝试探索一下。
何为匠人？  具体来说，只要拥有为了把事情做好而把事情做好的愿望，我们每个人都是匠人。 &amp;ndash; 理查德.桑内特
 匠人，有着悠久的历史，从荷马史诗中咏叹的赫菲斯托斯，中国古代的鲁班等都是有记载的匠人。随着社会的分工，科技的发展，匠人其实已经超越职业这样一个范畴，匠人更加的赋予了诸如“用心”、“专注“、“优雅”、“耐心”等词汇来形容。总而言之是要把事情做好的那些人，可以是为人父母对待孩子的精心培养、可以是从事音乐事业的创作、也可以是一名挑战技术极限的武术家、也可以是为信息处理写出优雅代码的程序员&amp;hellip;&amp;hellip;
著名社会学家查尔斯.赖特.米尔斯曾说到：“把自己当作匠人的劳动者专注于工作本身；从工作中得到的满足感本身成为一种回报；在劳动者的头脑里，日常劳动的各个细节都与最终的产品相关；在工作的时候，这位劳动者能够控制自己的行动；技能在工程过程中得到提高；他们在工作中可以自由的实验各种方法；到最后，匠艺劳动中的内在满足感、连贯性和实验性将会变成衡量家庭、共同体和政治的标准。”
米尔斯的话确实是太过理想化了，但是我们不应该因此而拒绝它，而是应该追问。以Linux的开发者们为例，这些匠人们最初是被充满了质疑中走出来的，因为大家对此都充满了乌托邦式的忧虑。然而，从来就没有人鄙视过这样一个群体，而是视为异乎寻常的、边缘化的共同体。
Linux 的成功就是匠人的成功 Linux系统是一门公共的匠艺，Linux程序的内核是对所有人开放的，任何人都可以采用和修改它；许多人奉献了大量的时间去完善它。再去近距离的观察它，你甚至为发现它的非人格性。例如，在Linux的IRC里，你无法推断aristotle@mit.edu是男是女；重要的是aristotle@mit.edu对讨论有所贡献。邮件列表中会经常看到“你JB吃你自己的JB”，“这个问题太TM的乱了”，就现在的职业伦理来说，这对于在一家企业工作中是完全不可思议的事情。
然而，就是这个过去不被人们看好的操作系统，成为了现在互联网、云计算的基石。Linux现在几乎无处不在，从智能移动设备，到科学实验室，从物联网到大数据，无一没有Linux的身影。用成功二字来描述绝不为过，它体现的经济价值、社会价值，是毋庸置疑的。
而它的整个开发过程，正如雷蒙德在著名的文章《大教堂与集市》中所描述的，是完全“集市”的形式所创造出来的，来自全球各地的优秀工程师们，一个模块一个模块的逐渐开发出来的系统。
所以，毋宁说今天Linux的如日中天，灿烂夺目，是因为其背后的那些撰写代码、测试验证、框架设计等为了一个优秀的功能而努力工作的匠人们的成功。
匠人的留名史 制造者在物品上留下他或她个人的痕迹。在匠艺的历史中，这些制造者的标识不是墙上的涂鸦，通常是没有政治意味的，只是无名的劳动者镌刻在惰性材料上的个人宣言，表明“这件东西是我做的”，或者“我在这里，在这件作品里”，这其实等同于说“我存在”。 在《匠人》一书中，桑内特如是说。
留名其实对于国人来说并不陌生，连几岁幼童，刚会写自己的名字，就会在人们常去的地方，名胜古迹、旅游胜地，写上“xxx到此一游”的语句。文人墨客则是以咏诗作对来显摆自己，将“名垂青史”奉为圭臬，以著书立说为安身立命之根本。然而，手艺人、匠人在中国的古代地位是颇低的，但是多少也会首主流的影响，尤其是那些流传民间的故事，所谓的“流芳万世”，于是，这些心灵手巧的匠人们，会利用各种机会，将自己的名字，或作坊留在隐密处。比如宫廷的壶、瓷器、玉器等，就会留下内壁等难以发现的地方留下自己的印记。
根据弗朗西斯.福山在《历史的终结与最后的人》一书中所论述的，人的天性就是希望获得承认。这也是人类之所以能够进步的根本动力之一。而技术的发展史，毋宁说是一部奴隶的进化史，而以技术取胜的，往往也是希望能够被历史所铭记。那么在人类的历史上，匠人利用各种机会留名的事例不胜枚举。
开源项目是最好的自我意识展现地 匠人们唤起物质意识其中的一种，就是将自己——全世界唯一的标识，印刻到作品中。而伴随着全球互联网的崛起，拉近了人与人之间的距离。作为一流的程序员（现代的最具代表性的匠人），为了某种程度上，会渴望得到业内人士的认可，认可自己非常满意的成果。那么代码的每次提交，补丁的每次合并，赢得地球另外一个角落的人的赞赏，这就是开源所带给他们的空间和机会，没有比这个更能够让这样一个亚文化的群体吸引到人们的注意。
在这个行业之外的人们，在浏览网页时、即时聊天、在线游戏、各种app应用&amp;hellip;.是不会注意到后面的服务器究竟承载了多少技术人员的心血和结晶，更不在乎是否开源。然而，却是开源承载了几乎所有的这一切。Linux、Android、Hadoop、Docker&amp;hellip;&amp;hellip;无数的开源项目，无数个匠人打造了这一切。
只有开源才能让这些优秀的人们被世人所铭记和认可：“我存在！” 不是宅男就被世人遗忘！
你们使用的每一个应用，都可能在执行着他们的代码！比如Linux。
结语 人有其内在的需求，希望获得他人的认可。然而，人生在世非常的短暂，个人的渺小感常常被宏大的历史给淹没。留下点痕迹，至少我存在，或存在过。这恐怕是每个人内在最深处的想法，可能有些人意识到了，也可能有些人没有意识到。生在互联网时代的程序员、开发者们，不自然的会带着这样一个人类的共性。开源，无疑是他们能够发挥才华的空间。而不是将自己隐秘于某个商业公司中充满尘埃的磁带库中。</description>
    </item>
    
    <item>
      <title>社区胜过代码：如何建设一个成功的软件项目（视频推荐）</title>
      <link>http://www.ocselected.org/posts/opensource_culture/communities_over_code/</link>
      <pubDate>Mon, 10 Apr 2017 22:07:19 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource_culture/communities_over_code/</guid>
      <description>  注：本文整理自演讲，原视频见末尾。
 时间稍稍过去的久了一点，是去年（2016年）冬天举行的北美LinuxCon上，来自红帽的Joe Brockmeier分享了关于社区建设的真知灼见。但是，现在重新回顾和解读丝毫没有过时的感觉，恰恰相反，有种恰逢其时。开源渐渐的被本土的人们所重视起来了，那么其中的奥秘：“社区胜过代码”，还有什么比这个更能振聋发聩了呢？
自问 那些高效的、健康的自由开源软件项目是凭空产生的吗？当然不是，而是用心打造出来的，其中的秘诀就是 社区胜于代码。细节为王：假如现在你好不容易建设了一个社区，那么你如何保证它的进一步增长？你又该如何制定方向？如何吸引和留住贡献者？当社区的人们之间发生了冲突又该如何处理？尤其是那些贡献较多且有价值的人们吵起来了怎么办？
你所理解的社区是什么？ 在我们的日常生活中，我们几乎每天都能听到人们在谈论“社区”，比如有人把微信群也称之为社区，QQ群也有。但是这些真的就是社区吗？或者是和开源项目中所说的社区有什么区别吗？Brockmeier在演讲中是这么说的：“我曾经在多家公司待过，也见证过很多的项目，每个人在开始的时候都会问这样的问题“我们需要一个社区”，我一般是这么反问的：你需要一个什么样类型的社区？什么人对于你来说是最重要的？你希望你的用户关心什么？你希望你的开发者关心什么？你需要知道成功的社区是什么样子！正如你需要知道你项目的目标是什么 然而，这都视不同的情况而定。”
Brockmeier 举了一常见的例子：有些公司，是不在乎公司发起的项目有多少个非本公司的外部核心贡献者的，但是他们会非常在乎有多少用户。这很典型的说明了，如果你需要一个吸引用户的社区，就不能去按照吸引核心贡献者的思路去建设，二者完全是两回事。
秘诀就是：包容 任何一个软件项目，哪怕是规模很小的，都需要除编码以外的专门的角色担当。诸如代码审核、文档撰写、发现bug、修复bug、在IRC中活跃讨论的人、在论坛帮助其他人、打包者、系统管理员、市场人员、以及美工、搞音乐的等等。
吸引和留住贡献者，绝非是神奇而一蹴而就的事情，而是需要用心努力的去做很多工作的。
比如，要设置导师这样的角色，为新的贡献者提供指南，就是非常不错的良策！从所有的贡献者面前坦诚所有的贡献！确保所有的交流和决定都是公开的，而不是在某个小组中。
Brockmeier 特别推崇Apache软件基金会的原则：“凡事没有在邮件列表中讨论过的，就当没有发生过。” 人们不应该私下去做影响整体项目的决定，或者是悄悄的去实现它，都是不对的。
对贡献者的认可至关重要，作为社区的建设者，你需要能够从众人中有效的识别出那些真正的贡献者，这可能需要一点时间来决断，不是说某种市场活动，而是那些实打实的，如每天在IRC上帮助人们解决问题的热心贡献者，有的甚至是开发者们会忽略的部分。你必须掌握这种有效识别贡献者的能力。
更多内容，还请仔细观看视频：Brockmeier 还讲到了lazy共识、行为准则、设定衡量目标、有效治理、包容、多样性等等。以及如何处理那些找麻烦的贡献者（比如：没有离了谁，地球就不再转动这一说）。
 </description>
    </item>
    
    <item>
      <title>开源软件是开放式创新的最佳注解</title>
      <link>http://www.ocselected.org/posts/the_way_of_open_source/naming_opensource_and_marketing_2/</link>
      <pubDate>Thu, 26 Jan 2017 21:02:38 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/the_way_of_open_source/naming_opensource_and_marketing_2/</guid>
      <description>想象一下几个世纪之前，科学是如何被信仰所感知的。科学在一开始被认为是信仰之外的东西，受到宗教的残酷打击和压制，这样的情形就像是现在的软件公司对待开源软件的工作一样。其实正如科学不会破坏宗教制度一样，开源也不会粉碎现有的软件系统，开源旨在开发出更优秀的软件而已。 ———— Linus Torvalds ，Linux 创始人
 某种程度上 Linus 的此番话语，在今天看来已经实现了。
写在开始之前 其实我最初构思这篇文章的时候是想为文章《为开源和商业正名》做一篇续作，因为那篇文章虽然说是一气呵成，但是我本人觉得并不满意，后来也没有人和我辩论，然而我却一直在思考，上篇文章说的更多的是市场术语，商业上的成功案例等，而阅读我文章的人，大多是技术出身，不屑于这些，所以我尝试换一个角度去论述：“为什么开源会逐渐成为主流（显学）？”也就是创新的角度。
另外要提及的一点就是，其实引发我作出辩解的是对于开源商业上的误解，对于误解本身，得上升到社会、制度、历史、习俗等来解释，此处仅提及一点，那就是可口可乐式秘方文化在其中作祟。限于篇幅，我又不能偏离技术去批判文化与世俗，所以针对此我只想引用一句王小波的话来说明：
 “身为一个中国人，由于有独特的历史背景，很难理解科学是什么。我在匹兹堡大学的老师许倬云教授曾说，中国人先把科学当作洪水猛兽，后把它当作呼风唤雨的巫术，直到现在，多数学习科学的人还把它看成宗教来顶礼膜拜，而他自己终于体会到，科学是个不断学习的过程。” ————王小波《生命科学与骗术》
 何为开放式创新？ 开放式创新，由加州大学伯克利分校的教授 Henry Chesbrough 在《开放式创新：新的科技创造盈利方向》（2003）一书中提到。
“开放式创新是指公司利用外部思想进行创新，拓展科技。”或者指&amp;rdquo;与合作伙伴一起创新，分享风险，分享盈利。&amp;rdquo;公司和周围环境之间的界限变得模糊，创新可以在公司以内和公司以外进行。开放创新的核心思想是世界上充满了知识，公司不需要完全依赖公司内部进行科研，可以把创新进行授权(如通过专利)给其他公司。另外，公司内部不能进行的创新可以在外部进行(例如通过授权、合资公司、资产分拆)等。
随着时间的推移，开放式创新逐渐被人们所认知，开始有很多人研究了起来。近年，开放式创新的学术研究，逐渐增多，其中对于开源软件的研究也有人开拓先河。如Joel West 博士的研究成绩。而其中开源软件是开放式创新的绝佳注脚。
开源软件的创新实例 创新的理论，和很多艺术的批判总结一样，都是事后的总结。开放式创新似乎也难逃其咎，开源软件在今天已经用事实证明开放的力量是足够的强大。我们就以下面几个事例来旁证一下。
1999年 IBM 投入 Linux IBM 当年在PC失利之后，以谁说大象不能跳舞的姿态转型服务的时，其中就有一项相当有魄力的决定：所有的硬件平台和中间件、数据库产品均开始支持Linux，并提供完全的服务。并投入大量的人力和资金，不仅对Linux本身的开发，还有修改所有软件均支持Linux 的移植。这一决定现在看起来仍然是及其明智的。不仅给IBM带来了直接的经济利益，也为日后的产业标准、开源战略奠定了基础，如后来的WebSphere市场占有率和Eclipse的成功。即使在互联网迅猛发展的21世纪头10年，IBM仍然是IT全面解决方案的龙头，其中尤以产品线全面支持Linux为特色。
Mac OS X 的发展史 我们知道Apple公司的操作系统（MacOSx、iOS、tvOS、watchOS等）核心均来自一个项目，那就是大名鼎鼎的 Darwin，而Darwin的历史要追述到1989年，史蒂夫.乔布斯被赶出苹果创建NeXT公司开始说起，最初的名称并不叫做 Darwin，虽然一开始就借力 BSD，但是直到1999年才明确下来，整个MacOSX ，内核等主要技术使用BSD衍生技术，只有图形界面采用闭源的方式开发。
浏览器 Safari 的演变 在1997年之前，Apple的 Macintosh 上可以运行的web浏览器是网景和Cyberdog，之后就是微软的IE统一这Mac的天下，直到2003年， Steve Jobs 声称Apple将自己开发web浏览器，不再受制于人。但是Apple并没有重新制造轮子，而是使用了著名开源KDE的称作为 KHTML的渲染引擎（webkit）开发的，一直沿用至今。Apple也一直以后都是webkit的主要贡献者之一，而现在的Safari 10 已经走过了13个年头，并稳居浏览器市场的前三。WebKit也是Apple 移动端操作系统iOS主要使用的技术引擎。
当然，WebKit 也因为有了Apple的加入和反馈而彰显更强的生命力！
Google TensorFlow 的开源之路 Google 的云计算平台在商业营收上始终差了AWS一大截，但是Google的自信来自于对自己技术的高度认可，认为争夺下一次的优势在于人工智能，于是在2015年11月9日，毅然决然的将旗下深度学习项目——TensorFlow 开源，并采用科学的社区管理模式，挖掘开源界人士，一年之后，硕果累累：
 在GitHub上超过3000多个相关项目，其中Google发起的只有5个。 澳大利亚海洋生物学家利用TensorFlow进行搜索海牛海量识别 日本农民来识别优质黄瓜培育 放射科医生将TensorFlow应用于医学扫描，来识别帕金森病的症状。 &amp;hellip;&amp;hellip;  在人工智能深度学习领域，Google拔得头筹，可以看一张类似项目的对比情况：</description>
    </item>
    
    <item>
      <title>开源之道与开源之术</title>
      <link>http://www.ocselected.org/posts/opensource/open_source_tao_and_way/open_source_tao_and_way_0/</link>
      <pubDate>Sat, 07 Jan 2017 14:24:46 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/opensource/open_source_tao_and_way/open_source_tao_and_way_0/</guid>
      <description>引子: 何谓术？何又谓道？ 哲学上讲究名与实，最令人类头痛的问题之一就是沟通，不然也就没有巴比塔这么传神的故事了。历史上光是正名的人就不计其数。这也是苏格拉底当年极力排斥文字的记录，然后，柏拉图还是背叛了他。
当下的信息社会，充斥着太多的知识与无用的信息。沟通的障碍也越来越重。是否有必要解释题目了呢？其实，我的每一篇我个人以为蛮重要的文章都会去解释题目。这次也不例外。
这里的道，指的是孟子的“道可道，非常道”中的道之意，抽象的试图诠释人类最自然状态的思想。可以作人性、自由、民主等多种释义。尤其是黑格尔所说的人之所以为人的与动物的最为根本的区别，也是尼采所描述的“红脸颊野兽”。
所谓的术，是指方法论，笛卡尔、培根所发展出来的科学的方法论，也是胡适所谈到的“少谈些主义，多研究些问题”、“大胆的假设，小心的求证”等较抽象的，也可以具体到Eric S.Remond的《大教堂与集市》、《Unix编程艺术》等方法和现象，当然，也可以说成是《社区的艺术》等具体的办法。
开源，本来是指软件的一种生产方式、传播渠道、发行的办法，就是所有的生产流程、原始代码、方法等都是公开、透明，让所有人都可以平等的获取到的形式。从上世纪80年代，一直发展到现在，渐渐成为了信息时代的中流砥柱，尤其是近来崛起的以云计算、大数据、物联网、机器学习等信息技术为契机，开源迅速占领整个世界，由亚文化华丽转身，走进人们的视野，并影响到其它产业，如教育、政府、法律、生产制造等。
开源之道  “Open source is a development methodology; free software is a social movement.”1
 ---Richard Stallman   就现在可以搜集到的信息而言，论开源的历史，先回溯到Linux的发展，然后会谈到GNU，继而谈到Stallman——最后的hacker，然后是麻省理工的“火车俱乐部”，大型机时代的hacker英雄们。
发展的根本，就是对绝对自由的追求，妄图在现实的叛逆之中寻求独特的出路，摇滚乐、公路、毒品的嬉皮士文化难掩对抗权威的星星之火。发展的源头乃是对于自由的追求，道德上至高无上的哲学。以FSF的成立，GNU许可证的发布，Free as a Freedom为口号的代表。
别忘了，世界的道，从来不是一个维度，另外一个重要的维度就是经济。以资本主义的成功，物质的不断丰富为象征。道德的力量难以撼动。这时出现的以 Linus 、Eric.S.Raymond 为代表的妥协派，只要我的技术对大家有用，认可我的能力，随便用，哪怕是被资本家嗅到了浓浓的铜臭味，也毫不在乎。
作为开源技术发展的相辅相成的重要支柱————社区，在互联网的大潮下，成就了以个人英雄主义赢得世界名声的机会。以Apache基金会、Linux 基金会为代表的商业氛围更加浓厚的社区文化，渐渐走近人们的视野。打破IT巨头的垄断，以Google、FaceBook、Netflix借开源崛起的互联网公司为代表。开源成就了今天的燎原之势。无处不在！
归根结底，开源之道就是，追逐自由、质疑威权、叛逆和打破常规、以及人性被平等待遇、承认等一系列的现象可解释。
但是，这里的道是禁忌。笔者无能也无力去谈道，唯一的路就是谈术。
开源之术 既然是方法论，就是一些技巧，放弃考察一个人的思想、背景、信仰等因素，而教之以方法、技巧。类似“授人以鱼，不如授人以渔”中的钓鱼方法，而不是说这个人具备反思意识，会质问为何我只有鱼这么一个范围？我为什么不能跑到深山？抑或是森林？生存！
开源已经有大约30多年的历史了，其中不乏成功的项目、社区、产品、商业模式，那么就会有有心人出来总结、观摩、探索。这方面的鼻祖莫过于 Eric.S.Raymond 所写的文章《大教堂与集市》（后来总结为图书），Raymond 观察了Linux的成功，并根据自己的实践——邮件客户端程序为例，来亲自验证这一猜测，最后进行了总结。那是1999年的事情了，作者还参与了当年轰动一时的 Mozilla 开源过程。后来开源的历史越发不可收拾，“非开源，不软件”成为很多软件从业者的口号，也受益匪浅。
术，是可以学习的，前人实践，后人总结，不断积累，也是科学的道理。笔者斗胆整理了几个类别。暂时没有固定的框架来约束，可能之间还会有所渗透。如下：
 开源文化现象，比如激励 开源商业模式， 开源社区治理 InnerSource 企业内部采用开源 科学的参与社区 如何防止破坏开源  也就是希望通过方法论来影响到项目的成功，以系统思维来思考，一件事物的出现一定有其特定的意义。软件项目经过实际验证，是非常困难的巨大工程，失败的风险很大，软件史上也不乏失败的案例，其中协作、沟通等非技术因素亦是非常关键的，相应的制度约束、晋升机制、知识传播等等需要认识和总结。另外就是，开源是如此的重要，以至于多数企业已经采用了大量的开源软件，那么内部如何和上游沟通？如何平衡自己的人力投入？如何面对恶性挖人与员工署名问题？招聘的人才究竟喜欢什么样的氛围？工程师、开发者又该如何判断一家公司是否对开源有诚意？
上述这些问题就是“术”，也是本系列文章所要一一解答的内容，笔者准备花一年的时间来将这些事情给捋清楚了。举个例子，商业模式可能是很多人所关心的，那么软件源码开放是否还有利可图？
 商业模式举例
这是现代很多人都在思考的问题，如何利用开源项目来赚钱？红帽开创的订阅模式，一举将自己推到第一家开源盈利的企业级公司，WordPress背后的故事，依靠托管、SaaS的模式也占取了一片天地、Cloudera 似乎也赶上了大数据的头班列车，从Hadoop的生态系统中脱颖而出、Firefox依靠互联网巨头们的赞助勉强前行着、围绕OpenStack 形形色色的创业公司、Intel大力支持开源为自己的芯片拓展更多的道路&amp;hellip;&amp;hellip;
人类的创意无穷无尽，有太多的可能性。在资本横行的时代，只要有钱赚的地方，就会有无数的人去挖掘。
人，毕竟是要吃饭的，富足、更加的物质，也是这个世界发展的主要动力之一。哪怕是再恶劣的社会、政治环境，只要有一条路是鼓励发展经济的，那么就会有很多的奇迹发生，然后也会反过来在推动需要更强的经济的文化、社会环境。
开源的商业模式，是非常具有魅力的一个挑战！正如现在的人们进入快速阅读、电子阅读时代，独立书店的经营模式也在作出相应的变化，虽然相比过去要艰难很多，但是总能找到属于自己的利基市场。
  http://www.</description>
    </item>
    
  </channel>
</rss>