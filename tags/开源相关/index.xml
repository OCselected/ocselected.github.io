<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源相关 on 开源之道</title>
    <link>http://www.ocselected.org/tags/%E5%BC%80%E6%BA%90%E7%9B%B8%E5%85%B3/</link>
    <description>Recent content in 开源相关 on 开源之道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016, 适兕; all rights reserved.</copyright>
    <lastBuildDate>Sat, 20 May 2017 14:27:41 +0800</lastBuildDate>
    
	<atom:link href="http://www.ocselected.org/tags/%E5%BC%80%E6%BA%90%E7%9B%B8%E5%85%B3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>成为开源软件供应链本身——学习为什么应该成为供应链的强有力的影响者</title>
      <link>http://www.ocselected.org/posts/supply_chain/be_opensource_supply_chain/</link>
      <pubDate>Sat, 20 May 2017 14:27:41 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/supply_chain/be_opensource_supply_chain/</guid>
      <description>在真正的开源当中，你拥有掌握自己命运的权力。 &amp;ndash;Linus Torvalds
 我敢断言：能够管理和影响开源供应链，那么就为创建最具创造性的产品获得了有利地位。本文中，将解释为什么我们应该成为供应链的影响者，以及如何在供应链上下游中进行积极的参与。
在上一篇文章：开源和软件供应链中，探讨了供应链管理的基础，以及将开源套进这样的模式中来，并对开源的软件供应链使用了如下图所示的诠释：
那么问题来了，该如何做才能够从这样一个链条中获得最大好处？因为我们可以看到 Apple 通过创建优秀的硬件供应链，获得了很大的竞争优势，那么我们一定可以从软件供应链中获得同等的效果的。
评估供应链 曾经在多家公司和开发团队、产品团队共事，我了解到，选择进入产品的组件的过程是偶然的。有时会遇到一、两个其中的组件相互排斥的情形，但是我们的开发者通常是靠“感觉”来选择其中的进入产品。在决定最佳组件时，你必须基于这些项目的生命周期、开发的阶段、以及其它重要的指标来进行评估，进而决定是自行构建还是购买。还有一些重要的会影响决策的因素，如：
 用户的数量 有意思的发明 商业活动 开发团队的参与和支持 &amp;hellip;&amp;hellip;  随着时间的推移，技术和业务均需跟上时代的节奏，在开源软件的世界，道理也是一样的。工程和产品团队不仅可以选择当时最好的组件，而是要紧跟步伐，当出现变化时，能够及时、敏锐的切换到更优秀的组件上，举个例子，当社区所管理的旧的组件被移走时，或者是有更加卓越的新的组件被创造时，就会出现这样的情况。
禁忌 在评估供应链组件时，有些团队容易犯一些错误，比如下面常见的：
 自行蒙头搞发明（NIH）：我没法告诉你，该何时去修复现有的供应链组件的问题，又或者是何时重新制造一轮子。我也绝不会说从来不要那么去做。我这里要说明的情况是，假如读者您独自承担了编写基础架构组件的责任，那么你要明白一件事，那就是正在将开源供应链的所有优势推掉，诸如上游的测试、上游的工程能力，都一点也用不着了，而且让您的团队在背负技术债务（产品亦是），这些债务会随着时间的推移了翻倍增加。这样做的话，效率会相对底下，除非你有更能说服他人的理由和实践，否则的话，听我的，千万不要这么干。 将补丁攥在自己手里：任何懂的开源的人都能够理解为各自的上游社区贡献补丁的价值所在。当真正这么去做的时候，贡献代码本身就会贯穿该项目的自动化测试的流程，当这与现有的测试基础设施架构相结合时，可以对最终的产品质量进行进一步的改进。然而，现实的情况是，不是所有的团队都真正的懂开源。比如，有的时候，团队面临公司内部苛刻的法律要求，使他们没法为上游贡献，无法获得许可。在这种情形下，我的建议是大力说服你的经理去申请允许这一切的法律许可：理由就是如果不把这些变动提交到上游，攥在自家手里，就成了沉重的技术债务，会付出惨重的代价，甚至是可能引起项目的失败的重大原因。 想着只有自己一个用户：使用开源组件仅仅是软件供应链的一小部分，要获得更大的开源供应链的回报，您必须融入开源并成为其有力的影响者。  有效的供应链典范：红帽 红帽是当仁不让的既利用了开源又在开源有着独一无二的影响力的公司，以它为例，概莫能外，而这其中的诀窍就是：上游优先策略。若要深入理解红帽的模式，我们必须通过供应链的视角来审视红帽的产品。
由红帽所支持的产品，均是多个开源组件的组合，且来自不同的上游社区，红帽会对所有这些组件的更改都推送到上游的各自的项目中，而这有违人们直接的是，这些都是在红帽正式发布产品之前进行的。大体的工作流程示意图如下：
红帽之所以这么做，是有充分的理由的：
 测试、测试、测试：通过将最初的一些测试分担出去，像诸如红帽这样的公司可以获得两方面的好处：一是上游社区的测试，而是能够获得其它生态的支持，包括竞争对手。 上游可行性：只有上游社区是正常运转并自给自足的，红帽的模式才是可行的。因此，红帽必须确保上游的社区是健康运转的。 工程效率： 因为红帽将很大一部分工作分担到了上游社区，他们的工程师可以将更多的时间花在为用户生产更多的增值产品。  关于红帽供应链采用的方法的理解，我们得从具体的项目和产品来入手，比如其OpenStack的开发和上游参与。
红帽的做法是一番常人的思维的，红帽开始启动OpenStack的时候，并不是从产品开启的，甚至都没有做过任何的声明，而是在OpenStack的项目（如具体的Nova、Keystone、Cinder）上投入了大量的资源，并随着时间的延伸，并扩展到OpenStack社区其它的项目中。这样的做法对于很多传统的产品经理是不可思议的：“这个地球上还有人在没有创建任何产品的情况下就贡献大部分的工程资源？为什么要为竞争对手免费做大量的工作？”
那么，以下就是开源供应链思考的流程：
步骤一 紧盯着业务的增长领域，然后想想做什么样的产品能填补缺口。问自己的问题：开源社区能否将这个坑给填上？或者说我们从头开始构建一个产品做来满足用户？ 正是基于这样的考虑，红帽将宝押在了OpenStack社区，并最终确定采用它来填补产品组合的空白。
步骤二 逐步的投入工程资源。这需要分作几步走，首先，它能够帮助到工程团队去准确的理解项目前景，假如说前景比较暗淡，公司可以决定停止贡献，而这只会有少量的投入。第二，如果工程团队的结论是前景光明，那么公司的投入，可以确保自己雇佣的工程师对于项目是有影响力，并会影响项目的未来。这有助于项目的高质量的代码开发，并确保代码满足未来的产品要求和验收标准。在宣布OpenStack产品之前，Red Hat花费了大量时间在OpenStack存储库中审核代码，而发布则更为滞后。换个角度讲，相比这是从头开启一个项目的话，那么其开销和如此的开源上游投入相比，简直是大巫见小巫。
步骤三 一旦开始了工程资源的投入，红帽就可以就会启动产品管理的路线图和市场发布计划。当代码达到最低质量标准时，就会从上游仓库fork出分支来，然后开启产品化的开发和强化。Bug的修复均会直接在上游openstack.org上提交，同时也会合并到产品化的分支。（要记住：红帽的模式严重依赖于上游的可行性，所以他们不会不把代码提交到上游。）
优化、试错、然后重复上述步骤。这就是所谓的如何管理开源软件供应链。
不要拖欠更多的技术债务 如果需要的话，红帽会尽可能的减少对上游的依赖，提供一些必要的专有的产品的黏合剂，从而发布其产品。其实，说实在的，就是这么个道理，有太多的公司视而不见，虽然他们也是同样直接采用了开源的代码。想要开发优秀的产品，能够积极的参与到整个开发过程是绝对必要的。我们可以逆向思考一下：如果一个组织不去参与项目的日常架构讨论，这个组织如何确保代码库符合其核心产品标准？
大多数情况是更为糟糕的情形：从上游fork代码，然后基于此进行更改和开发，但是不会将之合并到上游，那么为了向后的兼容性以及业界的互操作性，那么这些变更就得自己来维护。这是一个非常严重的错误，这会将工程团队陷入深渊，随着时间的推移，所负的技术债会越积累越多。在此情形下，上游所有的测试、开发和发布的内容都成了可望而不可得的收益，只能眼巴巴的看着。
红帽和 OpenShift 如果读者您现在开始对于红帽的开源软件供应链有了一定的认识和理解的话，那么从上述其对待OpenStack的策略来推演，理解起来OpenShift就更加的轻车熟路了。红帽发布OpenShift商业版时，其对应的开源版本是先行发布了的，而这个开源版则来自于红帽在2010年收购的一家叫做Makara的公司所开发，当然，红帽还做了团队的融合过程。
从技术上来说，最开始的时候，OpenShift完全是自己搞了一套集群和容器管理技术，即上文提到NIH，但是后来（最近特火爆）一些新的开源项目发展起来了：Kubernetes、Mesos、Docker等，那么接下来发生的事情，则充分说明了红帽公司对于开源供应链独特的理解（和一线工程师对于技术的敏锐：译者黑心添加）：在OpenShift版本2到版本3之间，他们做了一个重大的决定，彻底重写，以利用新起项目Kubernetes和Docker的优势，融入、参与这些社区，将NIH方法彻底废弃。通过这样的方式重构项目，红帽公司有效的利用了这两个项目开发人员社区不断增长的规模经济。
红帽聪明的做法在于，此时并没有选择将整个的 OpenShift 栈的 QC／QA 环境都自己搞起来，而是将底层的基础设施组件Docker和Kubernetes利用起来，囊括进来，因此，Red Hat开始对Docker和Kubernetes的代码库进行积极的贡献，在这些组件达到公司自己的产品分支之前进行几轮测试：
 第一轮的测试由 Docker 和 Kubernetes 社区来进行的。 进一步的测试，则是由基于同样基于这两个项目做产品的生态的参与者来完成的。 下游代码分发或“嵌入”两个项目的产品都会发生更多测试。 最后才是红帽自己产品分支的测试。  （对于红帽的情况）将代码交给上游来进行测试，不仅确保了最终产品的质量，还大大节省了公司的成本，可以想一下公司若是从头自行来过的话，这是一笔多大的投入。而这恰恰是开源软件供应链的精髓：不要仅仅去消费上游代码，然后将之微调成为自己的产品。如果你不去这么做的话，你无法获得开源开发实践所带来的益处，也无法去直接参与去解决你客户的实际问题。</description>
    </item>
    
    <item>
      <title>开源和软件供应链</title>
      <link>http://www.ocselected.org/posts/supply_chain/opensource_and_software_supply_chain/</link>
      <pubDate>Thu, 18 May 2017 21:50:38 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/supply_chain/opensource_and_software_supply_chain/</guid>
      <description>如何有效利用开源社区的资源来进行软件生产（开发）。
 掌握硬件供应链及其管理的细微差别是显而易见的，其实就是在追踪一些移动的箱子。那么在开源社区，利用人们所贡献的资源来开发相应的软件，则显得摸不着头脑。
我在写作如何利用开源来赚钱的文章的过程中，在思考这开源平台和供应链，那时，我认为供应链是一个单一的流程，使用现有的开源组件，然后基于此生产出一个结果来，这就是通常所说的软件产品。从那之后，我细心的观察并思考开源生态系统的供应链，发现远远不止一个，错综复杂。然后发现，那些懂得去管理和影响供应链的要比不理不睬的更具有竞争优势。这就值得我们进一步的挖掘。
软件供应链如何运作 在硬件的世界里，供应链和组件采购对于业务来说是必不可少的一环。能否管理一个良好的供应链，对于企业的成功是至关重要的。如何确定较为理想的定价？如何与正确的制造商构建良性的关系？如何最大化的提高供应链的效率？以达到能够以最便宜的成本，生产并销售更多的产品。Apple公司的供应链是业内顶级的典范， Apple是第一个意识到建立有效的零部件供应链是制胜的关键的公司，就在硅谷的绝大多数公司都在自己蒙头制造零部件的时候，Apple已经先行一步了。
当时整个计算机界都在嘲笑Apple，称其为“营销公司”，因为它不制造任何零部件。到如今，每家硬件公司都有着广泛的供应链，而且会致力于不同的团队来管理它的方方面面。再回到Apple，令人大跌眼镜的是，它在供应链物流上的创新要比实际的产品更胜一筹。或者换个角度来理解Apple的供应链，其在供应链物流方面的创新为Apple在推出创新产品提供了卓越的支撑平台。
让我们将视线拉回软件界，相对于硬件的供应链来说，软件就简单多了。硬件的供应链则是来源于不同地区的许多不同合作伙伴的零部件，传统的软件供应链大多定义了内部制作软件的过程，以及通过商业许可协议的供应商所提供的一些第三方软件。在此模式下，供应链的大多数来源被定义为公司内部，最多是由多个工程团队构成。来自公司外部的软件仅占其中一小部分，供应链的定义主要由内部产品管理和工程团队负责。是的，来自第三方供应商的许可软件在产品组装时需要许可证合规性检查，这意味着获得任何软件，都需要得到许可协议的合法许可。这个过程与常规做法是完全一致的，许多许可协议源于法律和产品管理团队经历的同一法律模板，但是随着开源逐渐成为主流，这一切都被颠覆了。
我们从一个简单的，定义明确的示例来看软件供应链，是这样子的：
那么开源的情况则是混乱的：未经验证的许可证、未经测试的软件仓库、以及狂野的西部牛仔（开发者），这一切所导致的软件供应链看起来似乎是不可管理的，漏斗的形状更像是这样：
正如您在上图中所直观看到的一样，至少开源导致了一个额外层次的增加。
或许你并不这么认为，而是说，将开源组件简单的插入产品中，和过去授权插入第三方的组件没有任何本质上的差别。这里要说明的是，虽然看起来没什么大的变化，但是有一个隐性的知识需要考虑。关于上游的开源组件，多数的源代码仓库时候是没有任何的商业保证的。作为供应链或产品经理，最不愿意的事情就是被别人掐住喉咙，一旦出错，是无法补救的。
此时，您有两个选择：
 建立自己的内部审核代码和应用产品管理流程的方法。 依靠中间厂商来完成这个事情。  当选择1时，您需要自行从上游拉下代码、确定合法合规、构建流程、应用补丁、为自己的产品准备好，似乎一切都很美好，但是对于人力资源来说，这太过于昂贵。
作为高管的你，是否采用1的流程，应从公司战略的重要性和ROI（投资回报率）进行认真的分析：如果为某些软件组件建立一个团队，来管理整个流程，那么这样做有足够的投资回报吗？
举例 在许多情况下，公司决定与中介机构一起审查代码，执行一些质量保证工程，当然，必要的时候也会采用非常规策略，来满足最终的产品需求。这就是软件发行版存在的理由，它们背后的商业公司有：红帽、SUSE和Canonical，很多人都会产生疑问：这些公司有存在的必要吗？是的，这个问题回答起来不太容易，但是从软件供应链的角度来讲，如果没有这些公司提供的发行版，整个Linux的世界将是灰暗的。
可以想象一下没有如红帽企业级Linux（RHEL）或相类似的发行版，一家公司开发产品，将不得不把所有的上游的项目整合进自己的流程，审核代码，并招聘业内顶级的专家来增强它们，然后再将它们集成起来，经过这一系列的过程之后，方能够发行然后将产品推向市场。也就想象一下就可以了，聪明的公司都会决定，让这些发行版公司做他们该做的事，这样会省去非常大的一笔投入，而且可以聚焦精力做其它更重要的事，也更有效率。
另外，以上所说的还是开源“用户”的情况，还不是供应商。以下才是真正有趣的地方。先问自己一个问题：在自己的产品中使用了或者插入了开源代码，要想成为供应链的影响者或供应商，最好的方法是什么？一个潜在的结论是，要在开源产品方面取得成功，必须掌握影响和管理最终在产品创建过程中汇集的各种供应链的能力。一旦完成这点，最终的产品则会大大受益，即上面图“漏斗”中左边的 上游参与。
不要去维护一组标准的补丁，而是将这些补丁持续的贡献给上游。因为贡献给上游，会省去公司内部很多的资源，而是让整个社区即外部资源来维护。如果你已经作出了决定，认为使用下游的软件发行版要比自己采用和审核源码更加的容易的话，那么问题来了，”这时我如果在上游贡献代码，但是我又和发行版厂商进行了合作，那么还能享受到上游的好处吗？”答案是显而易见的，这样做可以帮助其他组织管理和支持维护此代码的附加优势，让您的工程师们能够开发直接为您的产品带来价值的有趣的东西。无论你是售卖软件、售卖软件服务、还是创建开源社区，用心专研你的供应链，并学习其最佳管理方法，这绝对是值得投入时间去做的事情。
硬件供应链，是基于实际物理物体的，相比于软件的供应链，更加的静态。那么对于开源软件供应链来说，则是更加的灵活多变，会随着时间的推移，越来越式微，无论你在项目中身处何种角色：商务人员也好，开发人员也罢，甚至是社区经理，必须决定那些值得投入时间和精力，发现错误能做到及时减损，并及时的切换到其它的供应链。在项目启动的时候，所使用、修改、和创建的组件都将依赖于供应链的状态，其中的过程，有主动，也有被动。必须积极主动地决定对哪些供应链进行投资，哪些应该忽略，同时对依赖生态系统的快速变化作出反应。那些掌握这种艺术的人，在理论上拥有最佳实践，方可能像Apple公司一样，最终将赢得胜利。但期望归期望，具体的实现效率还要看水平，也就是说工程团队要更具创造力。
结语 如果你想有效的管理软件组件的供应链，同时所建造的高效的供应链“漏斗”，——能够在正在开发的产品上进行快速迭代，产品创建和管理流程将会得到大大的改善。这种管理需要资源投入，不仅仅是您的产品的质量保证体系和供应链“漏斗”，而且在供应链中所使用的组件，用来直接创建产品。
关于作者 John Mark Walker 是 Dell EMC 的产品管理总监，负责管理ViPR 控制器产品，以及CoprHD开源项目，他也是资深的开源社区活跃者，如ManageIQ、Gluster、Hyperic，乃至过去的SourceForge。
关于激进的言论，请关注他的Twitter：@johnmark，他也有领英账号：johnmarkwalker，也不定期的会更新自己的博客：johnmark.org。
John Mark 经常在各个开源技术会议上做演讲，并有优秀的论述开源的文章，如根本就不存在开源社区、永远不要搞创新、逝者如斯：写在VA Linux IPO 十年之际。
英文原文：Open source and the software supply chain ，开源之道精心翻译出品。</description>
    </item>
    
    <item>
      <title>这次我们谈谈开源项目得道者多助的Ubuntu犯下的人心不足蛇吞象的严重错误</title>
      <link>http://www.ocselected.org/posts/supply_chain/supply_chain_case_study_ubuntu/</link>
      <pubDate>Tue, 02 May 2017 18:25:31 +0800</pubDate>
      
      <guid>http://www.ocselected.org/posts/supply_chain/supply_chain_case_study_ubuntu/</guid>
      <description>编译者按 John Mark 先生写了一系列关于开源软件供应链的文章，开源之道打算逐步译出，本文则是系列的中文首篇，其余按排期，稍安勿躁。且并没有按John的顺序，而是先选择了反面的案例，一来是Ubuntu母公司 —— Canonical近来高层变动、产品线浓缩、战略变更等，二来确实也是业内常见的毛病 —— 自大。所以就分享出来和大家一同探讨。
缘起 在过去的几篇文章里讨论了关于开源软件的供应链管理方面的内容，尤其是一些关于上游项目和下游产品的协作流程。但是均是较正面的例子分析，如企业级OpenStack、利用Docker和Kubernetes等上游项目做容器管理产品等。这次我想尝试一下反面的案例，或者是说如何避免一些常见的错误。是的，讲正面好说，讲反面意味着会惹人不高兴，尤其是在业内，之所以选择Canonical是因为它最近的高层变动、产品线废弃、以及裁掉了一些员工。当然Canonical这么多年还是做了很多优秀的事情的，不能一棒子打死。好，那么我们就先来讲讲那些做的很好的事情。
Canonical 做对了那些 在2004年，也就是Ubuntu发行版的第一版发行的时候，立即在开源界引起轩然大波，毫不夸张的说，所产生的深远影响是今天的Linux任何发行版都做不到的。回忆下当年发生的事：红帽做出了决定性的转变，花很大努力去搞红帽自己的社区和产品，这让很多红帽发行版的用户感觉受到了冷遇。当时，大家普遍认为Fedora 将会成为红帽的弃儿，会因为资源匮乏而一蹶不振。其实，这一切的发生，都是由红帽自己所扮演的，最初他们对待Fedora确实不怎么用心，几乎将自己在社区的努力毁于一旦。（较为代表性和欢乐的说法，可以参考LWN的归档：揭秘：Fedora如何和社区交互)
Ubuntu 从来就没有这些问题，从一开始，Mark Shuttleworth和他的团队对于提供一个易于使用、自由分发的Linux发行版是没有任何疑问的。在Ubuntu之前，有很多人尝试这么做过，但是Ubuntu做到了很多人没有做到的事情。那么究竟是哪里让Ubuntu在别人失败的地方成功了呢？
 选择了一个卓越的上游平台 。Ubuntu 没有像很多发行版那样：要么是从头构建，要么是使用RedHat或Mandrake的衍生品（它们二者均经历尴尬的过渡阶段，一支成为Fedora，一支成为红帽系列），而是选择了坚实可靠、由社区独立维护的Linux发行版——Debian，那时openSuSE还尚未出现，其实基于SuSE去构建Linux，本身就是一个馊主意，因为SuSE和Novell有着千丝万缕的关系。而Slackware已经是在苟延残喘，毫无生气。当然Debian也有一些挑战，至少对于Debian的一些拥护者是自由文化的忠实捍卫者，这就会和像Ubuntu的目的——希望通过Debian做一些盈利的事情，是有一些冲突的。Debian的安装的易用性也是一个问题，而这恰好为Ubuntu提供了很好的机会。 拥有高效的供应链， 而这一点和上述有直接的关系。从他们所起步的基础设施平台的情况来看，构成Ubuntu的软件供应链是可靠的，开发人员和用户是完全能够在其上面做些事情的。 Canonical在用户体验和社区投入很多。 其实在Ubuntu出现之前，Linux的使用还是很深奥，且十分吃力的操作系统，Ubuntu的出现改变了这点，从一开始它就定位为“让人们更易使用的Linux”。如果你是计算机科学或电子电器专业的，想利用业余时间鼓捣点什么，那么Ubuntu是最佳选择。Ubuntu Linux发行版比原来任何一个发行版都简单、易用，从供应链的角度来看的话，Ubuntu实现这点是因为它积极的参与了Gnome社区的用户体验项目，我知道这么说可能会让Gnome的一些朋友感到不快，但总的来说，Ubuntu曾经是被描绘为Gnome的阵营的，不可否认，Ubuntu对于Gnome的贡献是非常大的。 从一开始就定位于全球化。 Ubuntu的当地社区(按Ubuntu的说法叫做：LoCos)遍布全球各地，这些社区致力于Ubuntu的传播和并为本地的用户提供支持，这一切都有条不紊，Canonical提供各式各样的工具、广播信息、甚至在某些情况下，采用最原始的方式来进行。Ubuntu还拥有由Jono Bacon领导下的强大的社区团队，可以说Jono Bacon是Ubuntu社区成长的积极推动者和带头人（我个人曾经才OSCON上向大家介绍Jono是如何轻松驾驭Ubuntu社区的，至今印象深刻）。我们简直无法想象，如果这个庞大的全球社区陷入困境的话，对整个上游供应链的影响有多严重。这些全球用户和开发人员数量众多，而且是许多被Ubuntu采用的项目的上游社区的参与者。这是一个积极参与上游的最佳例证！它为开源生态中的每个人（包括Canonical自己）都带来了积极的成果。 Ubuntu是最早采用“云原生”支持的发行版。 这是Simon Wardley 让人们铭记的一点，Canonical 比其它任何的Linux发行版都更早的引入了“云原生”的负载，在2008-2009年，Ubuntu就成为了很多新兴的云平台和服务器技术的主要和默认的操作系统，一直延续到今天，即使是现在，如果一个新的项目要较早的采用新特性，第一时间会发布.DEB到Ubuntu，且会确保针对Ubuntu的用户的构建是成功的，且能够让开发者下载到源代码。这就给Ubuntu和Canonical带来了不可思议的优势。从供应链的角度来看，这是绝对是一手好牌！这意味着云本地工具的上游供应链是以Ubuntu为中心的，而Ubuntu通过包装是可以做很多事的。  又犯了哪些严重的错误 之所以写了Canonical上述的诸般取得的成绩，是不想一下子让读者感觉到Canonical一无是处，因为下面要谈及的内容，才是今天真正要说的，是关于犯错的事情。对于这个以令人难以置信的扩展到全球社区的Linux发行版而言，并没有从其供应链的成功学习到什么，相反却坠入了NIH综合症，相信你已经看到过很多关于针对Canonical批评的言论了，但是本文我仅谈他们关于供应链战略，以及是如何失败的。
 Launchpad。 作为Canonical建立自己的供应链战略的标志性项目——Launchpad的创建开启了这一里程，这是一个基于Web的服务，用于让开发者来创建、共享、协作软件项目的平台。其还可以执行自动构建的服务，且可让开发者非常容易的发布和管理非官方构建的最新的软件：&amp;rdquo;个人包归档&amp;rdquo; 或简称为PPA，无论从时间的把握还是愿景，Canonical的这个项目不可谓不伟大，尤其是随后Canonical声明Launchpad开源，更进一步增加了人气。但是这里隐藏了问题：如Launchpad这样复杂的维护代码库的服务平台确实是太难了。即使倾公司全部之力去实现这样的理念，都会遇到各式各样的挑战。有几种方法来处理这种复杂性：尽可能的去让上游来承载维护的成本，或者是基于Launchpad建立一个长期的收入模型从而维护其长期的发展，但是Canonical什么也没有做。事实上，Canonical的做法让情况变得更加的糟糕：他们既没有交付给上游，又没有建立收益模型来维持长期发展。换句话说，Launchpad越来越步履维艰，不仅是欠了很多的技术债务，而且仅仅由Launchpad团队来维系，而且还没有得到更多的资金用来进一步的发展。这就是Canonical从业务战略角度出发给人的第一错误印象。糟糕的用户体验，使得Ubuntu用户开始对Launchpad渐渐的失去了信心，将他们的软件开始迁移，而这进一步给了GitHub巨大的发展机会。(译者注：Launchpad创建于2004年，GitHub是2008年。所以作者会有如此一说。) juju 现在讲juju没有前途，可能还为时尚早，但是Canonical和Ubuntu到目前为止还没有显示出会将之打算利用起来，Puppet和Chef已经是成长起来了，而Ansible则是冉冉上升的一颗新星，而juju则是Canonical对于云时代的配置管理这块蛋糕的积极回应。如果Canonical在其用户的基础上在宽松一些的话，可能有非常大的机会。举例来说，Puppet和Chef，均是支持多个平台的，但是juju是捆绑在了ubuntu之下，假如说Ubuntu成为了构建云工具的事实上的标准的话，但企业仍然是由Windows、Unix以及RHEL占主导。开发者或许使用Ubuntu来构建很多工具，但是他们仍然需要将这些工具部署到实际但生产环境中，而juju是无法满足这点的。如果你是一位颇有进取心、年少有为的DevOps专家，那么juju的这种独断方式会断送了你的大好前途。因为它仅仅适用于Ubuntu，而且从来没有进入到Debian的上游社区的核心，juju的影响力非常的有限。Canonical无法与其他开发人员社区建立合作模式，而能够和其它的社区建立合作会大大的提升供应链的效率。还有juju并不能够为创收产品提供附件价值，因为它能够提供的服务能力非常的有限。因此，juju只是Canonical另外一个优秀的项目，却是糟糕的商业策略的典型案例罢了。 Unity。 如果说Launchpad和juju让人们意识到Canonical正在脱离正常到轨道的话，那么启动了Unity项目，则彻底的向人们证明了这点。在Ubuntu刚起步的时候，Canonical是Gnome桌面社区的积极参与者。这是有道理的，因为Ubuntu一直都是基于Gnome的桌面环境。就某种程度上来说，Canonical决定放弃整个Gnome社区是希望能够以自己的方式走的更远、走的更快。与Launchpad和Juju一样，如果Canonical能够通过有效的商业模式，从而获得足够的收入，进而能持续发展，这是行的通的。个人来讲，我很喜欢Unity桌面环境。但是Unity的出现，而其它Linux桌面是推动Gnome3的，这导致了Ubuntu和整个其余的Linux产生了巨大的分歧。和Launchpad、Juju一样，Ubuntu再次将自己的打包者和开发者陷入了孤立，没有上游社区的支持来稳定供应链。这也就意味着，Canonical开发人员再次成为软件的唯一开发者和维护者，这进一步压缩了Canonical欲扩而不能的资源。 Mir，坦率一点说，我并不知道Mir的起源，但是这已经不重要了。我们只需要知道一点：开源的技术界参与的一个叫做Wayland的项目，这个项目的目标建立X.org窗口服务的继承者。而Canonical再一次和社区分道扬镳，自行构建Mir项目，最后的结局就是Mir和Unity殊途同归，最后的赢家是Wayland。再次验证了供应链法则：从其中学习、习惯其中、热爱其中，否则就是背离、失败。 Ubuntu mobile／Ubuntu phone。移动世界的操作系统和服务器、桌面完全不是一个世界，因为其所基于的硬件平台通常都是专用的、封闭的。整个生态系统都是由大型的运营商说了算的。尤其是Canonical所启动的并不是自己所擅长的专业领域，进入的门槛就高些，而且进入市场并没有一个强有力的合作伙伴。如iPhone背后由AT&amp;amp;T在撑腰，至于Ubuntu Phone ，外界看来是没有明确的合作伙伴的。Ubuntu 电话和移动的操作系统，所运行的均是DOA，这点相信Canonical比谁都清楚。 Ubuntu 平台自身， 谈到这点，各位看官可能有点诧异，是的，我在本文前面花了大量的笔墨去述说Ubuntu的成功，但是，我没有提到但是大家有所感觉：它没有一处特别出彩：它没有足够大的收入来支撑正在开发的那么多的项目。在Ubuntu应该成长起来的时候，产品方面也没有一个连贯的策略。它是一个云平台吗？移动平台？企业级服务？开发者工作站？而且基于它之上构建的补充项目从来就不够完善，没有做到为旨在创造世界上最优秀的云平台提供一套完美工具的集合，亦或者是最优秀的企业级服务，或者是任何其他的选择。Canonical 尝试让Ubuntu具备各种可能性，可用于各种目的，但是没有做到产品界的铁律，在适当的时候：“说不”！  总结 说实话，我罗列上面的Canonical的几步败笔，心情很是沉重。我个人对于Ubuntu所取得的社区成绩，仍然是仰望的态度，但是正是因为爱之切，所以希望它更好！在这个世界上没有几家公司能够获得如此的荣誉，培养了如此巨大的、全球性的用户和开发者社区，他们数以百万计，且几乎覆盖了所有的国家和地区，并且用户和开发者大多具有宗教版的热情。这是巨大的成就，是值得庆贺的事情，也是不可否认的事实。这才是众所周知的Ubuntu、Canonical，当然，还有他们的创始人——Mark Shuttleworth，这并非是短视的商业行为可以做到的。
我并不是说如果没有建立上游供应链，公司就不会成功 —— 有太多的例子可以说明这点。我的意思是想说明，如果手上仅有有限的资源，而且选择了构建多个产品，您将需要来自大量全球参与的间接作用。假如Canonical选择了聚焦于上述产品的某一款产品，你可以认为，供应链不是那么的重要。我要提醒的是，作为记录，以上所列出的任何挑战未必和开源这个事实有关。相反，为了维持其发展，他们需要更广泛的采用。为了维持这一模式，他们必须去创造一个成功的产品，从而获得较高的收入，然而这一天从未到来。
教训：如果你想掌控自己的软件产品，你就得将自己的产品策略跟随开源。 如果我在Canonical的话，我会推动一个更加积极的上游战略，以从更广泛的开源参与中获得更多的收益。
关于作者 John Mark Walker 是 Dell EMC 的产品管理总监，负责管理ViPR 控制器产品，以及CoprHD开源项目，他也是资深的开源社区活跃者，如ManageIQ、Gluster、Hyperic，乃至过去的SourceForge。</description>
    </item>
    
  </channel>
</rss>