<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开放式创新 on 开源之道</title>
    <link>http://www.opensourceway.community/tags/%E5%BC%80%E6%94%BE%E5%BC%8F%E5%88%9B%E6%96%B0/</link>
    <description>Recent content in 开放式创新 on 开源之道</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016 - 2020, 适兕; all rights reserved.</copyright>
    <lastBuildDate>Thu, 12 Sep 2019 16:27:21 +0800</lastBuildDate>
    
	<atom:link href="http://www.opensourceway.community/tags/%E5%BC%80%E6%94%BE%E5%BC%8F%E5%88%9B%E6%96%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Open Core 和基于 API 的服务，商业软件如何搭上开源的顺风车！</title>
      <link>http://www.opensourceway.community/posts/business_model/open-core-vs-open-perimeter/</link>
      <pubDate>Thu, 12 Sep 2019 16:27:21 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/open-core-vs-open-perimeter/</guid>
      <description>作者 译者 备注     Ruth Suehle 开源之道：适兕     副标题：API以及基于云计算解决方案的兴起，正在推动商业开源供应商模式的变革
（图片说明：Thomas Hawk 发表在Flick上，基于 CC BY-NC 2.0 ，opensource.com 修改）
在当今，软件开发是围绕API所构建起来的，开发者再也不会将供应商的产品整合到自己的应用中，而是通过调用供应商所提供的API来进行服务。开发者毋须知道自己所调用的后端是什么，他们只需要知道供应商能够提供什么样的API、能够返回什么内容。它真正实现了彼此独立、自己负责的理想“爱情”！
这与很多企业应用供应商使用的开源策略———— Open Core 是大相径庭的。对于 Open Core 来说，其产品的核心是开放源代码的，但是会有一个企业版，这个企业版会提供一些额外的功能、商业化的支持服务等等，而基于API的服务则相反，产品的核心在云计算平台中运行，对于外部是不可见的，访问产品的唯一通道就是通过API。
正是因为API，让我们看到一些非同凡响的地方、也看到了改进和增强、以及企业版的价值通过工具、组件等方式扩展了更为广阔的边界，尽管这个时候供应商是可以在开源和闭源做出选择的，但是我们看到了更多的厂商选择了开源，因为这并不重要，重要的是他们可以从支持核心和掌控API来赚到钱，最为典型的例子就是Twilio和Stripe这两家公司了。
“梦想改造家” 的翻版  “梦想改造家” 是国内某电视台推出的基于旧房改造的电视节目，颇受欢迎。
 请允许笔者带领大家做个类比，理解这样的场景，不妨想想我们日常常见的房间改造，假如想在现有的房子里增加一间洗手间，那么需要雇佣诸如水管工以及承包商，水管工会带上很多管子到来，开始布线，而承包商则会将洗手间给建造起来。
绝大多数人是不会在于那些管子是从哪里来的，或者是如何连接到自来水系统的，而仅仅在乎的就是伸手（输入）即可来水洗手（输出），但是我们是无法离开这些而生活的，我们都会和小区签署服务水平协议（SLA），它其中描述了这些是如何工作的，那么无论是做什么和水相关的事情，洗菜、洗手、冲洗马桶等均要和这些管道打交道，（相当于软件服务的API）。
这里关键的点在于，作为业主所仅需要知道的信息就是管道的表现，它必须实现SLA所描述的内容，如果业主要设计自己的洗手间的话，花大量时间考虑的是购买洗脸池、马桶的型号、整体的布局等，这些“视觉和感觉”上的，可以为业主的家增添价值。但是还是要为水管工付钱的，很难想象为了一个洗手间而将重新改造一次供水系统。这说明了一个非常重要的道理，创新已经从核心的部分往边界迁移。
这个类比的故事，像极了如今的API的崛起，开发者只需要认清那些供应商能够提供的高性能API即可，而会将更多的精力放在增值的服务商。
Open Core 的典型模式 各位看官，请允许我为了更加清晰的表达我的观点而简单回顾一下传统意义上的 Open Core 模式的开源企业软件。
 Sugar，Sugar 内容管理系统，源代码是为用户和合作伙伴开放的，而企业版则增加了相应的企业级特性，如增强的报告系统、更好的工作流等等。 JasperSoft，JasperSoft提供开源的商业智能报告软件，在2007年旗下有超过3万的开发者注册，JasperSoft 还提供SDKs 和 RESTful APIs，用以访问其核心产品。 Odoo，Odoo，一款开源的企业资源管理（ERP）应用，是颇为流行的替代专有软件的产品，基于Open Core，Odoo及其合作伙伴围绕Core做出了上百种价格的衍生定制，核心的框架包含大约30个模块，但是社区却开发了上千个模块，其中有一些是免费的，但是很大一部分是需要付费且闭源。 ProcessMaker，ProcessMaker，一款企业流程管理（BPM）和工作流的开源项目，开发者可以基于其 Open Core来进行增强，如使用 javascript、php等编程语言，ProcessMaker 公司也提供了企业级的插件，包括企业目录服务集成、管理面板、以及增强的开发者工具等。  Open Core 模式是很多软件公司所采用的一种模式，例如，某个开源项目在最初的发布会之后会获得很大的关注（比如数百万次的下载量）等，然后顺理成章的成立一家公司来专门支撑开源代码，进而经年累月，这些公司慢慢的发展出了基于开源的扩展和订阅来，伴随着云计算和软件即服务在2006年之后的高速发展，这些公司的模式越发的突出和明朗化，他们也与时俱进，进一步开发云计算的版本，从而进一步的将其产品与开源版本区分开来。</description>
    </item>
    
    <item>
      <title>个人做开源商业咨询的清单</title>
      <link>http://www.opensourceway.community/posts/business_model/list_of_open_source_consulting_single_people/</link>
      <pubDate>Tue, 03 Jul 2018 11:40:33 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/list_of_open_source_consulting_single_people/</guid>
      <description> 引子 如何找寻出意义来？如何才能让人心甘情愿的买你的账？
清单 Shane Curcuru Shane 为企业或社区提供三类服务：
 自由/开源软件项目品牌 ： 作为曾经的Apache基金会品牌管理V.P，拥有丰富的开源项目品牌经验，有超过200+项目。 社区指导： 在个人和项目均有经验的过来人来说，可以帮助人们迅速的找到开源的贡献的流程。 商业意识： 让企业了解自己所依赖的开源技术、法律以及人员。从而降低商业上的风险。  Shane 有着长长的履历：在1999年，通过发起 Apache Xalan 项目而成为Apache PMC，在2002~2008年一直都有在做ApacheCon 的组织委员，2009年之后，成为ASF的委员，做PR方面的事情。
从2017年开始做咨询的业务。
VM Brasseur Vicky，在开源界也算是元老了，也得过开源人物大奖，有着20多年的从业经历。今年也有一本新书出来《开源铸就你的未来》。
Vicky在生意上有两个方向：
 企业开源战略规划 个人演讲培训  具体的细节：
 开源贡献培训 开源业务战略 在公司内使用开源 创立开源项目办公室 将内部的项目开源 开源社区管理和增长 自由和开源软件合规性 Inner Source  要知道，这些都是一个人的事情。
Jaime Arredondo 相对Jaime就是籍籍无名之辈了。但是他有一直在撰写博客。
佟辉 远景开源，FOSS Foresight， 最近在网易云音乐上播客，他的业务方向有两个：
 帮助高校学生/毕业生成为开启开源贡献之旅，让开源贡献为个人事业铺路 提供专业定制化的开源业务咨询服务，帮助企业快速无痛的切换到开源开发中，协助企业完成开发者关系社区的构建和维护。  </description>
    </item>
    
    <item>
      <title>红帽成功背后的秘密武器是什么？</title>
      <link>http://www.opensourceway.community/posts/business_model/what_is_the_secret_of_redhat_success/</link>
      <pubDate>Mon, 18 Jun 2018 11:12:11 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/what_is_the_secret_of_redhat_success/</guid>
      <description>引子 红帽在全球范围内，依托于开源项目和开放的文化、卓越的服务意识、精打细算的财务，将自己的收入逐年翻番，随着整个开源软件在业界影响力的提升，红帽在服务器软件，尤其是企业级Linux，占据了举足轻重的地位，在Linux kernel、虚拟化、OpenStack、Kubernetes等重大开源项目上，贡献度也是非常的耀眼，基于开源项目的商业产品线也是日渐的丰富。俨然就是开源界的霸主。
那么它背后成功的原因究竟是什么？今天我们就从西方的一位洞见者的角度来审视一番，要知道本土有着完全不一样的文化、环境和认知，所以红帽的这些成功武器未必在本土适用，或许再等上10年这样的模式行得通，但是至少现在不行。但是依然具有参考价值，让本土的那些既愿意要自由，又想要免费的啤酒的人们，起到抛砖引玉的作用。
 注：本文写于2012年。
 简短的历史回顾 红帽的缔造，要追溯到上世纪1993年，红帽是为数不多的第一代Linux发行版，它是和Debian、Slackware一起诞生在这一年的。1993年仍然是属于自由软件的年代，举例“开源”的诞生还有5年的时间。Linux 和开源软件得到大公司的认可，以及获得其商业竞争者的注意，还需要等上很多年。即使是到了1999年，人们仍然不把他当做一回事，Bill Gates 在宣传他的书时，就是如此评价 Linux的：
 确实我们承认在学生和爱好者当中我们不如Linux，但是我们从多个角度考察过，并不认为它能在商业市场上有何作为。
 Bill Gates 认为开源最大的问题在于缺乏中心化的控制。到了2011年，时任微软CEO的Steve Ballmer在其官方博客上公开宣称：
 我们的目标是为整个行业的客户和开发者促进更好的互操作性、更多的机会和选择，通过分享更多有关我们技术的信息，从而使我们的产品更加的开放。
 是的，这个世界正在发生着某种转变。
到今天，开源已经不是某些爱好者的玩具，或者是某个小众的喜好，它已经是真正的占据了技术界的位置。而且也不仅仅局限在开发代码上。红帽公司利用开源创建了一个商业模式，为公司带来了近10亿美元的年收入。红帽公司 CEO Jim Whitehurst 非常自信的夸赞红帽的商业模式：“关于（商业模式）是我们最具竞争力的优势。” 红帽在纽约证券交易所和标准普尔500指数上市，并已经发展了一系列超越Linux的产品，从中间件到虚拟化，以及培训和咨询等业务。
所有的这一切都是构建在开源不仅是软件的开发方法这样一个事实之上的，它同时也是业务运行和最佳的参与全球社区的方式，红帽通过协作的力量而崛起，绝非仅仅是源代码，而是它所做的所有事情。
红帽找到了一些原则，从而使得其将开源成功的转化为商业模式，进而改变了世界。而且红帽一直都在不遗余力的在推动这些原则：透明、协作、多样性、快速的原型、以及“开源之道”，当然这些原则也改变着我们现实的世界，一如开源的模式改变了软件的创作方式一样，通常，开源软件的创作方式基于以下几个概念：
 开放的交换 自由的交流想法是非常重要的，它本身就在创造一种氛围，从而能够让人们可以彼此学习、利用现有的信息，进而产生新的想法。 参与的力量 当人们可以自由的进行协作，人们就可以创造更多。协作的力量可以完成单人无法完成的任务，甚至创造出来的解决问题的方式是人们原来根本无法想象的。 快速的原型 快速的原型可以让创意快速的失败，这样就能够让更好的解决方案被更快的找到。当人们可以自由的进行试验的时候，人们可以从更新的角度来看问题，以及在过去没有注意到的地方寻找新的答案，人们可以在做中学。 精英主义 在精英主义之下，总是能够让最出色的想法胜出，也总是能够让最酷的特性实现到最终交付给用户的产品中，在精英主义之下，信息是公开透明的，每个人看到的都是同样的信息，最终的成果成功，决定了那些项目可以胜出，以及社区所付出从努力。 社区，社区的设立一般都具有通用的目的，即让来自全世界的一些人能够聚在一个开放的社区中，从而创造出任何单个个体无法实现的事情，社区可以让成果倍增，且可以相互分享。  但是，以上并不涉及到红帽的商业成功，要谈及商业，则要从它的订阅模式开始。
红帽的订阅模式 对于“开源”这个词的涵义和外延不止于代码，已是大家的常识。但是想要彻底弄明白红帽的成功，我们还得追溯到这个开源最为原始的起点：代码。
所有的软件都有源代码。众所周知，不是所有的软件创作者都会去选择共享代码，但是一旦这些创作者选择了共享，这也就意味着其最终用户拥有了自由和选择。另外，作为一个产业，一定不是在一座与世隔绝的孤岛上形成的，一个产业不可能只有一家公司，这个世界上也不会是仅仅只有一个产业。我们所生存的现代世界已然是一个充满连接的世界，彼此息息相关。一家公司在今天被大家所需要，另外一家公司可能会在明天才被大家所需要，但是明天的这家的公司可能会在一个完全不相关的领域彻底的改变世界。
纵观软件的历史，某位程序员或者是某个公司写了一段自己所需要的代码，然后将之分享出来，之后这段代码被其它组织或个人所重用，这样的事情我们看到过太多太多。而这就是开源的价值，而且它每天都在发生。
红帽认定了开源的这个价值，因为它为顾客提供了选择和控制的机会。这样，红帽通过其订阅模式实现开源价值与商业利润的结合，即企业是对开源开发快速创新的补充。
开源赋予了令人印象深刻的创新和快速变更。但是，企业一旦将软件部署到了生产环境中，那么创新和快速的变更对于企业来说则是噩梦般的存在。所以，红帽联合芯片制造商、硬件供应商以及独立软件开发商，对红帽的产品进行相互认证、兼容性测试，红帽则维护数以万计的软件包，并让代码冻结在某个稳定的版本。然后承诺提供支持7年的生命周期，这样红帽就将开源的优势提升到了适合稳定生产环境的所需要的安全级别——即世界上许多证券交易所都在 Red Hat Enterprise Linux 上运行他们的关键业务，这足以说明红帽产品的稳定性。
因此，那些传统上的售卖许可的商业软件会随着老化而失去其价值，但订阅软件能够做到持续的售后支持，通过更新功能、安全性的增强以及增加的硬件和软件支持，来支撑客户的整个基础设施，当然更加不用说订阅模式可预测的成本这项内容了。
社区的重要性 毫无疑问，红帽为其客户提供的价值均是建立在为开源社区的贡献之上的，这些社区包括我们常见到的社区，也包括那些成功红帽产品所特定的社区。然而，事实上也确实如此，社区对于红帽来说实在是太重要了，以至于都将它写进了红帽公司使命的核心：“成为客户，贡献者和合作伙伴社区的催化剂，以开源方式创造更好的技术”。
为了培育和推动这些社区，红帽还创建了一个社区架构和领导团队。毫无疑问，红帽最引人注目的是参与到 Fedora 项目（http://fedoraproject.org），Fedora项目是 Red Hat Enterprise Linux 的上游项目。Fedora 项目的使命是通过以下四大基础来推动自由和开源软件项目：
 自由：软件和相关内容在自由的基础上，更进一步，这不仅体现在Linux，而是整体上。 友谊：Fedora社区由来自各行各业的人组成，共同推进自由软件的发展。 特性：许多有利于所有Linux发行版的功能都是从Fedora开始的。 优先，Linux的新特性优先于上游项目Fedora。  Fedora 项目每6个月发布一个版本，其中集成了最新的创新和前沿功能。来自红帽的工程师会从一开始就参与整个开发过程。（尽管，60~70的代码均是由志愿者们所维护），然后，Red Hat将其质量保证资源用于测试，强化和认证这些功能，以确保它们满足企业级互操作性和性能的要求。这些从上游就开始撰写的代码，也是诸如梦工厂、纽约交易所这样的红帽重要客户所运行依赖的代码，同样的过程也适用于红帽参与的其它开源项目，如：Jboss、OpenShift、以及Glusterfs等社区。</description>
    </item>
    
    <item>
      <title>如何为开源项目做市场</title>
      <link>http://www.opensourceway.community/posts/business_model/marketing-open-source-project/</link>
      <pubDate>Mon, 09 Apr 2018 11:46:23 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/marketing-open-source-project/</guid>
      <description>概要 本文是根据Deirdré Straughan在北美开源峰会2017会上的演讲整理而成，演示文稿可到slideshare下载。
Deirdré Straughan 是一位经验丰富、精力充沛的女士，她目前在亚马逊云计算（AWS）的开源部门工作，但是此次分享并不是代表AWS，而仅仅是代表其本人。她过去曾经在爱立信、甲骨文、Joyent等公司工作，最近几年一直在云计算和开源领域。
Deirdré 对自己的职业生涯的总结是：”通过各种市场和社区活动来帮助技术野蛮成长！”，本文堪称是Deirdré 的精髓，尤其是她所解释的市场手段，以及这些手段为什么对于开源是非常重要的。
为什么你必须推销免费的东西 那么，什么算是市场了呢？其最基本的概念，所谓的市场就是聚集人们用钱来交换所需要的物品与服务的地方，那么作为工程师的你可能就会想：“市场是关于销售，而开源往往是免费的，而我并不算兜售什么，那么我需要市场为我做什么？”
但是，我们作为市场人员可不是这么思考的，尽管在开源的生态里，并没有销售软件本身，但是它依然在兜售着一些东西。例如，开源是在兜售想法，又或者说，利用市场来换取非常有价值的内容，尤其是人们的时间和注意力。这可能让人一时半会难以理解，有违直觉的。因为人们常常以为开源就是给予这个世界，但是开源不仅于此，它确实是有实质性的内容的，而且是有价值的。事实上，人们所贡献的时间、金钱、才华以及努力都是非常有价值的。但是，所有的这些，都需要一些前提：
 人们能够知道并了解你的项目 了解项目的价值  可想而知，没有这两个前提，开源项目无疑成了空中楼阁。
另外，目前的商业，竞争是异常激烈的。想要在开源中取得成功，必须去和大约2550万个其他的开源项目竞争，以获得关注和支持。因此，开源的市场是在非常拥挤的环境中争取非常稀缺的关注和资源。所以对于吸引人才和其它资源到开源项目中，是一件很困难的事情。
Deirdré 声称，开源项目中非常重要的资源——人本身，以及他们的时间和努力，这些人可能是项目的用户，也可能是贡献者。在贡献者当中，有一部分人可能是独立的个体，他在利用自己的业余时间去做一些贡献；也有一部分人是其雇主所安排的；更有甚至，有些特定的人们是专门被雇佣而从事特定的开源项目。最后这种情况越来越普遍了。
在某些情况下，可能人们会考虑到钱的问题，是的，没错，我们都希望相信纯粹的技术善良会得到回报，我们不应该考虑金钱。但是，现实却很残酷，我们都需要一定的钱来生存。
所幸的是现在的企业越来越多的开始支持开源了，但是很多企业却不能够确定到底哪些项目值得去投入。要想从残酷的”红海”中脱颖而出，你所开源的项目需要超越人群，不仅要吸引独立的贡献者，还要吸引可以提供物质支持的公司。
为开源项目做市场常见的陷阱 虽然上面的道理大家都懂，但是为开源项目做市场也是没有被人们所认识的，一个常见的原因是很多科技界人士并不认同市场活动。但是，作为开源项目的从业者，不应该仅仅因为提到市场而主动的逃避，因为如果想让开源项目良性的发展下去的话，就必须去做市场。如果在拥抱做市场之前，认为它是比较俗的话，那么将会是非常困难的历程。
有时对市场的抵制来自于那些热衷于口水仗的人们，这些人会错误的认为做市场是一些软的技能，专门给女士们所保留的职位，而不是（男性）的“男人”编码工作。它被视为地位较低的角色（直到你达到VP或CMO的级别）。缺乏市场营销的其他原因包括缺乏资金，或者仅仅是没有人在项目上工作，却碰巧知道如何去做。
在最理想的情况下，市场可以帮助人们来了解技术是用来干什么的，以及如何使用它。它是一种信息量丰富，真实可信，甚至鼓舞人心的沟通形式。
市场营销工具 其实有很多现成的市场工具。其中首当其冲的，也是最为重要的，那就是 代码。GitHub 就是项目的简历。项目的代码均是明确的架构后的产出，并提供模块化的能力，以便新手入门的门槛相当低。其必须是有很好的代码风格，并提供工具来帮助人们学习使用和贡献项目。
第二就是关于文档，但是文档是常常被忽略的。很多公司都对这个不怎么重视，其实文档对于吸引人们参与到项目非常的有帮助。文档通常解释了所有的命令和参数以及输出的含义。这些信息是必要的，但是远远不够。开源项目需要其他类型的文档：白皮书、博客、视频、音频、以及研讨会的讨论等等。
一旦创建了上述这些内容，那么就需要在某个地方存放它们，并能够让所有人访问到。显而易见的是，GitHub的仓库是不够的，还需要创建官网、维基百科等。
项目能够被很容易的发现是非常之重要的。及时你创建了上述所有的内容，如果用户访问不到，那么就没有任何的意义。为此，你要将项目的名称重视起来。举例来说，如果开源项目所命名的名称太过稀松平常，那么被搜索引擎搜到的概率就会低很多。为了最大限度地提高搜索引擎的搜索结果，您可以使用关键字标签和类别来帮助人们找到您的项目。
搜索引擎优化是一门神秘的艺术。处于关键字搜索结果的第一页非常有价值。出于这个原因，“SEO最佳实践经常变化，因为搜索引擎正在与想要游戏搜索结果的黑帽人士进行军备竞赛，你可以很容易地找到最近的提示和技巧，如何提高你的排名。但是，搜索引擎排名通常需要一年左右的时间才能取得实质性进展。你也需要十足的耐心。”
社区 市场可以和客户保持所有的联系。这里来举个例子，让我们考虑一下航空业，关于航空公司体验的一切都会影响消费者对航空公司的看法：从购买机票、办理登机手续、登机过程、乘坐飞机和体验、再到机场的气氛、及时的离港和抵达、行李是否准时到达，以及向家人报平安等，所有的这些流程和经验都会影响塑造到消费者对品牌的看法。
其实，IT 技术和上述的航空公司例子没有什么差别，更尤其实开源的社区和项目，有人在你的项目中经历的所有事情 - 无论好坏 - 都会影响他们对该项目的看法，以及他们是否想参与其中。
所以，社区是非常之重要的。社区文化和多样性一样重要。请精心培育你的社区，如果您的开源社区不是多元化的，那么就要认真的问问你自己：”为什么”？，找出错误并纠正，然后要持续的考虑如何吸引更广泛的参与。
多样性也意味着贡献的多样性。除了代码之外，您的项目是否认可并重视其它的贡献？这里在重申一次，是你在请求人们去帮助你完成一些工作，所以一定要确保人们是认同你的。
保持友好 请尝试近距离的观察一下新手们的入门过程，将他们吸引到你的项目中经历了什么？尤其要想想那些成长的痛苦。开源项目，和创业公司一样，往往会有一个关键的转折点，那就是在取得一定的快速增长的某个节点，往往就会转而急剧而下，这是因为没有足够的人手对变化做出快速的反应。
总而言之，做市场并不是一件邪恶的事情，或许你已经开始这么做了，只是你没有意识到罢了。
做市场，尤其是开源项目做市场，是毋须提到方法论的高度的，因为它从起源就是这么做的，或许你已经开始这么做了，至少应该知道怎么去做。哪里有很多愿意帮忙的人们都在等待着，他们只是希望被问到而已！
关于原作者 Deirdré Straughan 目前任职于AWS的开源社区参与团队，职位是内容的领导者，如AWS 的开源博客和Twitter账号@AWSOpen。她个人的Twitter账号是:@deirdres。</description>
    </item>
    
    <item>
      <title>LWN 的20年</title>
      <link>http://www.opensourceway.community/posts/business_model/lwn_20_years/</link>
      <pubDate>Mon, 29 Jan 2018 14:24:38 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/lwn_20_years/</guid>
      <description>开源之道引言 从“得到”、“极客时间”等APP 的流行，也就是说明知识付费时代的来临。但是，就是这样一个订报纸的模式，在开源界是最颇为能接受的和被大众理解的。红帽的Linux操作系统订阅模式，随着时间的推移，越发显得后劲十足。殊不知，在专门撰写Linux深度好文，还有一个在线媒体，也是订阅模式。它就是 Linux Weekly News，即Linux周刊。本土的大众还不能适应这样的模式，不过他们终究会被爆炸的讯息所淹没，再返回头来，已经迷失。
LWN 这20年 让时间倒退到1997年的年中，作为编辑的 Jonathan Corbet 和 Liz Coolbaugh 针对如何通过优雅的、稳定的、可靠的工作来应对不确定的、贫困的、没日没夜的日子进行了“扩日持久”的讨论。事实上，他们也只是想想罢了。恰好这时，红帽发起了“支持合作伙伴”计划，于是我们决定加入，一切并不会马上就能发生，于是在等待红帽的一段间歇期，我们做了一个非正式的项目：每周通讯——不会很大，但是是非常专业的，像正式的出版物一样—— 而且还一定是创立在社区的基础之上的。结果谁也没有预料到，到今天，就是这样一个非正式的项目，我们整整运营了20年，这是让所有人都很惊奇的伟大成绩。
在经历了一段思考究竟要做什么样的内容之后，在1998年的1月22日， Jonathan Corbet 和 Liz Coolbaugh 发布了LWN的第一期，第一期包含了如下一下内容：
 关于 devfs 的争议， ext2文件系统的2GB文件大小限制 在 Alpha 主机上使用 Linux 来渲染电影“泰坦尼克号”中的场景 红帽终于聘请了一名全职的质量保证人员，并推出了红帽高级开发实验室 等等  然而，期刊发布以后，没有得到任何的回馈，当时我们就在想了，没关系，因为我们并没有做任何的宣传工作。接下来，在稍后的29号发布了第二期，并没有像第一期那样默默无闻，而是充分显示了 LWN 一直以来的高水平营销技巧，首先在linux公告邮件列表中发了一封备忘录，当时并没有对于正在做的事情做过多的解释，而且留了一个几乎无人可以拼写出来的 URL，然而，就是这样，访问的人却多了起来，这也就意味着 LWN 这么做是正确的，找到了属于自己的方式。在第二期中，报告了devfs的争议，并且正确地预言，在2.2版本发布之前，大内核锁可能不会完全从内核中删除。看吧，编辑的预测也并不总是错的:-)
在第二期中，其实有一条新闻帮助LWN的流量飙升，即：Netscape决定开放其“Communicator”网页浏览器。这一事件所导致的直接后果就是：开源被全世界所关注，尽管“开源”这一词汇才刚刚发明没有几天，当然，开源软件最受关注的还是操作系统：Linux，LWN 是受惠于这次狂潮的，毫无疑问，LWN 正好赶上了这个浪潮，并且成为了Linux社区不可缺少的一部分。
在接下来的几年里，LWN 见证了一系列开源和Linux从未想过的重大事件。Linux 随着互联网泡沫的胀大而崛起，一家叫做VA linux 系统的公司进行了IPO，是这个泡沫所能鼓吹的最大限度，后来大家都知道，泡沫终究还是破了，公司纷纷倒闭，但是Linux技术却依旧屹立不倒，甚至比以往更加的强大。SCO 集团尝试盗窃Linux社区的工作果实，想间接的把Linux变为他的私有赚钱机器；社区的人们奋力抗争，SCO 最终并没有得逞，而在此过程中，更是让Linux有了一次升华，从此让Linux成为了拥有这个世界最干净的代码的内核项目。一些商业公司从这个爱好者们的玩物中发现了商机，重金开始涌入，这大大的加快了Linux本身在各个层面的发展。Linux 社区经历了前所未有的挑战，不得不从社区从几十人到数千人的快速发展中迅速的学习。甚至是来自安全方面的威胁，Linux 社区最初仅仅是受到哪些脚本小子们不疼不痒的骚扰而已，后来发展到了和垃圾邮件制造者、有组织犯罪、甚至是拥有大量资源的国家的抗争。Google秘密的买下了一个名为 Android （基于Linux内核）的手机操作系统厂商，后来用它几乎主宰了整个手机市场。这一点要感谢 Google，否则，移动设备的普及恐怕还要等上好几十年。Linux 日渐强大，成为了整个互联网经济的基石，其中一些最大的贡献者（厂商)本身并不做发行版这样的事情，但是，他们会在内部使用自己定制过的Linux版本，也会帮助Linux，使之更加的完善。
等等，需要几本书来述说我们的故事，就这样，LWN 经历了数年，并一直发展的颇为顺利。LWN 立足于自由软件的世界，慢慢的改变世界，当然所取得的成绩远远超过了当时的预期。
通过多年的运营，即在线的互联网社区，LWN 从中学习了很多。LWN 在互联网泡沫膨胀的时候是获利的，但是泡沫结束的时候，几乎收不到任何的钱了，广告业务一落千丈，在2002年的某一天（那真是糟糕的一天），LWN宣布要关闭，实在经营不下去了。但是，大量的读者并不希望我们这么做，他们以实际的行动帮助了LWN的复活，LWN的读者们捐助这一行动，让其运营者灵光乍现，何不使用订阅模式了呢？既可以满足大量读者的获得Linux资源的渴求，又能有稳定的商业来源经而经营下去。于是，开始改造网站，经过几个月的开发，LWN 使用了订阅模式，并一直经营到现在，拥有大量的死忠粉！
LWN 的模式是独一无二的，但是非常的有效。依靠订阅模式，LWN将自己的利益与读者的收获牢牢地结合在一起。在较短的时间内保持付费门槛的内容似乎足以激励订阅，同时允许LWN的内容迅速成为社区记录的一部分（虽然似乎很少有人意识到这个内容在订阅期结束后变成CC-BY-SA许可）。由 LWN 读者所建议的“订阅者链接”机制已经成为最强大的营销工具之一。总而言之，虽然 LWN 这样的模式并不能让其工作的每一个变得富有，但是为LWN工作是可以让你生活无忧的。而这一点就是让LWN达到了人们从未想过的经历——经营了整整20年。</description>
    </item>
    
    <item>
      <title>如何成功进入自由开源软件这个新兴市场</title>
      <link>http://www.opensourceway.community/posts/business_model/how_to_successfully_enter_the_foss_emerging_market/</link>
      <pubDate>Sun, 05 Nov 2017 22:26:21 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/how_to_successfully_enter_the_foss_emerging_market/</guid>
      <description>引子 从商业的角度讲，所谓的“新兴市场”，就是说一个市场还是尚待挖掘的市场，且有着巨大的潜力，有望能够成为发达的市场。维基百科的定义则更加的倾向于将这个世界以国家来划分，即拥有发达市场的国家和不发达（发展中）国家，我个人以为那是对“市场”含义的局限看法。
无论市场是否已经饱和或是一片“蓝海”，都是完全取决于你所提供的产品或服务，以及市场对该产品或服务的接受度和认知度。举例来说，意大利就不会被维基百科的定义视为新兴市场。然而，截止目前为止，意大利的互联网覆盖率为58%，那么作为宽带的互联网就会考虑进入。
那么通过更为广泛的定义，自由和开源软件（FOSS）对于大多数企业和商业界来说，就完全是一个新兴的市场。这完全是一片尚未开垦的新大陆，这里有充足的资源和各种愿景，企业对各种可能性早已虎视眈眈。但是，这里对于多数人，仍然陌生，完全是另外一套不同的文化，企业若想在这片新大陆有所斩获，就得去学习其独特的文化。
企业进入新领域常犯的错误 就商业来说，要想满足新兴市场的概念，它必然也是一个临界区，此临界区既不是标准的商业惯例，也非狂野的西部心态，而是指要转变、要发生些什么的地方。在文学和神话中，所有最令人赞叹的事情都发生在类似的临界区。在这个临界区进行运营活动，诸如满足进入新兴市场，或新兴业务，就不能按照常规的思路去思考，而是需要自由的去探索新的解决方案。各种方法的碰撞和思考，可以在流程和产品上带来惊人的创新。正因为具备这样的潜力，越来越多的企业正在寻找进入FOSS新兴市场的方法，对于此我一点都不惊讶。
进入某个市场，其实就是等同于进入另外一种关系，而所有的关系都是一样，有不止一个观点需要考虑。根据麻省理工学院斯隆管理评论发表的一项研究，许多企业进入新兴市场时，通常会在一个地方栽跟头，那就是对自己过往的经验非常的自信，而且是过于的”轻车熟路”，然后就以“一切照旧”的态度进入新兴市场。他们并没有去做必要的市场调查，也没有对相应的文化、市场需求、乃至沟通的方式和规范进行系统的学习。毫无意外，他们将会前功尽弃，沮丧的退出这个市场，然后眼睁睁的看着竞争对手获利。
这种一切照旧的方法导致了和期望的不匹配。这些企业希望使用过去的进入市场策略的老方法来进入市场、使用他们过去的流程来完成任务、他们过去的使用的信息来获得积极的关注和品牌认可、以及使用他们过去语言来获得所有的交流方式。一些进入自由和开放源码软件社区或项目的公司希望通过人力或财力的数字来满足他们的需求。这几乎和我们预料的一摸一样。公司希望通过诸如“三部曲获利法”迅速成功，但是结果往往是期望越高，失望越大，然后企业认为自由和开源永远无法满足他们，根本无法获利。继而退出，不再参与FOSS，将这个新兴的市场留给了竞争对手。
当一家企业不能去参与到 FOSS 中去的时候，其实他已经将所有的门都关闭了。它失去了公司参与FOSS 的所有益处，如快速的开发、创新、更加高效的招聘、口碑营销、以及降低总体拥有成本。而社区和项目则失去了企业支持的好处，如维护者的工资、重要基础设施的支持、以及为活动和参与者的赞助。可谓是两败俱伤。
进入 FOSS 新兴市场的正确方式 当企业进入 FOSS 参与这块陌生的领域时，他们应该像对待新兴市场一样对待它：尊重和认真考虑这个自己并不熟悉的文化。企业此时应该去量身定制、量体裁衣，而不是一味的按照过去的思维习惯而急于上手。要去花点时间，适当的停下来，去思考、认真的研究和观察、并愿意倾听业内人士的声音，这样做可以获得显著的回报，增加成功的几率。要知道 FOSS 组织是懂得如何摆脱某些关系的，更要确认这是一种互惠互利的安排。就像进入任何新的行业一样，你可以通过聘用一个熟悉这个新兴市场和陷阱的人，从而来缩短团队快速进入状态所需要的时间。
我们这些管理者、商业人士试图了解和学习如何进入 FOSS 这块新兴市场，FOSS 社区、项目、和支持者定会伸出援助之手帮助我们达成目标。和任何的关系一样，保持中庸是最好的方式。要想成功的进入这个新兴的市场，企业就必须去学习 FOSS 的语言、文化、并了解他们的需求，FOSS 社区其实就是干这个的，它定会帮助企业去了解，很多时候还会提供特别的布道。这或许是对双方都是最好的方式，双赢的局面都是大家想看到的。因为这同样也让 FOSS 社区有机会去学习企业的语言、文化和需求，从而使得所有的沟通都很高效。
其中最为重要的，FOSS 社区必须尝试保持耐心、不做评判、并在企业不可避免的失败时保持同情。许多人仍然坚持一种守旧的看法，即新兴市场要么是无法控制的，要么是愚笨的，尽管这些观点看起来无论从技术上还是商业上都是站不住脚的。这样的观点也适用于 FOSS 这个新兴的市场，许多人仍然认为自由和开源软件及其从业者是教条式的、冷漠的、无政府主义的。帮助企业进入 FOSS 这个新兴的市场，帮助他们不要在此摔跟头，并消除一些误解，我们都将从更大范围内的合作中受益。
关于原作者 VM (Vicky) Brasseur - VM(简称 Vicky)是一名管理者，其中包括管理人、管理项目、流程、产品、以及p^Hbusinesses，在她超长的18年的技术生涯中，她曾经担任分析师、程序员、产品经理、软件工程经理、软件工程总监。目前，她是一名顾问，为公司提供有关开源的战略、政策和程序的建议。她的博客地址：anonymoushash.vmbrasseur.com，以及Twitter账号：@vmbrasseur
本文由作者VM (Vicky) Brasseur 发表在Opensource.com上：How to successfully enter the FOSS emerging market。本文在Creative Commons BY-SA 4.0许可证下发布。由开源之道精心编译，欢迎转载！</description>
    </item>
    
    <item>
      <title>竞争中合作：开源商业化的爱与恨</title>
      <link>http://www.opensourceway.community/posts/business_model/coopetition_all_fair_in_love_and_open_source/</link>
      <pubDate>Mon, 16 Oct 2017 22:00:36 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/coopetition_all_fair_in_love_and_open_source/</guid>
      <description>引子 PostgreSQL vs. MySQL、 MongoDB vs. Cassandra、 Solr vs. Elasticsearch、 ReactJS vs. AngularJS。如果你是一名开源界的人士，你一定由自己所热衷的开源项目，而这个开源项目一般均会由相应的竞争项目，甚至几乎是实现了相同的功能，而且都有各自的粉丝。尽管作为个体在开源项目中标榜着自己：“我们乐意分享我们的代码。”但是，作为开源的商业公司来说，却意味着充满竞争，和其它商业模式不同的是，开源在竞争中提供了独特的挑战和机遇。
我们不妨去想象一下：福特汽车在其最新款的汽车进入工厂之前，对外公布了此款车的最新设计、规格、流程乃至细节，又或者是Apple对于下一代的iPhone做了同样的事情。你是不是觉得很奇怪？但是这样的事情在开源界每天都在上演。更加出乎人们意料的还有，很多开源的公司本来是竞争关系，却会去为同一个项目做贡献。有时候还会引起公众的热烈讨论。举例来说，在搜索这个细分领域，Lucidworks、Elastic、IBM 都在为项目Apache Lucene和Solr 贡献力量，而这三家在商业上完全是竞争关系，无独有偶，HortonWorks、MapR、Cloudera都为项目Apache Hadoop作贡献，但是这三家在大数据领域却竞争的异常激烈。
然后我们再回到福特／Apple的例子，假设他们真的发布了所有的细节，这是不是也就意味着通用汽车或三星电子会去花时间去了解这些计划，而不是走马观花的粗略审查一下？这是一个非常好的问题，而这也恰好说明了开源项目和商业竞争有着不一样的挑战和机遇。
 我的一生都是和竞争对手作对抗，我无法想象没有竞争对手我会如何活着。 &amp;ndash; Walt Disney
 商业化，商业化，商业化（重要的事情说三遍） 无论你的竞争对手是开源公司还是闭源企业，你的立场已经是开源，你都需要在这里努力。如果有必要的话，竞争对手那些专有的关键特性，你必须去快速的、有效的、以更为低廉的方式来实现，从而降低其高昂的价格。举例来说，早期的 Solr 的主要竞争对手，尤其是在电子商务领域，叫做 Endeca 搜索（现在被 Oracle收购），那时 Endeca的用户，特别钟爱其的功能是多面检索，其可以在一组搜索结果中对具有特定属性的项目数进行计数的功能（例如，搜索计算机，多面可以显示多个关于32GB内存和16GB以及8GB的内容），Solr 1.0 并没有此功能，利用开源的力量，很快就添加了相应的功能。即使到了今天，Solr仍然全部都是免费的，而 Elastic 则不是。
但是这里要注意到，商业化只是你产品策略的一部分内容而已，要知道你的开源竞争对手可以对你做同样的事情。那么从商品的角度来说，也就意味着你面临缺乏差异化和进入门槛，这样你就永远面临低价的恶性竞争。在未来你可能会遇到单子虽多，但利润率很低的情形，你必须要有心理准备。
不要成为你自己最大的敌人 像绝大多数的商业公司一样，开源的公司也同样需要赚钱。这是企业的根本，为此公司的领导者就需要去理解客户会为什么而掏腰包（以及那些不会掏），对于那些出售许可产品的开源公司——不是卖支持与服务——这也就是通常的开放核心策略，即产品部分是开源的，部分是闭源的。这样的策略总是让人不仅觉得前途暗淡，而且自己的员工也会问：“为什么不使用开源的版本，而非要付费了呢？” 对于诸如由 Apache 软件基金会（ASF）这样的社区治理所驱动的产品尤其突出。
如果你打算使用开放核心这样的商业模式来的话，希望你已经有了明确的答案，而且要讨论和开发一个共享的愿景、如何为开源做贡献，而且让销售、开发者、产品管理、技术支持等共同获得。
Lucidworks 在开始的时候，就是采用的开放核心策略（即我们最初的产品），现在看来是非常失败的尝试。其实那时和 Solr 没有明显的区别。令人欣慰的是，我们现在已经走出了这个误区，我们最新的产品迭代正在变得更好，部分原因是我们解决了内部的冲突，很明确什么是开源的，什么又是应该属于我们产品的。
不要去做一叶障目的事情 在竞争对手为开源项目增加新功能的时候，人家向所有人展示他们将来实现的计划。这个时候，你要谨记下面几件事：
 注意许可协议。如果你的竞争对手的许可证和你的许可协议不兼容的话，那么你就没必要去查看具体的实现情况，而应该去以更高层次的视野去看，如功能描述、具体讨论等。如果还有疑问，请咨询你的法律部门。如果许可证兼容并且代码很容易移植，你才可以随意的使用;否则，从头开始实现整个想法或者调整现有功能来处理此种情形则是更好的选择。 要尽量去避免过多在分析上花时间，因为执着于细节过于容易。我大学毕业以后所遇到的第一位老板曾经和我开玩笑说，你要和你竞争对手拉开距离的话，最佳方法就是把你的代码给ta，因为ta需要花费6个月乃至更多的事情，而这段时间你可以做更多让自己进步的事情。虽然这是句玩笑话，但却符合实际情形，竞争对手的大多数代码其实是不能直接使用的，若是要使用的话，请务必对代码进行彻底的阅读和分析，以确定这些功能是可以重现的。另外，也可以考虑利用销售和营销的弱点。当然，做类似的事情时，要看实际的情况，比如能够有多关键，不要过于频繁的做这些事，太过于浪费时间。 要有火眼金睛的能力，不能错过任何一个好的想法。有许多软件供应商都拒绝承认竞争对手正在改变市场或创造新的市场。几年前，我们在Solr中花费了大量时间来解决提升易用性的想法，例如无模式数据存储，以及其他NoSQL引擎成为其产品基石的可用性特征。我认为在很大程度上我们是超越了竞争对手，尤其是涉及到易用性方面（在某些方面甚至是压倒性的）。过了一段时间以后，取消了可用性，却阻碍了用户的采用，乃至有人认为Solr是为那些专家开发的系统。  竞争中合作：为什么做的正确的事却感觉是错的？ 我“团队”中最优秀的两名开发者现在都离开了，他们也从来没有为我的公司工作过。事实上，他们目前都在我的竞争对手公司里任职，他们优秀的工作让 Lucene 和 Solr 更加的出色。这就是开源项目的现状，尤其是像ASF这样的基金会下。线条不会总是直的，人生也不会一直都是高兴的，事情得从长远来看，若是能够达到健康的平衡状态，你和你的竞争对手就都会受益。你毋需去和竞争对手进行直接的对话——你只需要知道你在代码中关心的内容，当然你也要知道对方关心代码的内容，然后据此而进行下一步的计划。
即使是在市场上彼此进行直接的竞争，而且更进一步，你们都可能在更广泛的市场上与许多其他公司和项目竞争。要记住，你不可能自己将全部的市场吞噬，你的竞争对手在某种程度上是帮助你拓展市场，进一步的扩大市场规模。鉴于兼并，收购和工作变化的现实世界，您可能会发现有一天，您正在与同样的开发人员合作，那么为什么不将代码库声明为 DMZ？你能够证明你为什么比你的竞争对手更好，那么你就能在更加广阔的市场腾挪。
活下去才是最重要的 对于我和我的公司来说，2013年末和2014年初，这段日子是最为煎熬的时期，我们的社区被众多的竞争对手所包围，似乎是被压制了，而公司内部则是在争论“公司是不是可社区名一致”，而且我们强调了一种未分化的商业产品。事后看来，我们也遭受知识认知偏见的诅咒，并没有认识到人们开发应用程序的方式的心态以及为什么会这样。
从积极的一面来讲，我们深刻了解我们的开源项目具备高质量、久经验证的功能，而且我们还拥有强大的社区，这些是不可能在一夜之间消失的。我们还在机器学习方面有着不错的表现，也围绕自然语言处理开发了很多高级功能，高质量相关的特性引起来人们的更多关注，也让人们从基础版本迁移到高级版本，相对易用性方面，人们似乎已经不再那么的看重。（谁会去关心这样一个产品？ —— 第一周很好使用，但是却不能用于生产环境还丢失数据。）
我们还有这样一个直觉，那就是人们必然会对管理 Hadoop 技术栈的复杂性而对大数据产生某种畏惧感，所以我们应该提供更加简单的、易于管理的解决方案。更重要的，我们还有些现金，支持我们董事会，以及新近加入的新人，而且要改进我们的产品架构，以解决前面提到的二分法问题（开源和销售）。</description>
    </item>
    
    <item>
      <title>企业开源的福音书 —— Linux基金会发布企业开源指南</title>
      <link>http://www.opensourceway.community/posts/business_model/linux_foundation_product_open_sourceg_guide_enterprise/</link>
      <pubDate>Mon, 18 Sep 2017 21:09:29 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/linux_foundation_product_open_sourceg_guide_enterprise/</guid>
      <description>引子 开源的方法论正在层出不穷的被创造和整理，一边是闹的沸沸扬扬的FaceBook 的开源项目React许可证问题，另一边是开源峰会如火如荼的集聚着大量的人气。以开放式创新的理论大旗，开源软件以事实上的成功证明了——开源是开发软件优秀的一种实现方式，企业究竟是以何种方式来参与到开源中来，一直都是观望者们踌蹰不前的理由。但是2017年注定必须要迈出这一步。
发布企业开源指南的缘由 故事还得从今年三月讲起，在举办开源领导力峰会（开源领导力峰会是致力于分享企业治理开源的最佳实践，以及运营开源办公室的经验。）的时候，TODO Group也举行了闭门会议，来自十几个公司的开源办公室的领导者或企业的管理者，都热切的分享了他们的实践和疑惑。
再往远了谈点，我们看到诸如亚马逊这样桀骜不驯的公司，也通过@AWSOpen创立了开源办公室，还有VMware这样开源的对手，打破先例雇佣了首席开源官，而且也经常会有人问该如何成立开源办公室。
基于上述几个理由，为了帮助企业组织和改进他们的开源之路，TOGO Group竭尽所能，将所收集的知识和经验分享出来，于是整理出企业开源指南，它本身也是开源项目，以帮助企业在开源之路上可以走的轻松些。
企业开源指南概要 既然是企业，就需要有企业的思路，企业的精髓在于管理，在于指导。正如其副标题所言：“运营开源项目办公室”，毋宁说开源需要系统的逐步的进行，对于企业来讲，涉及到的部门颇多。因为它直接关系到企业的文化。
下面我们就来浏览下这些指南，本次共出品了六个部分，每个部分由一位或多位企业的开源管理者执笔，如微软的开源办公室领导：Jeff McAffer，Google的开源项目办公室经理：Will Norris，等等业内成功的运营了公司的开源部门，并卓有成效。
其中每一部分都分多个章节，分别解答为什么、什么、如何、角色等详细的阐明一个主题。以下为内容概览：
 如何去创立开源项目办公室 开源项目办公室无疑对于企业来讲作用重大，为什么需要开源项目办公室？它在公司的角色该如何定位？Google的开源项目办公室是如何运营的。如何从零开始建立开源项目办公室？该部门的架构该如何设定？设置流程和政策。事无巨细的告诉了读者。 开源管理工具 工欲善其事，必先利其器，开源项目办公室没有一些顺手的工具，是无法搞定如此众多的开源项目的。许可证、安全性、活跃度等等，当然，工具的使用也会花去你一段时间。 评估开源项目办公室的成败 管理者而言，开源项目办公室是要有业绩的，该如何评估了呢？开源项目办公室做到那些就算是成功？没有做到那些就算失败了呢？ 使用开源代码 是的，据不完全调查，大部分的公司使用开源代码／项目超过自己总数的50%，开源代码真的是拿来直接用就可以了？出了问题怎么办？遇到新需求该如何处理？选型是该如何考虑？ 参与开源社区 现实中遇到的情形是，你说的很对，我们也知道，明白，可是该怎么参加？水平不够怎么办？项目压力该如何？如何考核？怎么管理？那么你真的该多读一读此文。 雇佣开源人才 这才是重中之重！人才是最为重要的，开源软件的胜利毋宁说是开发者的胜利。开发式的、集市的方法论让基础设施软件大放异彩。原因是只有最前线的工程师们才懂得协作！懂得如何把事情做好！好的工程师都会拥抱开源！企业需要人才，所以参与开源是为了人才，求才，企业方能进行下一步的伟大梦想。  方法论，最终的归宿是往文化、氛围上靠，而这才是根本。犹如练习武术一样，纵然是学会千招万式，不是制敌，花架子而已。真的到了比赛或者是遇敌，不堪一击。但是话返回来讲，方法论对于文化上的认识具有一定的作用，尽管我们最后不知道最终的结果如何。
实际案例 Linux 基金会、TODO Group 也相应的对这些开源办公室和各大公司进行了分析，当然是基于这些公司所公开的分享、最佳实践。这些建议来自多年来在一些规模最大、最成功的软件公司的专业开源项目管理经验，他们在开源软件上建立了自己的业务，并对开源社区做出了重大贡献。在发布企业开源指南，已经整理出来两个案例，后续会逐渐增加。
 Comcast  一家成立了两个开源项目办公室的公司，依托开源，从开源中获益，并积极的参与到开源中的典型。
 SalesForce  大名鼎鼎的SaaS云计算厂商SalesForce的案例，以其在Apache孵化项目Phoenix为例讲解了他们如何从开源中获益的故事，并分享了一路以来的经历，并总结了经验教训。
后记 开源之道评论，开源的重点并不在于方法论，而是在于人们的认知，如果人们的思维方式仍然停留在上个世界8、90年代微软、甲骨文崛起时期，那么开源基本上很难施行和实践。在庞大的经济环境面前，开源确实仍然没有浮出水面被大众所认知，至少本土的现实情形是如此。但是如果没有方法论，事情会是一筹莫展。
至于开源项目办公室，确实应该是很多公司应该成立一个横向的部门，帮助企业在软件工程上发挥作用，无论是成本，还是工程，乃至是人才效应。均是利大于弊！但是在本土遍地开花，这要等好多年，这大概也恰恰是开源之道存在的意义。
开源之道会像GitHub的开源指南一样，积极的参与到企业级开源指南的翻译工作中。届时会以系列的形式分享给大家。</description>
    </item>
    
    <item>
      <title>东方文化与技术社区</title>
      <link>http://www.opensourceway.community/posts/opensource_culture/culture_and_community/</link>
      <pubDate>Sun, 06 Aug 2017 22:30:25 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/opensource_culture/culture_and_community/</guid>
      <description>开源之道的主要作者适兕，今年报名了COSCUP 2017的分会场——開放社群經營藝術，并被入选，于是远走台北，为大家分享了《东方文化与技术社区》为主题的演讲。以下为适兕的摘录。
演讲的演示文稿下载地址：《东方文化与技术社区》
 Hello，大家好！
请大家想一下，当我讲出成功的社区、技术社区、开源技术社区时，你脑海中闪过的前三个都有那些，Linux Kernel?Ubuntu?GDG?&amp;hellip;&amp;hellip;有没有本土的？要知道 COSCUP算不上真正意义上的社区，它应属于：Conference。
 社区运营是一项复杂的系统工程，涉及经济学、社会学、心理学、软件工程、人类文化等等诸多领域，任何一样的缺失，或不能保持好奇与努力，都无法经营好一个靠谱而优秀的社区。 ——《The Art of Community》阅读有感
 而我今天就是要和大家分享一下我个人对于文化，和技术社区之间的一些思考。希望能够对大家起到抛砖引玉的作用。让东方有更多成功的技术社区出现，当然开源就更加的好了。
武术界的故事 在正式开始之前，我想问下在座的各位，有没有是武术界的朋友？
真的有哦，等一下子我找你切磋，开个玩笑。
 没有吗？那我可以放心的讲了，讲错也没有关系了，反正是一个外行讲给另外一些外行的。
 嗯，我要讲的是武术界的故事，而不是讲武术、格斗、竞技比赛等。
 前一阵子，大陆地区的武林中，出现了一件事情。一位现代的MMA选手，要挑战传统的武术，大名鼎鼎的太极，在一场不到20秒的比赛中，MMA选手徐晓冬将太极玩家雷公击倒在地，后续的故事，是这位MMA选手遭到封杀，无人迎战。 要讲讲隔壁日本武林界的故事，空手道的发展也是绵软无力，直到一位大师出现，就是创立极真空手道的大山倍达，為避開鐵板一塊的傳統空手道界的反對和質疑，大山倍達選擇了「曲線救道」的理念，繞開日本本土，前往美國表演和踢館。  故事讲完了。我要说明一个什么问题了？稍后再讲。
自我介绍 先自我介绍，我自封为开源信徒：Open Source Believer！ 将自己对于开源的一些思考：
 开源文化现象， 开源商业模式， 开源社区治理 InnerSource 企业内部采用开源 科学的参与社区 如何防止破坏开源  整理了一个部落格出来——《开源之道》，如果你和我有类似的想法，愿意通过写文章的方式参与的话，可以到GitHub上提交PR。
我还是维护了一个中文翻译项目——《开源指南》即 opensource.guide。
目前在大陆一家叫做QingCloud的云计算公司负责开源相关的事情。
反思 我本人的职业生涯，或者说和开源的关系，像很多人一样，是从技术本身开始的，做了差不多十年的技术，8年的开发经验，也有带团队的做过产品。几乎在参与社区这件事上，或者建立社区上，经历了太多的失败。
于是思考，究竟是什么原因造成的？从一开始我就否定了技术本身，我们身边从来不乏聪明、勤奋的人。于是追寻答案，太多的原因了，个人的能力和精力都是有限的，而于是我就挑了个人以为是根本原因的内容——东方文化。
相关著作 作为一名阅读爱好者，广泛涉猎相关图书，从历史、政治、社会、人类等等著作开始，开始抽丝剥茧的寻找和技术、结社、人性相关的内容。今天所讲到的内容，我推荐三本书给大家。
 日裔美籍大神，弗朗西斯.福山，《信任： 孙隆基先生的《中国文化深层结构》， 台湾著名历史教授许倬云先生的中国系列。  他律 他律是和自律相应的一个词汇，形容一个人，需要外力来约束自己、寻找目标、实现目标时需要监督。比如学习和工作需要上司的胡萝卜加大棒。参与社区是因为公司需要我去参与。
他律本身并不可怕，可怕的他律的后遗症——失去方向和动力。变成了《历史的终结和最后的人》，整天坐在沙发上，喝着啤酒、吃着薯片，看着肥皂剧&amp;hellip;&amp;hellip;
自律，找到自己愿意为之奋斗的志业，如Glibc的维护者，NTP的维护者&amp;hellip;&amp;hellip; &amp;gt; I have lived a life.My only regret is that you didn&amp;rsquo;t get to live yours.</description>
    </item>
    
    <item>
      <title>关于开源软件的12条模因</title>
      <link>http://www.opensourceway.community/posts/business_model/12-memes-explain-open-source-software/</link>
      <pubDate>Sun, 30 Jul 2017 22:30:25 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/12-memes-explain-open-source-software/</guid>
      <description>题记 开源之道的主要作者适兕在LC3中国的会议上拜会了知名的社区人物：Stephen R. Walli， 并表达了自己心中的崇拜之情。Stephen R. Walli先生不仅对于开源有着切身的理解和认识，也希望能够让更多的人知道他的想法，于是开源之道经过Stephen R. Walli先生的允许，将陆续的将他的文章翻译为中文，将他对于开源和商业的思考介绍给本土的读者。本文是他的第二篇，第一篇根本就没有所谓的开源商业模式。
 何为memes？ memes 一般翻译为模因，对于模因目前比较公认的定义是“一个想法，行为或风格从一个人到另一个人的文化传播过程。 ” &amp;ndash; wikipedia
 开源软件意味着什么？当你向其他人解释的时候，你是如何传达开源的价值及其本质的？而不是自己另外创一套。要知道开源自从1997年被发明以来，已经有很多成功的案例，但是也有很多惨痛的教训。
为了未来的人们更少的犯错，我特地整理了12条memes，这些对于我来说意义非凡，均是我个人里程碑式的见解，为开源软件提供了背景知识，以及其对整个软件行业的意义。
 注：前三条是和软件本身的构造有关，我坚信之所以我们能够看到成功的开源项目，是因为软件本身的根基所决定。软件在宽松的许可下以及社区的工作方式，或许是最好的、最高效的软件重用机制，这就是让我们能够创造和维护更好的软件的条件。
 Meme #0: 人类从撰写软件的哪一天开始就是分享软件代码的 IBM是在上世纪50年代后期开始做计算机研讨会，一直持续到现在，他们称之为：共享。DEC 则在上世纪60年代开启的，支持了一个叫做“DECUS”的社区，在那里我们可以购买（仅介质的价格）到由其他人撰写、贡献的软件磁带。USENIX 是在稍后的70年代出现的，与早期UNIX版本的磁带分发兼容。所有的这些分享行为都可以追溯到19世纪40年代普林斯顿高等研究所，那里的第一台可编程计算机上就是如此工作的。
Meme #1: 撰写优秀的软件是非常难得的 我深信人们之所以愿意分享，可以归结为一个简单的事实：撰写优秀的软件是非常困难的。 关于软件的创造工作可以用两个维度来说明，即开发人员平均每天的代码开发行数，和来自合理过程的每千行代码的错误数量。无论是编程语言演进还是架构重用，所有软件都是试图用更少的代码编写更多更好的软件。软件构建的稳定性、配置管理、审核工具和流程、以及测试，所有的这些举措，目标都是在合理的软件交付过程中减少缺陷的数量。
Meme #2: 没有规矩无以成方圆 能够撰写好的软件，一定要有相应的约束条件。当我们去审视一款成功的软件产品，亦或是一个成功的开源项目时，通常情况下，其该有的都会有，如创建过程中进行同行评审，版本控制和配置管理、使用软件构建自动化和测试框架。若是没有这些，则就不可能在使用它的社区中传播，更不用说让成千上万的用户当作产品来使用了。项目的核心成员需要用心来维护，来回答“软件在执行什么”这样的恒久问题。否则，一切将陷入混乱、停止增长的状态。
Linus法则，不够严肃的说法是：足够多的眼球，缺陷就无处藏身。 我认为这实际上是一个关于提交、审核过程的陈述。经研究表明，代码审核相比于测试，能够捕获更多的缺陷。一个健康的社区总是有较为严谨的审核程序的。
Meme #3: 软件本质上动态发展的 程序在被使用的过程中逐渐的进行演进。缺陷渐渐的被发现并修复，发现新的用途并进一步驱动新的功能项。程序随着岁月的演进，逐渐的稳定、健壮。而且从一个环境移植到另外的环境。然而，在上世纪80年代，版权成为了“保护”软件分发管道的方式。伴随着互联网的发展，软件的发展速度、衍生品被创建超乎人们的想象。我们所共享的网络带宽，已经从mag-tape-sized 数据包、会议日程、日志发布，演进到全天候在全球范围内的实时创建、分发和维护。
 接下来，我们来看看一些关于开源软件社区方面的memes
 Meme #4: 对于开源，得到的总是比给予的多 这是一个在社区协作开发的经济效应问题。贡献流程是项目软件演进的生命之泉。贡献者只需花费很小的代价就可以贡献代码和修复缺陷，但是对于软件本身来说却受益颇多，相对来说，驱动持久的贡献，对于开发者来说收获的还有经验和专业的提升。
得到的总是比给予的多，不仅适用于个人，也适用于公司。如红帽、英特尔、IBM等专门对开源投入资源和资金，从而在整个Linux操作系统追求不同的业务战略。企业可以将好的软件项目打磨成专业的产品，进而满足客户的需求。
Meme #5: 吃瓜群众是成功的关键 有江湖传言是这么讲的：“一个开源项目每有一千个用户，相应就会有100为报告bug的同学，对应会有不到10位同学会修复一下，而其中仅会有一人会去读贡献者指南。”
虽说是传言，但是说明了一个道理，就贡献者流量和增长亮而言，社区的成功有三个上升趋势来度量。
 该软件易于安装和使用，因此该项目获得了大量用户。 在这些用户当中，会有开发者。软件需要能够很容易的被构建，在已知的状态下做测试，那么这些开发者（为了自己的需要）就会上手去修改代码。 在这些开发者中，也会有能够有能力提交到项目中优质开发者。所以贡献的流量乃衡量之根本也。  有很多吃瓜群众其实意味着你做对了事情，只有拥有了足够多的用户，就会有开发者参与的可能性，那么一旦开发了就可能成为贡献者。但是作为项目的发起者要做的事情是将上述所有过程都变得更为容易。
 企业在尝试创建开源项目时，常常困惑于理解社区的时间。这些企业会想当然的认为，我都开源了，人们应该对项目做些什么。要知道，基于这个思路就不太对路。这样的理解适用于广播社区（如开发者网络），而并非协作的社区。以下三条Memes适用于这些企业。
 Meme #6: 不要将产品与项目混淆。 一个软件项目可能是很多能够独立安装、运行、工作的软件的集合，以解决特定的问题。这一切都围绕代码来进行协作和讨论。项目不是产品。一款产品是某些能够解决用户问题的，且用户会为此而付费。虽然许多优秀的软件是从一个运行良好的开源项目中所孵化出的，从而减少了工程上的工作量，但依然还有大量的工作要做，以便将其变成为客户解决问题的产品。</description>
    </item>
    
    <item>
      <title>根本就没有什么所谓的开源商业模式</title>
      <link>http://www.opensourceway.community/posts/business_model/there_is_no_open_source_business_model/</link>
      <pubDate>Thu, 20 Jul 2017 10:46:43 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/there_is_no_open_source_business_model/</guid>
      <description>题记 开源之道的主要作者适兕在LC3中国的会议上拜会了知名的社区人物：Stephen Walli， 并表达了自己心中的崇拜之情。Stephen Walli先生不仅对于开源有着切身的理解和认识，也希望能够让更多的人知道他的想法，于是开源之道经过Stephen Walli先生的允许，将陆续的将他的文章翻译为中文，将他对于开源和商业的思考介绍给本土的读者。
前言 在这里我首先要提醒大家的是，撰写此文并非是要说明开源是“肮脏的商业主义”或“天下根本没有利他主义”。我的主张是经济学是关于行为而不是金钱，我是德鲁克的追随者（一家公司的存在是因为解决问题而创造了市场），我反对弗里德曼的观点（一家公司就是为股东提供回报而存在）。我信奉慷慨的人，我深信拉帕波特的解决方案对于囚徒困境是有效的，即始终以最慷慨的选择开始。我也坚信我们知道社区运行的意义，即如果你有一把篝火，是不介意我坐下来的。
我曾有幸观看了Bob Young在&amp;ldquo;All things open&amp;rdquo; 上的演讲，Bob Young 在演讲中重申了一家成功的公司应是聚焦于其客户的成功。我以为这就是红帽创立之初所种下的DNA，直到今天红帽仍然以客户的成功为己任，不断的前进。我相信分享好的软件是使我们所有人成功的唯一途径，就像我们可以作为一个部落一样。我亦坚信软件没有规矩难成气候。
这并非是利他的行为，而是工程经济 开源的定义和出现已经有20多年的历史了，红帽在成立了22年之后成为了一家超过20亿美元的公司，MySQL和JBoss被以不错的价格所收购，Cloudera和Hortonworks正在成为下一个十亿美元的软件公司，但是我想要撰文表达的是，尽管上述这些公司取得了一定经济上的成功，他们和开源商业模式没有关系，根本就没有什么所谓的开源商业模式。
我坚定的相信自由许可下、协同开发的软件的经济价值，我们从一开始开发软件就在分享着软件，这要一直追溯到上世纪40年代末和50年代初，这是因为编写好的软件本质上是一项非常艰难的工作。经事实证明，软件的代码审核要比测试本身发现的缺陷更有效，所以构建软件开发的代码审查文化来创建更加优秀的软件。在软件工程和编程系统中很多的发明来自于代码的重用，或者是精简已有的代码以生产更好的软件。软件若是没有在如何构建和部署方面拥有严谨的规则，就不可能得到发展，软件本质上是动态的，而互联网所连接的世界让此动态更加的清晰。运行良好、规则清晰、自由许可的协同社区能够解决软件的这些属性，而且相比其它的开发方式能够开发、演进、维护更优秀的软件。而这点就是开源软件背后的工程经济原理。
案例——Interix 我要讲的这个使用开源的案例，真实的反映了没有开源商业模式这样一个事实。
Interix 是上世纪90年代后期的一款产品，旨在提供在Windows NT环境下运行Unix程序。其涵盖了约300多个软件包，许可证涉及到25个，以及微软 POSIX子系统的衍生开发，当然了还有Interix自身开发的代码。这些都是在开源软件定义之前的内容。开始的时候使用的是4.4BSD-Lite分发的，因为AT&amp;amp;T/USL的律师们建议这么做。这其中gcc编译器套件为我们的工具链提供关键支持，相当于一个SDK的作用，gcc保证了客户可以将他们的UNIX应用程序移植到Windows NT中。
此项目关于GCC移植到Interix环境中就让一位高级编译器工程师花了6～8个月的时间，然后在算上测试、集成等，项目则达到了10万美元，当时的gcc套件大约有75万行代码，COCOMO的计算结果表明，价值在1000万到2000万美元之间，这个取决于工程师们具体的赚取。也正由于此，我们最终的选择不是去自行编写一套编译器套件，这个成本的节约可是两个数量级。gcc是一款维护良好、健壮、稳定的编译器套件，即使凭空从零开始编写一个新的，未必有它优秀。而这就是使用开源的益处所在。我们同样可以看到红帽为Linux内核作贡献，然后交付Fedoar和RHEL的年净收益达到10%。Interix 当然也是基于开源上游项目，但是它现在自己搞了一个分支，这也就意味着Interix无法获得gcc主干上的新功能和新的bug修复。
经实践评估，gcc每更新一次大版本，我们需要6个月的时间重新集成，但是如果我们始终将自己的修复和提交在主干上进行的话，仅仅需要一个月的时间来测试和集成。所以成本是从10万美元，降到了1万～2万美元，这就是上面提到的节省数量级的证据。我们也尝试和Cygnus接触过，根据他们的解决方案，他们拥有主要的gcc的工程团队，即多个gcc的贡献者，但是他们要的价格也贵点，需要12万美元，但是要知道其它团队接手这个项目，大约需要14个月才能开工。另外Ada Core技术公司则承诺仅需要4万美元，而且声称第二月就可以开工。看起来这是一个十分明显的结果，决定是不言而喻的。（我们无法直接参与gcc项目下的五个子项目，尽管有些项目会非常尊重并接受我们的贡献，但是有些项目却对我们嗤之以鼻，只因为我们要往微软的平台移植，这对于一些人是勉为其难的。）
这里并不是说往上游贡献就是利他主义，这只是说这是一项工程经济学。这是正确的行径，而且增强了我们自己使用的编译器。这也是开源项目能够运转良好的秘诀所在。我以为个人作出为社区贡献的决定是明智的，因为在开源世界的关键贡献里有你的名字，这在某种程度上是最好的广告，这是最佳的简历：能够胜任项目中的工作，可以有效的和他人协作，并展示出对于技术的理解，这对于面试是绝佳的优势。当然了，它还非常的有意思。它不仅有趣而且很具挑战性。如果读者你是一名开发者的话，或者渴望改进自己的技能，那么为什么不去参与到上游社区？从而实现自己的价值并增强技能。
运转良好的开源软件社区对于技术是良性的促进。社区发展到一定的阶段，就是成为产品、服务（支持、咨询、培训）、书籍以及其它周边相关内容的生态系统。使用有机的模型的话，将开源比喻为一颗大树的话，有人可以从中获得木材，另外一些则可以取得其它如树叶、树枝、树根，进而构建很多其它衍生产品。
案例——红帽公司 红帽是一家典型的基于开源的公司，可以说是一类公司的典型代表。当我深度观察红帽的时候，我发现的并非是单单的开源。我看到的是一家专注于客户的软件公司，在发展的过程中历经三位不同的首席执行官，针对的是三个截然不同的市场环境，这三位首席执行官均在自己的任期内作出了最佳决策。
 Bob Young 以制作Linux发行版而创立了公司，他致力于亨氏番茄酱的品牌模式，试图让人们一提到Linux，就立马想到红帽。而此时红帽初期的成长恰逢互联网早期阶段，也经历了整个的互联网泡沫阶段，红帽的策略几乎都是品牌管理，红帽成功的融到了资金，并在1999年公开上市。红帽的股票一度飙升。 Matt Szulick 接棒的时候，可谓是临危受命，没过几年互联网的泡沫破碎了，红帽的发行价从每股$140跌倒了每股$3.5，就这样艰难的行进着，经过几年不懈的努力，红帽成功的将自己的定位转型为服务，RHEL（红帽企业版Linux）诞生了，不久之后，红帽又推出了针对开发者的社区版本Fedora，让活跃的用户有施展才华，而红帽则去专门维护企业级的版本RHEL，更加厉害的是红帽在金融服务业中成功的跨越了摩尔鸿沟，然后，红帽花了$350M 收购了JBoss，并以此再提供企业级的中间件。正当其它家Linux发行版还处在安乐窝的时候，红帽已经将自己定位于Unix的独立软件开发商上行列了，准备吃掉Unix的份额。 时间转到2008年，Jim Whitehurst 开始掌舵，Jim Whitehurst拥有航空公司的背景，经过大刀阔斧的变革之后，可谓是成功的将红帽带上了又一个顶端。Jim Whitehurst 深刻懂得如何培养和维护员工的士气，且有着管理成本的背景，将竞争激烈的航空公司的理念带给了红帽：保证用户满意。要知道，Whitehurst执掌红帽的时间是2008年，那是经济衰退的一年，不过，事实证明Jim Whitehurst完胜，自从那以后，红帽的股价可谓是节节升高。  纵观红帽的整个历史，红帽始终致力于解决用户的问题。哈佛经济学家Theodore Levitt曾经论说过：“客户不想要一个四分之一英寸的钻头，他们想要的是一个四分之一英寸的洞。” 绝大多数的Linux发行版公司都希望自己成为最好的Linux发行版，红帽却反其道而行之，并没有去单纯的追求成为最好的Linux发行版，而是注重企业级的质量，以更加廉价的方式替代运行在数据中心中的昂贵的SPARC机器上的Solaris。
毫无疑问，红帽所构建的产品和服务是基于开源的技术，但是红帽的商业模式既和DEC Ultrix 不一样，也和 BSD 世界的Sun公司的Sun OS不同，没有照搬DEC Ultrix 和 IBM AIX 协同创建的OSF/1，也没有像Sun对Solaris 的发展是基于System V的许可，也没有像微软那样为Windows NT增加成千上万的第三方许可协议（比如伯克利Socket技术）。
技术的粘性 当一家公司根据自己的产品和服务，对外提供源代码时，并尝试发展自己的协作社区，那么这家公司就可以获得很多的益处。其技术会对客户以及未来潜在的客户具有一定的粘性，他们会进一步增设布道师和专家团队，并围绕技术更进一步的培养用户的习惯，那么技术就随之稳固的在客户中间流传。取决于技术栈和产品的依赖关系，它们可以源源不断的发展自己的业务。
工程经济效应或许没有直接从技术栈中选取那么明显，但是其开发者效应能够以控制和拥有社区来弥补。这也是诸如IBM、Intel、微软以及Oracle等公司为开发者网络狠下血本的原因，无论其与开源许可是否有关联。它们在制造粘性。红帽从其对Linux的工程投资中、其在Fedora社区的开发、以及收购Jboss的技术、专家和客户中获得了诸多的益处。</description>
    </item>
    
    <item>
      <title>开源正在成为公有云巨头们的战场</title>
      <link>http://www.opensourceway.community/posts/business_model/open_source_is_battle_field_of_public_cloud/</link>
      <pubDate>Wed, 28 Jun 2017 11:26:33 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/open_source_is_battle_field_of_public_cloud/</guid>
      <description>开源成为热门的由来 计算机编程在大型的项目中表现的至关重要，代码的优劣直接决定项目的成败，而编码本身是一项非常需要沉浸的艺术，优秀而卓越的工程师非常的难求。然而，资本所带来的技术变革，又非常的求才若渴，苦于寻找，鉴于目前的大学教育，毕业生需要花费很大的精力去培养，而且还不知道结果。突然有一天，人们发现开源社区简直是人才的巨大宝库，这里的优秀的编码人员实在是实打实的，有实际的架构设计、代码实现，于是乎，蜂拥而至！开源社区的人才成了企业争夺的对象。
时代变了，过去的软件产业是先有商业产品，然后社区有人重新实现，如操作系统，web服务器等，现在则是领先的技术先开源，如Docker、大数据生态、机器学习等。
技术社区所成立的基金会，开始渐渐的进入了商业化运作，如Linux基金会、OpenStack基金会，在培训、会议、宣传上推波助澜。更要一提的是GitHub代码托管站点，改变了人们的协作方式，影响已经不止于代码领域。
是的，开源是炙手可热的流行词汇。几乎每天都能看到很多关于开源的新闻和事件。开发者、技术人员热爱开源，公司愿意助力，这是一个开源的时代。
三则看似无关的新闻  2017.6.16 Google开源了 TenSorFlow 的对象发现，继续完善人工智能方面的生态布局。 同一周，AWS 更新了Blox ，媒体称AWS Blox 进入竞争激烈的容器市场。 也就是在17号，微软公布了另外一则消息：微软成为Cloud Foundry黄金会员，并且支持更多的开源数据库，包括MySQL、PostgreSQL、Cosmos DB等。  是的，就是在同一周，仿佛是商量好的一样。
另外再补充一条，Azure在29号又发布了关于Azure支持的Linux操作系统系列的新闻：Linux On Azure，支持几乎所有主流的Linux发行版。
是什么将他们放在一起了呢？ 我们来看一章图：
（图片来自Gartner（2017-6）
全球的公有云服务提供商的魔力象限，作为领导者的AWS和Azure，以及强有力的角逐者Google。换句话说，公有云三巨头正在展开激烈的竞争。
为什么会这样？ 都想在未来取得领导地位和竞争优势，这是不争的事实。前十年的云计算，伴随着电商、大数据的发展，以虚拟机实例和存储空间为核心，基本上是AWS的天下。微软依靠一招“微软热爱Linux”，硬生生的将自己转型成为了公有云供应商，然而Google，却没有占到任何的便宜，虽然有着优越的技术优势和文化口碑，但是始终没有赢得大众用户的芳心。
于是，Google 痛下决心，从红帽挖来了高管来主持云计算业务，那么红帽的最大武器就是对于开源的理解。在2015年，发布了两大重量级的开源项目：Kubernetes 1.0和TensorFlow ，两年过后，这两个开源项目的发展的超乎意料的好。
先说Kubernetes，在容器编排领域，已经是事实上的王者，除了项目本身的技术优越之外，还有着超强的社区运营能力，赢得了业内的尊重和信任，已经构筑了完善的生态系统。最新的版本1.7刚刚发布，已经对于传统应用的支持上升了一个台阶。
然后是TenSorFlow，人工智能是当前技术、投资界炙手可热的话题，但是TenSorFlow已经占据先机，扛着人工智能的民主化的大旗，两年过去，也已是赢得了很多重量级的用户，尤其是来自学术界的青睐。
巨头总是在布局未来，AWS和微软有如此巨大的优势，当然不希望输掉未来，既然Google是用开源来作为武器，那么就用开源砸回去。于是就出现了争相开源相关项目：
容器编排：
   公司 开源项目 备注     亚马逊 Blox    微软 Deis 收购Docker未果，收购了Deis   Google Kubernetes Kuberntes已经有Linux基金会旗下的CNCF基金会主持    机器学习：
   公司 开源项目 备注     亚马逊 MXnet    微软 CNTK    Google TenSorFlow 案例更多些    除去开源项目之外，三家公司的云计算服务，均有对应的运行环境和服务，而这才是他们真正角逐的地方。因为这是能够给他们带来收益的地方。而开源本身，除了构建生态之外，就是对于知识的传播，外围生态、下游用户的“知识”捆绑。</description>
    </item>
    
    <item>
      <title>初入开源世界的企业会犯哪些常见的错误？如何避免？</title>
      <link>http://www.opensourceway.community/posts/business_model/opensource_mistake_for_enterprise_newcomers/</link>
      <pubDate>Mon, 08 May 2017 22:01:57 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/opensource_mistake_for_enterprise_newcomers/</guid>
      <description>  借鉴开放源码，将其应用于企业的整体流程，而不仅仅是开发。
 开源软件越来越多的被采用，且延展到技术行业的每个角落，几乎所有的技术公司现在都在其产品中使用开放源码，很多公司会积极的参与到外部的开源项目中，甚至越来越多的公司开始创建开源项目用来达到商业目的。几乎在任何地方，我们都能看到开源以及人们更加深入的参与。
但是现实中，我们却看到太多的对于开源的错误理解，有的甚至丧失了很好的机会。
本文的意思并非说是所有的开源努力都是失败的。代码也写过了，产品也发布了，但是通常公司并不能从开源中得到他们应得到的益处，当然也就没有意识到他们正在做出的选择和权衡。
开源绝非是简简单单的许可协议和公开的GitHub仓库。当做完诸如各种承诺，向人们解释等事项之后，就要全身心的去走下去，它会影响到整个业务。以下是我们在数十家公司中看到的一些模式，因为他们属于以往探索开源软件的做法的先行者。经过实践证明：当做法得当，开源会让你整个公司都沟通顺畅了，成为吸引客户甚至竞争对手的新模式，提高工程质量和响应能力，并获得广泛的人才库。当然，这需要整个公司层面上去积极的参与，并兑现承诺。相反，如果是把开源仅仅是当作走过场，又或者是为了给产品增加新功能，这就是过去的官僚主义了，而这恰是工程师和他们的经理所最为痛恨的，开源就不会有任何的结果。
开源是途径，并非目的 开源重塑了企业的一些关系，并让业务更加的灵活，它让顾客乃至竞争对手成为公司的合作者。当参与开源的收益大于闭源代码时，公司就会拥抱开源，并鼓励这样的灵活业务。但是开源本身并不是一个结果，它是一种找到不同公司的利益相交的地方，并能够让这些公司合作起来 —— 它是一条途径，而不是一个地点。要想得到开源的更多收益，则须明确的走下去。
但是很多公司都会试图跳过这条路径，而直接到达终点。他们秘密的开发软件，然后在某一天说自己完美的实现了产品，并有着酷炫的功能，并声称：“现在我们开源了！” 要知道这从来都不会发生。我可以列举出一大堆理由告诉你，由此产生的项目不大可能带来开放源代码本应能得到的大部分收益。代码是使用了自由的许可授权、且有着公开的可访问的仓库，即使是产品有着相当的受众，也不会魔法般的突然出现很多参与者。所有的这一切都归因于一个原因，那就是：潜在的参与者会清楚明白的意识到 —— 你的项目没有开源的 整个过程。
一家开源的公司必须经历建设开发者社区漫长的过程，和其他利益相关的方进行合作，而且要跨越公司和项目的边界进行工作——只有代码是开放的，这一切才有可能。简短点来说，若要开源，必须经历这点。你可以从这条漫长的路径任意的点出发，但是就是不能直接跳过。
开源要趁早，不要等到万事俱备之后再开源 要等到所有的事情都完备的情况下再去开源，对于业务有着非常不利的原因：它会错失良机，以及先发优势。
当这些开发者们在秘密的进行开发，即隐藏在公司的保密协议背后在辛勤的工作，你的一些竞争对手已经早已开始建立联盟、进行协作、甚至一起投资了。所以要尽早的去进行开源项目的投资，让竞争对手追赶你，而不是相反。
一些公司对于过早的将代码开源的担忧有如下三个理由：第一，会对现有的开发流程不利，因为这涉及到开发方法和习惯的调整；第二，可能放弃潜在的信息优势：让竞争对手知道我们要开源一些项目，这意味着放弃了某些竞争优势；第三，通常是不好意思或感到囧：“我们的代码还没有准备好！我们的程序员们不乐意看到不够优雅的代码以及难以阅读的文档，等他们把这些都补上再说。”
其实这些理由都是可以理解的，也属于人之常情。让我们先来处理前两种情况：
开源可能需要对开发方法进行一些调整，而且说实话，开源的计划确实会为你的竞争对手提供一些信息，当然这也就需要你偶尔的应该去针对开源项目的时间进行合理的安排。
但是这种偶尔的情况发生的概率非常的小，如果说你的团队需要调整自己的工作方法，好的决策是尽早的改变，而不是拖延到未来。在项目早期阶段学习如何整合开源实践可能是棘手的，但是对于开源的新手来说，却能够更好地被引导，从而很快的熟悉它。在开发周期的后面来做这件事情的话，会面临项目截止日期的压力，那个时候再去改变，闭源的习惯早已经固化了每个开发者，会面临更大的困难。
至于说开源会对外发出明确的信号这件事情来说，谨记两件事：第一，无论如何，从整体的战略来说，竞争对手都会看的清晰明了，你得根据自己的业务性质来作出决定；第二，如果你的竞争对手改变了策略是因为看到你开源了项目，这不正中你意了吗？要明白自己的强项在哪里。在你的行动对他们有重要意义的情况下，他们在某种意义上自愿地将自己置于与自己的计划相关的领导作用。不要去可以隐藏什么，利用开源来将全部的优势显现出来。
最后我们再来看看不好意思的事情，即如何处理代码还没有准备好让外人看这个问题，方法很简单：尽管放手就好了。真实的情况是，你开源的越早，这些东西越少人关注，因为大家都知道没有那个代码仓库在初始阶段就是完美的。再说的更为露骨一点，不要以为会有人注意你，你随时都可以开源，因为大家关注代码是是否需要。
中层管理是关键，这是开源深入组织文化的地方 开源的实现，既可以是由上而下，也可以是至下而上。
有的时候，某些公司会将拥抱开源视为整个公司的战略部分：上层领导认识到开放源码的好处，然后在促进变革的过程中作出广泛的改变，在公司的各个部门都非常的重视开源。然而有些时候，某些公司的开源之路是从软件工程师们开始，因为他们是一线员工，明白开源给他们带来的好处。后一种情况，开源的活动是在环境的趋势下形成，又或者是工程师向自己的经理倡导、说服，无论那种情况，对于开源的推动是来自公司的基层——一线工程师，而不是公司整体的大的战略。
无论是那种方式，自上而下也好，自下而上也罢，中层经理对于开源的实现都起着巨大的作用和影响。
中层管理层是传递关于传达问题和优先事项信息的渠道。当这些转变涉及开源开发时，只有当经理们认识到发生了什么事情的时候，组织才回去认真的思考和行动。中层管理是开源内化的关键群体，如果他们没有认同这种做法，整体的组织就无法从开源中获益，甚至恰得其反。
这里我们举一个例子，绝大部分公司在转向开源时都得重新考虑评估和考核的事情，随着员工在参与开源项目花费时间的增多，那么在评估时就很难知道该如何衡量他们的业绩。如果管理人员过于注重预算和在其直接职权范围内的可交付成果，那么这些管理者就会低估员工在开源项目中的工作，这其中包括宣传、帮助其它开发者入门、审核其它贡献者的代码、以及传统公司没有过的各种事项。一名由公司某业务部门付工资的开发者，参与到开源项目中，会以公司的利益为主，进而去传播。这时如果Ta的经理试图抹杀Ta在开源的工作，那么出现的情况就是，越来越多的开发人员会将时间集中在业务部门的直接目标上，因为即使那样会对公司造成的损失，但对于个人来说则是“考核过关”。
再举一个例子，参与开源的积极活动一个非常有趣的好处就是能够在公司范围内增强内部的沟通。开发人员开始与其他业务部门的人员合作，若不是因为开源项目，他们可能一辈子也不会进行任何的合作。当双方的经理都意识到并支持这样的合作时，这些联系对于沟通来说自然是最为有效的。
开源的成功需要来自中层管理的大力支持，而不仅仅是组织层次结构的顶层或底层。
要对来自文化的抵抗有所准备 开源不仅对于在代码中产生了转换的效应，而且也会对组织的其它部分甚至非技术部分也会有所影响。如果经理和人力资源部门拒绝让这种转换扩散到整个公司，那么开源协作的技术优势和对企业文化的潜在改进就会遭到惨败。
当一群有经验的开源开发人员一起工作时，他们会以可识别的模式进行。他们有着共同的一系列使用的协作工具（版本控制仓库、缺陷跟踪、自动化测试系统等等），他们将倾向于以常规方式使用这些工具，这些工具在许多不同的项目中是常见的。即使对于非软件代码的任务也是如此：作者和编辑也会以与开发团队编写代码相同的方式来处理文档，使用相同的惯例和约定来协调工作以及作出决策。开放源码协作工具包不仅仅是技术协作的基础设施，而且还包括所有这些过程。
一个习惯于开源协作工具的员工，会自然而然的在各种场合下使用和推广这些工具，默认情况是共享的，并且始终保持开放的态度，这已经是根深蒂固的一种文化了。举例来说，一个组织该如何面对任务所有者一直在变更的情况？一定会对开源的一些边界产生怀疑。
所以招聘和人力资源也要随着逐步的开源而进行相应的转变。那些优秀的候选人当他们和公司外部的人进行协作时，会留下证明自己很牛的证据的。他们在公共的空间留下了自己的成绩，这是在整个社区的利益相关者都可以看得到的。开源能够为公司招聘到最顶级的人才创造了机会，但同时开源也形成了对所有人公开的新的人才市场。这就对管理和人力资源提出了更高的要求，他们必须应对这些新的挑战。
开源的开发因此会给公司的非工程部门带来压力，他们需要作出相应的调整，不能够认识到实际的需要，又或者是不能够满足，这对于初入开源界的公司都是较为正常的挑战。
社区无法代替你的开发者 有些时候，某些公司会认为开源是一条找到廉价的开发的方法，他们监视着他们投资的开源项目，将之转换为人力，然后开始数着提交队列中的代码行数，并开始对比自己内部的开发人员的生产力，然后梦想着“社区”会发展壮大，这样他们就可以将自己的员工分配到其他项目中去了。我可以放心的告诉你，这样的事情是永远也不会发生的，除非太阳从西边出来。
开源的贡献能够提供真正有价值的内容，甚至可以完成你一些想要完成的工作，但是他不会降低你开发的成本，公司自己的开发人员能够处理公司的优先事项，并且会对公司负责，这点是非常有价值，没有哪家公司会放弃自己雇佣开发人员。
当一个开源项目成功的时候，不仅对公司有很大的价值，而且对整个社区的价值都有很大的提升，二者是成正比的。或许会出现多家公司共享核心的情况，但您自己的组织的开发投资可能会保持不变甚至增加。在这个水平上成功的项目，投资只应增加，不应减少。
在某些时候，您可能会减少对项目的投资，但这是因为某些条件使得项目对您而言不再那么有价值，而不是因为您突然获得了与以前相同的价值。这里有一个很好的经验法则，那就是：无论社区的规模大小，开源投资与收益是成正比的。
总结 一旦您的业务使用并参与到开源项目中，请务必记住：开源仅是一条路径，要明确而坚定到走下去，且要从一开始就让中层管理参与进来。谨记开源的教训：将之应用于整个流程，而不仅仅是开发部门。这条道路没有终点，需要持续的进行投入，当然这样才会有持续不断的回报。只有一直走下去，开源的战略才能凸显其功效，偶尔的失策也就不算啥事。
本文基于知识共享署名 - 共享4.0国际许可。
James Vasile 拥有在自由和开源软件世界的用户、开发者、倡导者和顾问有15年的经验。他的专长在于软件许可和社区构建、以及非营利和创业公司，他致力于自由和开源软件的生产，尽管他的工作和兴趣往往使他远远超出了软件世界。。他现在是Open Tech Strategies, LLC,的合伙人，这是一家帮助企业创建和加入开源项目的公司。  Karl Fogel 是一名开源软件的开发者、作家、顾问。在2005年他撰写了《生产开源软件：如何成功的运行一个自由软件项目》一书，此书基于他在Subversion项目的经历而写。他曾经供职过的公司有：CollabNet、Google、Canonical、 O&#39;Reilly Media、以及Code for America / Civic Commons，均以开源专家的身份入职。他现在是Open Tech Strategies, LLC,的合伙人，这是一家帮助企业创建和加入开源项目的公司。  </description>
    </item>
    
    <item>
      <title>每家公司都应设立开源项目部门（OSPO）！</title>
      <link>http://www.opensourceway.community/posts/business_model/whats_open_source_program_office/</link>
      <pubDate>Fri, 24 Feb 2017 21:21:46 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/whats_open_source_program_office/</guid>
      <description>任何一家具有雄心壮志的现代公司，都应设置开源项目部，以对软件的整个生态施加影响。一家公司若是想增强自己在业界的影响力，将开源的消息放出、最大限度地发挥其项目的影响力，或者是为了提高产品的开发效率，一个全方位的开源计划是必须的。在观察了许多类似团队的运作后，我总结了成功的开源程序的六个共同特点：
 营销很重要。 千万不要低估牛X的营销计划和品牌战略的力量。 对开源的社区和生态作战略投资。 一些社区相比之下，会更加契合企业的技术目标。 拥有强大的法律顾问。 没有强大的法律顾问，无疑是置企业管理于危险的境地。当然这些法律顾问可能也会扼杀创新，所以你要准备好平衡的艺术。 要和产品策略一致。 如果开源项目部对于公司的产品策略毫无帮助，无疑是白白的浪费资源。 制定并传达您的最终用户和开发人员社区支持战略和指南。 你公司的任何人，若有意要参与一个现有项目的话，能够清晰的理解社区是如何运作的，并轻松入门。一定会吸引更多的人来。 雇佣那些开源大拿。 那些开源的实用主义者们无处不在，但是真正具有创新精神、超前思维、低调的开源倡导者们却是非常稀有和罕见的。如果你想做到与众不同，那么雇佣他们来运营开源项目部，是非常明智的选择。  嗯，接下来，我们就来聊聊开源项目部的进化史。
何为成功的开源 回想一下，当年“开源”还是新鲜事的时候，很多人都迫切的想知道它的结果。从开发者到系统管理员，再到企业的管理层，每一个都在努力的尝试着去理解这样一个代码开放的世界。这其中当然也包括大型的软件供应商的高层、以及有风投看中的创业公司，而这些人的疑问是：这些商业模式能成为独角兽？如何在开源的大潮中获得好处？
那时，就开始有公司设立部门为他们的开源战略描绘蓝图了，最为耀眼的莫过于Google在2004的决定，尽管当年有像IBM、英特尔、Oracle等公司也纷纷设立了开源的部门，但是Google依然独树一帜。假如可以回到过去的话，我猜测他们知道开源成为主流的话一定不会设置开源的部门，毕竟，当所有人都在使用开源软件时，还需要什么开源的愿景和战略蓝图吗？
这个想法稍稍是天真了一点，但是也说明了目前的一些现状。尽管当下的开源已经是主流，非常的普及了，但是在大多数科技公司，包括创业公司，在开放源代码开发和生态系统方面，管理层仍然存在缺乏经验的现象。许多技术公司的管理层根本就不会在开源社区花费精力，他们依然对激励的策略茫然不知，更不用提许可协议那些细微的差别，至于产品和商业模式的多样，或者是开源和商业如何混搭成新的具有竞争力的产品，更是天方夜谭。很多人还依然对于开源项目的认识，停留在毋需付费就可获得软件的阶段。其中或许有一些人明白，开源可以招聘到顶级人才，即使他们也不会明白：”舍不得孩子，套不得狼” 的道理。他们也没有悟得一个道理，开源的生态系统是成员遵守规则的共同管理的系统，从而维系公平的竞争环境。
事实证明，2017年的公司设立开源项目部是前所未有的迫切！当然要理解这个部门之前，还需要了解一下开源的流程，看这个部门作为关键的核心，是如何为其它部门服务的：
 法律：多数公司都会混合使用一些许可协议、或嵌入、或OEM第三方的工具、又或者是专利组合、以及多个商标、和版权等。这种混合的知识产权局面，就会要求规划和预期，即考虑采用公司层面上的法律框架，以平衡近期的公司利益（例如保护所述知识产权的所有权），对于开源的规划要有长期的目标。 营销：有一部分人认为开源计划毋需搞营销，这是大错特错的，开源是需要营销的，只是和传统的公司的营销方式有些不同罢了。 产品管理： 作为公司，任何东西的发布，都是产品发布，无论其是否开源，亦或是是否有直接的经济收入，所以为了更佳的确保所发布的开源产品的质量，所以要将开源通盘考虑进公司的产品组合和战略中！ 工程：你的工程团队是否深刻理解参与开源社区的规则和要求？他们是否有法律许可来提交代码？他们是否知道第一次提交补丁，不需要一定是解决了大问题的？ 客户支持：软件产品是需要考虑在发布后如何支持客户的，无论能否带来直接或是间接的收入。所发布的开源产品，亦需要可靠的支持模型，即使它是“自助服务”。 社区发展：你将如何鼓励他人参与开源社区？这和传统意义上的问答论坛是不同的，尽管问答也是整体的一个部分。什么是最佳的社区模式？你是否能够确定所到来的用户和开发者是能够感受到被欢迎的？ 生态发展：千万不要将这条和上述几条给混淆了，你打算如何和其它的社区互动？你打算将自己的项目封闭起来？还是将之视为整个开源社区的一个不可或缺的部分？  当评估该如何执行开源的规划时，上述也不过是和其它的活动类似一样需要考虑的几件事情的列表。在你的产品组合中，开源软件愈发的重要——其实这是肯定的——所以，为了更好的确保增强公司的整体战略，并产生放大效果，请慎重考虑开源。
接下来让我们回顾一下历史，看看我们今天所掌握的最佳实践，有哪些公司趟过那些坑，然后总结出来的。
工程小组 对于开源软件来说，1998和1999这两年具有非凡的重要意义！绝对是其历史的里程碑式的年份。这主要归因于Linux的壮大，再也不是昔日“吴下阿蒙”，很多公司开始对Linux平台进行开发。典型的例子就是IBM和英特尔，他们均开始设立工程小组，从而让他们自身的平台能够运行Linux。他们之所以这么做是因为如下两个原因：
 更加强调他们在开发者社区的中立性，是一项非常重要的市场策略 作为社区参与的直接结果，能更有效地增加现有产品的销量。  随着时间的推移，这两条渐渐演进为一种模式，企业决定那些开源项目值得去投入，然后为开源团队分配工程资源，并且和内部的产品团队携手合作。基本上发展成为：企业对开源进行持续的投入，开源团队利用工程资源，不断的为开源作出贡献和努力。
功夫不负有心人，开源团队并没有令人失望！在此取得了极大的成功！英特尔为 Linux 内核项目以及其它开源项目的贡献是有目共睹的了！ IBM 的“对Linux投入10亿美元”、“和平、爱和Linux”的营销手段也是赫赫有名，IBM除了市场活动之外，还为建立 Eclipse 社区投入很大的精力，甚至还是 Apache 软件基金会的最主要的贡献者。当然，这两家公司还对熟悉知识产权法的律师进行了良好的武装，尤其是涉及到影响开源软件的版权法和商标法。这些努力为在开源语境下更广泛地理解知识产权法铺平了道路。
但是，工程第一的方法仍然是有局限的，然而以开源计划中心的视野来看上述情形的话，依然有很多内容可以挖掘。且待我徐徐道来。
Google 的实验 让我们回到2004年，那时的开源只能说是刚刚显露出一点点优势，参与到社区的公司获得的益处还不是特别的明显，就在整个技术界对于开源的未来增长持观望态度的时候，Google 成立了开源项目部（OSPO）。
Google 不仅仅是为开源贡献代码和以及将开源应用到自己的产品中，Google 对于开源的理解走得更远一些：
 开发了 Google Code 代码托管平台，很多优秀的开源项目都孵化于这个平台。 创建了影响深远的 Google 暑期代码开发（GSoC），这是一项为学生提供捐赠，让学生在暑假完成一些开源项目的实现。  事后看来，Google是一家创新型的公司，有着朝技术世界迈进的远见卓识，公司清楚地看到“开源影响力”是实现其目标的一条途径。而这最终体现在对于充满天分的OSPO团队成员、以及具有远见卓识的经理——Chris DiBona的信任！</description>
    </item>
    
    <item>
      <title>开源厂商（中间服务机构）万岁！</title>
      <link>http://www.opensourceway.community/posts/business_model/long_live_open_source_company/</link>
      <pubDate>Tue, 21 Feb 2017 18:16:03 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/long_live_open_source_company/</guid>
      <description>题记 当我兴致勃勃的拿着文章：开源软件是开放式创新的最佳注解给花姐看的时候，花姐是如此回答我的：
 &amp;ldquo;开源本身是激发创新的，这个我相信大部分人都认可，但大家更多讨论的是开源如何商业变形（现）的事情&amp;rdquo;
 我明白了，花姐更加的理解IT界的商人们喜欢读什么样的文章。而我知道我更加关注的是——“布道”！无论这个对象是谁。直到有另外一天，我被一问题给惊住了：“开源的商业模式的持续性是怎么保住的？”
我想我得给这些基于开源软件的厂商、发行版正正名了，因为有很大一部分人对于开源厂商是持怀疑态度的，并当面质疑存在的正当性和合法性，尤其以一些技术背景的人为甚。
何为中间服务机构 历史的车轮在往前滚，科学在进步，技术在进化，世界的分工越来越精细，人被专门的技能所捆绑。我们看看一些职业的由来：
 裁缝：原始的分工，渐渐独立出来专门为人们裁剪衣服的职业。现在已经发展为机器批量制造的纺织品。 理发师：头发是人体新陈代谢最为明显的部分，已经发展为不是每个人都掌握的技能，而是有专门的公司和职业来做。典型的服务行业。 房产中介：房屋买卖是异常麻烦的事情，尤其是涉及到银行贷款等各种合同手续，再加上现在楼房的密集。于是形成了专门的机构来做这件事，以收取买家报酬盈利。 &amp;hellip;&amp;hellip;  这些职业发展起来，成立一个小的团体，它就成为了中间服务机构。继而进行商业化的运营。
我们来简单回顾一下软件的历史：
软件从硬件中分离出来，还是微软的商业模式成功的颠覆，在微软之前，软件如操作系统等是随着硬件一起买的，甚至开启PC时代的Apple也是这样的模式。
从技术的角度讲，软件的历史是一个不断抽象的过程，换句话说就是不断引入中间层的过程。就商业产品和每个时代崛起的公司有：Doc／Windows 的微软、虚拟化的VMware、数据库的Oracle、Linux的红帽、云计算的AWS、Azure、Google。
开源厂商必须存在的理由 伴随着开源软件的崛起，GNU、Linux、Python、Android、Hadoop、Docker、OpenStack等等无数优秀开源项目逐渐走进了人们的视野，这些项目也成就了一些互联网公司，成为了他们技术栈的基石，比如Google、AWS、Netflix、Linkedin、国内的BAT等，也让传统的服务厂商赚了个盆满钵满，如Intel、IBM、HP等，而且也成就了一些基于开源软件形成自己独特商业模式和竞争力的公司，如RedHat、SuSE、Cloudera、Mirantis等。
让笔者划一个表格，来区分一下采用开源软件／项目的分类：
   是否采用开源软件 是否拥有足够的开源工程师 中间机构的存在必要性 备注     否 是 无    是 是 无    是 否 必须 推导很重要    采用开源软件也有诸多的好处，比如可靠的软件质量、加速上市时间、卓越的创新等等，2016年 Black Duck 和 North Bridge 联合做的调查，企业使用开源软件的前三大理由是：
(图片来自Black Duck 和 North Bridge)
既然经过历史的证明，开源软件是非常靠谱的，那么就看后面的一个条件了：工程师永远是短缺的，或者说优秀的工程师永远是稀缺的！而中间机构就必然会存在！
如何征服用户？ 既然开源的厂商这样的中间机构存在是正当的，具有历史意义的，那么剩下的事情就是看厂商怎么寻找商业模式来赢取客户了。这也是笔者在探求的主题，尤其是在本土，需要考虑特殊的文化、制度和习俗。确实是非常具有挑战性！
笔者总结几点：</description>
    </item>
    
    <item>
      <title>开源软件商业模式之收入来源概览</title>
      <link>http://www.opensourceway.community/posts/business_model/opensource_business_model_overview/</link>
      <pubDate>Fri, 13 Jan 2017 21:50:10 +0800</pubDate>
      
      <guid>http://www.opensourceway.community/posts/business_model/opensource_business_model_overview/</guid>
      <description>引子 Eric S Remand 在《大教堂与集市》一书的第三章论述了开源和商业的几种关系，也即是反映在开源的热忱度和对商业的反对性，我们以表格表示下：
表格留空，聪明的读者请自行对号入座。
从开源软件这个名词诞生起，其实就是对于自由软件的妥协。是不排斥商业因素的，毕竟这是个资本的时代，但是开放式的创新又魅力难挡。开源软件 + 商业模式，何乐不为？比如红帽就在此看到了商机，经过多年苦心经营，终于成为了年营业额达2亿美元的开源公司。特别说明的是，这里的商业模式所涉及的开源软件所指的是直接的产生利益相关，而比如Google、AWS、等互联网公司间接的利用开源软件业务并不包含在内。
商业模式的框架采用 商业模式一词，近年来特别的被人们频繁的引用。作者在这里采用了《商业模式新生代》的画布框架，如下图所示：
（注：图片来源 虎嗅网）
商业的最终目的是实现利益的最大化，而收入是重要的衡量标准之一。就收入来源来说，需要思考的问题有：
 什么样的价值能够让客户心甘情愿的付费？ 客户付费买什么？ 客户是如何支付费用的？  开源软件在商业模式中，有着比较特殊的地位，那就是客户为什么要为一个人人可以免费获得的东西讨腰包？这是所有试图从开源软件中获利所思考的问题。笔者就当前的形式列举了一些。具体如下：
开源软件的商业模式列举 1、双许可证 所谓的双许可证是指其软件是基于开源许可证的，但是还有不同的许可条款。出售商业的版本用来资助开源版本的持续发展。用户可以无偿使用无须付费的、开源的版本，这仍然属于商业版本的一部分，若用户有进一步的需求，诸如商业的技术支持和服务等则就需要另行付费了。最为经典的例子就是Oracle的MySQL数据库就是这样一种模式。其实有很多公司都采取这样一种模式，比如Oracle VirtualBox、Ctitrx XenServer、GitLab等等。
2、销售专业的服务
开源软件可以通过销售服务来赚取财务上的回报，服务包括有：培训、技术支持、咨询等，而软件本身是不收取任何费用的。 还有一种情形是公开的只提供开源软件的源代码，只有用户付费了才能得到二进制的可执行程序，提供编译和软件打包的商业服务。还有，其实能够提供安装介质（DVD、U盘）也算一种商业模式。
这方面经典的例子就是红帽和IBM了。特殊的例子还有Revolution Analytics这家公司了。
3、销售品牌周边商品
一些开源组织，诸如Mozilla基金会、维基百科基金会等，销售一些如T恤、咖啡杯子等，这也可以视之为一种为用户社区提供额外服务的形式。
4、以认证和商标出售为生
这是由Moodle所创新的模式，Moodle是一家学习管理系统以及社区平台。那些使用Moodle的商家们得到认证之后，就得到了Moodle的名称和logo的授权，相应的钱会由Moodle信托基金来保管，而这就可让核心团队得到保障。
5、以软件即服务（SaaS）的形式出售
有了云计算之后，以软件即服务的方式赚取利润，不失为一种可行的办法，尤以应用软件、CMS、HR、ERP、CRM等系统，让在线用户按需付费、即用即付的订阅方式来完成整个过程，而软件本身是开源的。这也是很多小型软件提供商不错的机会。
这方面最为知名的例子就是 WordPress 内容管理系统了，依靠托管内容和样式等周边产品赚取利润。
6、与筹资组织合作 政府、大学、以及一些公司或非政府组织会在内部或者是雇佣一些牛人，为自己定制合适的系统，会常常将之开源。还有一些组织通过补助金或津贴的方式来资助开源项目的开发，比如2005年成立的Google Summer of Code 就是这样一种方式。
7、接收志愿者的赞助
这是独立开发者们常常使用的方式，直接接受用户的赞助，软件开源。SourceForge 的系统里就有一项功能是帮助开发者接受赞助。在线支付系统如PayPal、支付宝等对此种方式有着非常大的帮助。
一些大型的赞助也有案例。比如2004年Mozilla基金会就Firefox浏览器1.0的发布发起了募捐，随后在12月16日纽约时报刊登了赞助者们，整整两页的篇幅。
8、赏金驱动开发
一些特定软件的用户聚集起来，然后共同出钱，希望通过这些来得到想要的软件特性或功能。这样的方式已经存在很长的时间了。举例来说，Bountysource就是这样一家公司，从2003年开始就以此种赏金的模式应用于开源软件了。
这个最著名的例子，非高德纳的奖励支票莫属了。其实也有很多公司为开源软件的安全漏洞的发现准备了悬赏。
9、预购/集资/反向赏金模式
即众包模式，和标题都是极为相似的。国外成功的web平台有Kickstarter、Indiegogo、Bountysource，国内这么玩的有开源中国近来发布的众包平台。这里举个Indiegogo的成功的例子，来自澳大利亚的程序员Timothy Arceri，成功的在两周之内将OpenGL4.3的扩展移植到Mesa项目，从而赚取了$2500。
10、广告支持
即装机量来算的，在开源软件中安装广告的播放插件，一旦安装后服务器就可以发布广告。Google、Mozilla、Canonical就是这么玩的。当然，国内用户对这个模式并不陌生，虽然不一定是开源软件，比如盗版的Windows操作系统，预装软件统统都是此模式。
11、销售可选的商业扩展组件
这个太容易理解了，也是一般国内较为接受的方式，比如操作系统，两张DVD，一张是基本的可安装的系统盘，另外一张是闭源的、商业的发行套件。
这样的方式也被称之为“Open Core”方式，目前采用这样的方式比较知名的美国公司，也是搭上大数据的浪潮的公司，如Cloudera、Elastic、Confluent等。
12、销售某些专用的部件
例如视频游戏中的声音、图像等艺术的数据，游戏软件本身是开源的，但是这些数据是需要收费的。或者是某些关键的、特定的功能作为支撑开源软件的商用部件来销售。
13、依商业许可重新发行
一些宽松的许可协议，如Apache、BSD等，是允许以商业且闭源的方式二次发行的。这其中最为著名的例子就是苹果公司的MacOSX操作系统，其内核是使用的BSD Unix，但是其二次发行也是顺理成章。这样的方式，也是我们本土常见的方式，比如OpenStack采用是非常宽松的Apache协议，再次商业发行，包括自己修改的、新增的代码是可以不开源的。
14、混到开源软件当中
一些公司为了商业机密、知识产权、技术防守手段，基于开源平台开发的软件，然后以闭源的形式出现，一般是间接的经济利益关系。比如Nvidia在Linux下的显卡驱动。
15、推迟开源</description>
    </item>
    
  </channel>
</rss>